{"version":3,"sources":["../src/providers/remoteAttestationProvider.ts","../src/types/tee.ts","../src/providers/deriveKeyProvider.ts","../src/index.ts"],"sourcesContent":["import { IAgentRuntime, Memory, Provider, State } from \"@ai16z/eliza\";\nimport { TdxQuoteResponse, TappdClient } from \"@phala/dstack-sdk\";\nimport { RemoteAttestationQuote, TEEMode } from \"../types/tee\";\n\nclass RemoteAttestationProvider {\n    private client: TappdClient;\n\n    constructor(teeMode?: string) {\n        let endpoint: string | undefined;\n\n        // Both LOCAL and DOCKER modes use the simulator, just with different endpoints\n        switch(teeMode) {\n            case TEEMode.LOCAL:\n                endpoint = \"http://localhost:8090\";\n                console.log(\"TEE: Connecting to local simulator at localhost:8090\");\n                break;\n            case TEEMode.DOCKER:\n                endpoint = \"http://host.docker.internal:8090\";\n                console.log(\"TEE: Connecting to simulator via Docker at host.docker.internal:8090\");\n                break;\n            case TEEMode.PRODUCTION:\n                endpoint = undefined;\n                console.log(\"TEE: Running in production mode without simulator\");\n                break;\n            default:\n                throw new Error(`Invalid TEE_MODE: ${teeMode}. Must be one of: LOCAL, DOCKER, PRODUCTION`);\n        }\n\n        this.client = endpoint ? new TappdClient(endpoint) : new TappdClient();\n    }\n\n    async generateAttestation(reportData: string): Promise<RemoteAttestationQuote> {\n        try {\n            console.log(\"Generating attestation for: \", reportData);\n            const tdxQuote: TdxQuoteResponse = await this.client.tdxQuote(reportData);\n            const rtmrs = tdxQuote.replayRtmrs();\n            console.log(`rtmr0: ${rtmrs[0]}\\nrtmr1: ${rtmrs[1]}\\nrtmr2: ${rtmrs[2]}\\nrtmr3: ${rtmrs[3]}f`);\n            const quote: RemoteAttestationQuote = {\n                quote: tdxQuote.quote,\n                timestamp: Date.now(),\n            };\n            console.log(\"Remote attestation quote: \", quote);\n            return quote;\n        } catch (error) {\n            console.error(\"Error generating remote attestation:\", error);\n            throw new Error(\n                `Failed to generate TDX Quote: ${\n                    error instanceof Error ? error.message : \"Unknown error\"\n                }`\n            );\n        }\n    }\n}\n\n// Keep the original provider for backwards compatibility\nconst remoteAttestationProvider: Provider = {\n    get: async (runtime: IAgentRuntime, _message: Memory, _state?: State) => {\n        const teeMode = runtime.getSetting(\"TEE_MODE\");\n        const provider = new RemoteAttestationProvider(teeMode);\n        const agentId = runtime.agentId;\n\n        try {\n            console.log(\"Generating attestation for: \", agentId);\n            const attestation = await provider.generateAttestation(agentId);\n            return `Your Agent's remote attestation is: ${JSON.stringify(attestation)}`;\n        } catch (error) {\n            console.error(\"Error in remote attestation provider:\", error);\n            throw new Error(\n                `Failed to generate TDX Quote: ${\n                    error instanceof Error ? error.message : \"Unknown error\"\n                }`\n            );\n        }\n    },\n};\n\nexport { remoteAttestationProvider, RemoteAttestationProvider };\n","export enum TEEMode {\n    OFF = \"OFF\",\n    LOCAL = \"LOCAL\",           // For local development with simulator\n    DOCKER = \"DOCKER\",         // For docker development with simulator\n    PRODUCTION = \"PRODUCTION\"  // For production without simulator\n}\n\nexport interface RemoteAttestationQuote {\n    quote: string;\n    timestamp: number;\n}","import { IAgentRuntime, Memory, Provider, State } from \"@ai16z/eliza\";\nimport { Keypair } from \"@solana/web3.js\";\nimport crypto from \"crypto\";\nimport { DeriveKeyResponse, TappdClient } from \"@phala/dstack-sdk\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport { PrivateKeyAccount, keccak256 } from \"viem\";\nimport { RemoteAttestationProvider } from \"./remoteAttestationProvider\";\nimport { TEEMode, RemoteAttestationQuote } from \"../types/tee\";\n\ninterface DeriveKeyAttestationData {\n    agentId: string;\n    publicKey: string;\n}\n\nclass DeriveKeyProvider {\n    private client: TappdClient;\n    private raProvider: RemoteAttestationProvider;\n\n    constructor(teeMode?: string) {\n        let endpoint: string | undefined;\n\n        // Both LOCAL and DOCKER modes use the simulator, just with different endpoints\n        switch(teeMode) {\n            case TEEMode.LOCAL:\n                endpoint = \"http://localhost:8090\";\n                console.log(\"TEE: Connecting to local simulator at localhost:8090\");\n                break;\n            case TEEMode.DOCKER:\n                endpoint = \"http://host.docker.internal:8090\";\n                console.log(\"TEE: Connecting to simulator via Docker at host.docker.internal:8090\");\n                break;\n            case TEEMode.PRODUCTION:\n                endpoint = undefined;\n                console.log(\"TEE: Running in production mode without simulator\");\n                break;\n            default:\n                throw new Error(`Invalid TEE_MODE: ${teeMode}. Must be one of: LOCAL, DOCKER, PRODUCTION`);\n        }\n\n        this.client = endpoint ? new TappdClient(endpoint) : new TappdClient();\n        this.raProvider = new RemoteAttestationProvider(teeMode);\n    }\n\n    private async generateDeriveKeyAttestation(agentId: string, publicKey: string): Promise<RemoteAttestationQuote> {\n        const deriveKeyData: DeriveKeyAttestationData = {\n            agentId,\n            publicKey\n        }\n        const reportdata = JSON.stringify(deriveKeyData);\n        console.log(\"Generating Remote Attestation Quote for Derive Key...\");\n        const quote = await this.raProvider.generateAttestation(reportdata);\n        console.log(\"Remote Attestation Quote generated successfully!\");\n        return quote;\n    }\n\n\n    async rawDeriveKey(\n        path: string,\n        subject: string\n    ): Promise<DeriveKeyResponse> {\n        try {\n            if (!path || !subject) {\n                console.error(\n                    \"Path and Subject are required for key derivation\"\n                );\n            }\n\n            console.log(\"Deriving Raw Key in TEE...\");\n            const derivedKey = await this.client.deriveKey(path, subject);\n\n            console.log(\"Raw Key Derived Successfully!\");\n            return derivedKey;\n        } catch (error) {\n            console.error(\"Error deriving raw key:\", error);\n            throw error;\n        }\n    }\n\n    async deriveEd25519Keypair(\n        path: string,\n        subject: string,\n        agentId: string\n    ): Promise<{ keypair: Keypair, attestation: RemoteAttestationQuote }> {\n        try {\n            if (!path || !subject) {\n                console.error(\n                    \"Path and Subject are required for key derivation\"\n                );\n            }\n\n            console.log(\"Deriving Key in TEE...\");\n            const derivedKey = await this.client.deriveKey(path, subject);\n            const uint8ArrayDerivedKey = derivedKey.asUint8Array();\n\n            const hash = crypto.createHash(\"sha256\");\n            hash.update(uint8ArrayDerivedKey);\n            const seed = hash.digest();\n            const seedArray = new Uint8Array(seed);\n            const keypair = Keypair.fromSeed(seedArray.slice(0, 32));\n\n            // Generate an attestation for the derived key data for public to verify\n            const attestation = await this.generateDeriveKeyAttestation(\n                agentId,\n                keypair.publicKey.toBase58()\n            );\n            console.log(\"Key Derived Successfully!\");\n\n            return { keypair, attestation };\n        } catch (error) {\n            console.error(\"Error deriving key:\", error);\n            throw error;\n        }\n    }\n\n    async deriveEcdsaKeypair(\n        path: string,\n        subject: string,\n        agentId: string\n    ): Promise<{ keypair: PrivateKeyAccount, attestation: RemoteAttestationQuote }> {\n        try {\n            if (!path || !subject) {\n                console.error(\n                    \"Path and Subject are required for key derivation\"\n                );\n            }\n\n            console.log(\"Deriving ECDSA Key in TEE...\");\n            const deriveKeyResponse: DeriveKeyResponse =\n                await this.client.deriveKey(path, subject);\n            const hex = keccak256(deriveKeyResponse.asUint8Array());\n            const keypair: PrivateKeyAccount = privateKeyToAccount(hex);\n\n            // Generate an attestation for the derived key data for public to verify\n            const attestation = await this.generateDeriveKeyAttestation(\n                agentId,\n                keypair.address\n            );\n            console.log(\"ECDSA Key Derived Successfully!\");\n\n            return { keypair, attestation };\n        } catch (error) {\n            console.error(\"Error deriving ecdsa key:\", error);\n            throw error;\n        }\n    }\n}\n\nconst deriveKeyProvider: Provider = {\n    get: async (runtime: IAgentRuntime, _message?: Memory, _state?: State) => {\n        const teeMode = runtime.getSetting(\"TEE_MODE\");\n        const provider = new DeriveKeyProvider(teeMode);\n        const agentId = runtime.agentId;\n        try {\n            // Validate wallet configuration\n            if (!runtime.getSetting(\"WALLET_SECRET_SALT\")) {\n                console.error(\n                    \"Wallet secret salt is not configured in settings\"\n                );\n                return \"\";\n            }\n\n            try {\n                const secretSalt =\n                    runtime.getSetting(\"WALLET_SECRET_SALT\") || \"secret_salt\";\n                const solanaKeypair = await provider.deriveEd25519Keypair(\n                    \"/\",\n                    secretSalt,\n                    agentId\n                );\n                const evmKeypair = await provider.deriveEcdsaKeypair(\n                    \"/\",\n                    secretSalt,\n                    agentId\n                );\n                return JSON.stringify({\n                    solana: solanaKeypair.keypair.publicKey,\n                    evm: evmKeypair.keypair.address,\n                });\n            } catch (error) {\n                console.error(\"Error creating PublicKey:\", error);\n                return \"\";\n            }\n        } catch (error) {\n            console.error(\"Error in derive key provider:\", error.message);\n            return `Failed to fetch derive key information: ${error instanceof Error ? error.message : \"Unknown error\"}`;\n        }\n    },\n};\n\nexport { deriveKeyProvider, DeriveKeyProvider };\n","import { Plugin } from \"@ai16z/eliza\";\nimport { remoteAttestationProvider } from \"./providers/remoteAttestationProvider\";\nimport { deriveKeyProvider } from \"./providers/deriveKeyProvider\";\n\nexport { DeriveKeyProvider } from \"./providers/deriveKeyProvider\";\nexport { RemoteAttestationProvider } from \"./providers/remoteAttestationProvider\";\nexport { RemoteAttestationQuote, TEEMode } from \"./types/tee\";\n\nexport const teePlugin: Plugin = {\n    name: \"tee\",\n    description:\n        \"TEE plugin with actions to generate remote attestations and derive keys\",\n    actions: [\n        /* custom actions */\n    ],\n    evaluators: [\n        /* custom evaluators */\n    ],\n    providers: [\n        /* custom providers */\n        remoteAttestationProvider,\n        deriveKeyProvider,\n    ],\n    services: [\n        /* custom services */\n    ],\n};\n"],"mappings":"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","names":["TEEMode","TappdClient","TappdClient"]}