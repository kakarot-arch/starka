{"version":3,"sources":["../src/actions.ts","../src/index.ts","../src/wallet.ts"],"sourcesContent":["import {\n    type WalletClient,\n    type Plugin,\n    addParametersToDescription,\n    type Tool,\n    getTools,\n} from \"@goat-sdk/core\";\nimport {\n    type Action,\n    generateText,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n    composeContext,\n    generateObject,\n} from \"@ai16z/eliza\";\n\ntype GetOnChainActionsParams<TWalletClient extends WalletClient> = {\n    wallet: TWalletClient;\n    plugins: Plugin<TWalletClient>[];\n};\n\n/**\n * Get all the on chain actions for the given wallet client and plugins\n *\n * @param params\n * @returns\n */\nexport async function getOnChainActions<TWalletClient extends WalletClient>({\n    wallet,\n    plugins,\n}: GetOnChainActionsParams<TWalletClient>): Promise<Action[]> {\n    const tools = await getTools<TWalletClient>({\n        wallet,\n        plugins,\n        wordForTool: \"action\",\n    });\n\n    return tools\n        .map((action) => ({\n            ...action,\n            name: action.name.toUpperCase(),\n        }))\n        .map((tool) => createAction(tool));\n}\n\nfunction createAction(tool: Tool): Action {\n    return {\n        name: tool.name,\n        similes: [],\n        description: tool.description,\n        validate: async () => true,\n        handler: async (\n            runtime: IAgentRuntime,\n            message: Memory,\n            state: State | undefined,\n            options?: Record<string, unknown>,\n            callback?: HandlerCallback\n        ): Promise<boolean> => {\n            try {\n                let currentState =\n                    state ?? (await runtime.composeState(message));\n                currentState =\n                    await runtime.updateRecentMessageState(currentState);\n\n                const parameterContext = composeParameterContext(\n                    tool,\n                    currentState\n                );\n                const parameters = await generateParameters(\n                    runtime,\n                    parameterContext,\n                    tool\n                );\n\n                const parsedParameters = tool.parameters.safeParse(parameters);\n                if (!parsedParameters.success) {\n                    callback?.({\n                        text: `Invalid parameters for action ${tool.name}: ${parsedParameters.error.message}`,\n                        content: { error: parsedParameters.error.message },\n                    });\n                    return false;\n                }\n\n                const result = await tool.method(parsedParameters.data);\n                const responseContext = composeResponseContext(\n                    tool,\n                    result,\n                    currentState\n                );\n                const response = await generateResponse(\n                    runtime,\n                    responseContext\n                );\n\n                callback?.({ text: response, content: result });\n                return true;\n            } catch (error) {\n                const errorMessage =\n                    error instanceof Error ? error.message : String(error);\n                callback?.({\n                    text: `Error executing action ${tool.name}: ${errorMessage}`,\n                    content: { error: errorMessage },\n                });\n                return false;\n            }\n        },\n        examples: [],\n    };\n}\n\nfunction composeParameterContext(tool: Tool, state: State): string {\n    const contextTemplate = `{{recentMessages}}\n\nGiven the recent messages, extract the following information for the action \"${tool.name}\":\n${addParametersToDescription(\"\", tool.parameters)}\n`;\n    return composeContext({ state, template: contextTemplate });\n}\n\nasync function generateParameters(\n    runtime: IAgentRuntime,\n    context: string,\n    tool: Tool\n): Promise<unknown> {\n    const { object } = await generateObject({\n        runtime,\n        context,\n        modelClass: ModelClass.LARGE,\n        schema: tool.parameters,\n    });\n\n    return object;\n}\n\nfunction composeResponseContext(\n    tool: Tool,\n    result: unknown,\n    state: State\n): string {\n    const responseTemplate = `\n    # Action Examples\n{{actionExamples}}\n(Action examples are for reference only. Do not use the information from them in your response.)\n\n# Knowledge\n{{knowledge}}\n\n# Task: Generate dialog and actions for the character {{agentName}}.\nAbout {{agentName}}:\n{{bio}}\n{{lore}}\n\n{{providers}}\n\n{{attachments}}\n\n# Capabilities\nNote that {{agentName}} is capable of reading/seeing/hearing various forms of media, including images, videos, audio, plaintext and PDFs. Recent attachments have been included above under the \"Attachments\" section.\n\nThe action \"${tool.name}\" was executed successfully.\nHere is the result:\n${JSON.stringify(result)}\n\n{{actions}}\n\nRespond to the message knowing that the action was successful and these were the previous messages:\n{{recentMessages}}\n  `;\n    return composeContext({ state, template: responseTemplate });\n}\n\nasync function generateResponse(\n    runtime: IAgentRuntime,\n    context: string\n): Promise<string> {\n    return generateText({\n        runtime,\n        context,\n        modelClass: ModelClass.LARGE,\n    });\n}\n","import type { Plugin } from \"@ai16z/eliza\";\nimport { getOnChainActions } from \"./actions\";\nimport { erc20, USDC } from \"@goat-sdk/plugin-erc20\";\nimport { sendETH } from \"@goat-sdk/core\";\nimport { getWalletClient, getWalletProvider } from \"./wallet\";\n\nasync function createGoatPlugin(\n    getSetting: (key: string) => string | undefined\n): Promise<Plugin> {\n    const walletClient = getWalletClient(getSetting);\n    const actions = await getOnChainActions({\n        wallet: walletClient,\n        // Add plugins here based on what actions you want to use\n        // See all available plugins at https://ohmygoat.dev/chains-wallets-plugins#plugins\n        plugins: [\n            sendETH(),\n            erc20({ tokens: [USDC] }),\n        ],\n    });\n\n    return {\n        name: \"[GOAT] Onchain Actions\",\n        description: \"Base integration plugin\",\n        providers: [getWalletProvider(walletClient)],\n        evaluators: [],\n        services: [],\n        actions: actions,\n    };\n}\n\nexport default createGoatPlugin;\n","import { WalletClient } from \"@goat-sdk/core\";\nimport { viem } from \"@goat-sdk/wallet-viem\";\nimport { createWalletClient, http } from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport { bscTestnet } from \"viem/chains\";\n\n// Add the chain you want to use, remember to update also\n// the EVM_PROVIDER_URL to the correct one for the chain\nexport const chain = bscTestnet;\n\nexport function getWalletClient(\n    getSetting: (key: string) => string | undefined\n) {\n    const privateKey = getSetting(\"EVM_PRIVATE_KEY\");\n    if (!privateKey) return null;\n\n    const provider = getSetting(\"EVM_PROVIDER_URL\");\n    if (!provider) throw new Error(\"EVM_PROVIDER_URL not configured\");\n\n    const wallet = createWalletClient({\n        account: privateKeyToAccount(privateKey as `0x${string}`),\n        chain: chain,\n        transport: http(provider),\n    });\n\n    return viem(wallet);\n}\n\nexport function getWalletProvider(walletClient: WalletClient) {\n    return {\n        async get(): Promise<string | null> {\n            try {\n                const address = walletClient.getAddress();\n                const balance = await walletClient.balanceOf(address);\n                return `EVM Wallet Address: ${address}\\nBalance: ${balance} ETH`;\n            } catch (error) {\n                console.error(\"Error in EVM wallet provider:\", error);\n                return null;\n            }\n        },\n    };\n}\n"],"mappings":";AAAA;AAAA,EAGI;AAAA,EAEA;AAAA,OACG;AACP;AAAA,EAEI;AAAA,EAIA;AAAA,EAEA;AAAA,EACA;AAAA,OACG;AAaP,eAAsB,kBAAsD;AAAA,EACxE;AAAA,EACA;AACJ,GAA8D;AAC1D,QAAM,QAAQ,MAAM,SAAwB;AAAA,IACxC;AAAA,IACA;AAAA,IACA,aAAa;AAAA,EACjB,CAAC;AAED,SAAO,MACF,IAAI,CAAC,YAAY;AAAA,IACd,GAAG;AAAA,IACH,MAAM,OAAO,KAAK,YAAY;AAAA,EAClC,EAAE,EACD,IAAI,CAAC,SAAS,aAAa,IAAI,CAAC;AACzC;AAEA,SAAS,aAAa,MAAoB;AACtC,SAAO;AAAA,IACH,MAAM,KAAK;AAAA,IACX,SAAS,CAAC;AAAA,IACV,aAAa,KAAK;AAAA,IAClB,UAAU,YAAY;AAAA,IACtB,SAAS,OACL,SACA,SACA,OACA,SACA,aACmB;AACnB,UAAI;AACA,YAAI,eACA,SAAU,MAAM,QAAQ,aAAa,OAAO;AAChD,uBACI,MAAM,QAAQ,yBAAyB,YAAY;AAEvD,cAAM,mBAAmB;AAAA,UACrB;AAAA,UACA;AAAA,QACJ;AACA,cAAM,aAAa,MAAM;AAAA,UACrB;AAAA,UACA;AAAA,UACA;AAAA,QACJ;AAEA,cAAM,mBAAmB,KAAK,WAAW,UAAU,UAAU;AAC7D,YAAI,CAAC,iBAAiB,SAAS;AAC3B,qBAAW;AAAA,YACP,MAAM,iCAAiC,KAAK,IAAI,KAAK,iBAAiB,MAAM,OAAO;AAAA,YACnF,SAAS,EAAE,OAAO,iBAAiB,MAAM,QAAQ;AAAA,UACrD,CAAC;AACD,iBAAO;AAAA,QACX;AAEA,cAAM,SAAS,MAAM,KAAK,OAAO,iBAAiB,IAAI;AACtD,cAAM,kBAAkB;AAAA,UACpB;AAAA,UACA;AAAA,UACA;AAAA,QACJ;AACA,cAAM,WAAW,MAAM;AAAA,UACnB;AAAA,UACA;AAAA,QACJ;AAEA,mBAAW,EAAE,MAAM,UAAU,SAAS,OAAO,CAAC;AAC9C,eAAO;AAAA,MACX,SAAS,OAAO;AACZ,cAAM,eACF,iBAAiB,QAAQ,MAAM,UAAU,OAAO,KAAK;AACzD,mBAAW;AAAA,UACP,MAAM,0BAA0B,KAAK,IAAI,KAAK,YAAY;AAAA,UAC1D,SAAS,EAAE,OAAO,aAAa;AAAA,QACnC,CAAC;AACD,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,IACA,UAAU,CAAC;AAAA,EACf;AACJ;AAEA,SAAS,wBAAwB,MAAY,OAAsB;AAC/D,QAAM,kBAAkB;AAAA;AAAA,+EAEmD,KAAK,IAAI;AAAA,EACtF,2BAA2B,IAAI,KAAK,UAAU,CAAC;AAAA;AAE7C,SAAO,eAAe,EAAE,OAAO,UAAU,gBAAgB,CAAC;AAC9D;AAEA,eAAe,mBACX,SACA,SACA,MACgB;AAChB,QAAM,EAAE,OAAO,IAAI,MAAM,eAAe;AAAA,IACpC;AAAA,IACA;AAAA,IACA,YAAY,WAAW;AAAA,IACvB,QAAQ,KAAK;AAAA,EACjB,CAAC;AAED,SAAO;AACX;AAEA,SAAS,uBACL,MACA,QACA,OACM;AACN,QAAM,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAoBf,KAAK,IAAI;AAAA;AAAA,EAErB,KAAK,UAAU,MAAM,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOpB,SAAO,eAAe,EAAE,OAAO,UAAU,iBAAiB,CAAC;AAC/D;AAEA,eAAe,iBACX,SACA,SACe;AACf,SAAO,aAAa;AAAA,IAChB;AAAA,IACA;AAAA,IACA,YAAY,WAAW;AAAA,EAC3B,CAAC;AACL;;;ACrLA,SAAS,OAAO,YAAY;AAC5B,SAAS,eAAe;;;ACFxB,SAAS,YAAY;AACrB,SAAS,oBAAoB,YAAY;AACzC,SAAS,2BAA2B;AACpC,SAAS,kBAAkB;AAIpB,IAAM,QAAQ;AAEd,SAAS,gBACZ,YACF;AACE,QAAM,aAAa,WAAW,iBAAiB;AAC/C,MAAI,CAAC,WAAY,QAAO;AAExB,QAAM,WAAW,WAAW,kBAAkB;AAC9C,MAAI,CAAC,SAAU,OAAM,IAAI,MAAM,iCAAiC;AAEhE,QAAM,SAAS,mBAAmB;AAAA,IAC9B,SAAS,oBAAoB,UAA2B;AAAA,IACxD;AAAA,IACA,WAAW,KAAK,QAAQ;AAAA,EAC5B,CAAC;AAED,SAAO,KAAK,MAAM;AACtB;AAEO,SAAS,kBAAkB,cAA4B;AAC1D,SAAO;AAAA,IACH,MAAM,MAA8B;AAChC,UAAI;AACA,cAAM,UAAU,aAAa,WAAW;AACxC,cAAM,UAAU,MAAM,aAAa,UAAU,OAAO;AACpD,eAAO,uBAAuB,OAAO;AAAA,WAAc,OAAO;AAAA,MAC9D,SAAS,OAAO;AACZ,gBAAQ,MAAM,iCAAiC,KAAK;AACpD,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AACJ;;;ADnCA,eAAe,iBACX,YACe;AACf,QAAM,eAAe,gBAAgB,UAAU;AAC/C,QAAM,UAAU,MAAM,kBAAkB;AAAA,IACpC,QAAQ;AAAA;AAAA;AAAA,IAGR,SAAS;AAAA,MACL,QAAQ;AAAA,MACR,MAAM,EAAE,QAAQ,CAAC,IAAI,EAAE,CAAC;AAAA,IAC5B;AAAA,EACJ,CAAC;AAED,SAAO;AAAA,IACH,MAAM;AAAA,IACN,aAAa;AAAA,IACb,WAAW,CAAC,kBAAkB,YAAY,CAAC;AAAA,IAC3C,YAAY,CAAC;AAAA,IACb,UAAU,CAAC;AAAA,IACX;AAAA,EACJ;AACJ;AAEA,IAAO,cAAQ;","names":[]}