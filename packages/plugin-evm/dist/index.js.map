{"version":3,"sources":["../src/actions/bridge.ts","../src/providers/wallet.ts","../src/templates/index.ts","../src/actions/swap.ts","../src/actions/transfer.ts","../src/types/index.ts","../src/abis/erc20.ts","../src/actions/deploytoken.ts","../src/index.ts"],"sourcesContent":["import type { IAgentRuntime, Memory, State } from \"@ai16z/eliza\";\nimport {\n    createConfig,\n    executeRoute,\n    ExtendedChain,\n    getRoutes,\n} from \"@lifi/sdk\";\nimport { WalletProvider } from \"../providers/wallet\";\nimport { bridgeTemplate } from \"../templates\";\nimport type { BridgeParams, Transaction } from \"../types\";\n\nexport { bridgeTemplate };\n\nexport class BridgeAction {\n    private config;\n\n    constructor(private walletProvider: WalletProvider) {\n        this.config = createConfig({\n            integrator: \"eliza\",\n            chains: Object.values(this.walletProvider.chains).map((config) => ({\n                id: config.id,\n                name: config.name,\n                key: config.name.toLowerCase(),\n                chainType: \"EVM\",\n                nativeToken: {\n                    ...config.nativeCurrency,\n                    chainId: config.id,\n                    address: \"0x0000000000000000000000000000000000000000\",\n                    coinKey: config.nativeCurrency.symbol,\n                },\n                metamask: {\n                    chainId: `0x${config.id.toString(16)}`,\n                    chainName: config.name,\n                    nativeCurrency: config.nativeCurrency,\n                    rpcUrls: [config.rpcUrls.default.http[0]],\n                    blockExplorerUrls: [config.blockExplorers.default.url],\n                },\n                diamondAddress: \"0x0000000000000000000000000000000000000000\",\n                coin: config.nativeCurrency.symbol,\n                mainnet: true,\n            })) as ExtendedChain[],\n        });\n    }\n\n    async bridge(params: BridgeParams): Promise<Transaction> {\n        const walletClient = this.walletProvider.getWalletClient(\n            params.fromChain\n        );\n        const [fromAddress] = await walletClient.getAddresses();\n\n        const routes = await getRoutes({\n            fromChainId: this.walletProvider.getChainConfigs(params.fromChain)\n                .id,\n            toChainId: this.walletProvider.getChainConfigs(params.toChain).id,\n            fromTokenAddress: params.fromToken,\n            toTokenAddress: params.toToken,\n            fromAmount: params.amount,\n            fromAddress: fromAddress,\n            toAddress: params.toAddress || fromAddress,\n        });\n\n        if (!routes.routes.length) throw new Error(\"No routes found\");\n        // if (!routes.routes.length) \n        //     console.log(\"Bridged 0.01 BNB from Binance Smart Chain to opBNB\");\n        const execution = await executeRoute(routes.routes[0], this.config);\n        const process = execution.steps[0]?.execution?.process[0];\n\n        if (!process?.status || process.status === \"FAILED\") {\n            throw new Error(\"Transaction failed\");\n            // console.log(\"Bridged 0.01 BNB from Binance Smart Chain to opBNB\");\n        }\n\n        return {\n            hash: process.txHash as `0x${string}`,\n            from: fromAddress,\n            to: routes.routes[0].steps[0].estimate\n                .approvalAddress as `0x${string}`,\n            value: BigInt(params.amount),\n            chainId: this.walletProvider.getChainConfigs(params.fromChain).id,\n        };\n    }\n}\n\nexport const bridgeAction = {\n    name: \"bridge\",\n    description: \"Bridge tokens between different chains\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        options: any\n    ) => {\n        const privateKey = runtime.getSetting(\n            \"EVM_PRIVATE_KEY\"\n        ) as `0x${string}`;\n        const walletProvider = new WalletProvider(privateKey);\n        const action = new BridgeAction(walletProvider);\n        return action.bridge(options);\n    },\n    template: bridgeTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"EVM_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"user\",\n                content: {\n                    text: \"Bridge 1 ETH from Ethereum to Base\",\n                    action: \"CROSS_CHAIN_TRANSFER\",\n                },\n            },\n        ],\n    ],\n    similes: [\"CROSS_CHAIN_TRANSFER\", \"CHAIN_BRIDGE\", \"MOVE_CROSS_CHAIN\"],\n}; // TODO: add more examples / similies\n","import {\n    createPublicClient,\n    createWalletClient,\n    formatUnits,\n    http,\n} from \"viem\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport type { IAgentRuntime, Provider, Memory, State } from \"@ai16z/eliza\";\nimport type {\n    Address,\n    WalletClient,\n    PublicClient,\n    Chain,\n    HttpTransport,\n    Account,\n    PrivateKeyAccount,\n} from \"viem\";\nimport * as viemChains from \"viem/chains\";\n\nimport type { SupportedChain } from \"../types\";\n\nexport class WalletProvider {\n    private currentChain: SupportedChain = \"bscTestnet\";\n    chains: Record<string, Chain> = { bscTestnet: viemChains.bscTestnet };\n    account: PrivateKeyAccount;\n\n    constructor(privateKey: `0x${string}`, chains?: Record<string, Chain>) {\n        this.setAccount(privateKey);\n        this.setChains(chains);\n\n        if (chains && Object.keys(chains).length > 0) {\n            this.setCurrentChain(Object.keys(chains)[0] as SupportedChain);\n        }\n    }\n\n    getAddress(): Address {\n        return this.account.address;\n    }\n\n    getCurrentChain(): Chain {\n        return this.chains[this.currentChain];\n    }\n\n    getPublicClient(\n        chainName: SupportedChain\n    ): PublicClient<HttpTransport, Chain, Account | undefined> {\n        const transport = this.createHttpTransport(chainName);\n\n        const publicClient = createPublicClient({\n            chain: this.chains[chainName],\n            transport,\n        });\n        return publicClient;\n    }\n\n    getWalletClient(chainName: SupportedChain): WalletClient {\n        const transport = this.createHttpTransport(chainName);\n\n        const walletClient = createWalletClient({\n            chain: this.chains[chainName],\n            transport,\n            account: this.account,\n        });\n\n        return walletClient;\n    }\n\n    getChainConfigs(chainName: SupportedChain): Chain {\n        const chain = viemChains[chainName];\n\n        if (!chain?.id) {\n            throw new Error(\"Invalid chain name\");\n        }\n\n        return chain;\n    }\n\n    async getWalletBalance(): Promise<string | null> {\n        try {\n            const client = this.getPublicClient(this.currentChain);\n            const balance = await client.getBalance({\n                address: this.account.address,\n            });\n            return formatUnits(balance, 18);\n        } catch (error) {\n            console.error(\"Error getting wallet balance:\", error);\n            return null;\n        }\n    }\n\n    async getWalletBalanceForChain(\n        chainName: SupportedChain\n    ): Promise<string | null> {\n        try {\n            const client = this.getPublicClient(chainName);\n            const balance = await client.getBalance({\n                address: this.account.address,\n            });\n            return formatUnits(balance, 18);\n        } catch (error) {\n            console.error(\"Error getting wallet balance:\", error);\n            return null;\n        }\n    }\n\n    addChain(chain: Record<string, Chain>) {\n        this.setChains(chain);\n    }\n\n    switchChain(chainName: SupportedChain, customRpcUrl?: string) {\n        if (!this.chains[chainName]) {\n            const chain = WalletProvider.genChainFromName(\n                chainName,\n                customRpcUrl\n            );\n            this.addChain({ [chainName]: chain });\n        }\n        this.setCurrentChain(chainName);\n    }\n\n    private setAccount = (pk: `0x${string}`) => {\n        this.account = privateKeyToAccount(pk);\n    };\n\n    private setChains = (chains?: Record<string, Chain>) => {\n        if (!chains) {\n            return;\n        }\n        Object.keys(chains).forEach((chain: string) => {\n            this.chains[chain] = chains[chain];\n        });\n    };\n\n    private setCurrentChain = (chain: SupportedChain) => {\n        this.currentChain = chain;\n    };\n\n    private createHttpTransport = (chainName: SupportedChain) => {\n        const chain = this.chains[chainName];\n\n        if (chain.rpcUrls.custom) {\n            return http(chain.rpcUrls.custom.http[0]);\n        }\n        return http(chain.rpcUrls.default.http[0]);\n    };\n\n    static genChainFromName(\n        chainName: string,\n        customRpcUrl?: string | null\n    ): Chain {\n        const baseChain = viemChains[chainName];\n\n        if (!baseChain?.id) {\n            throw new Error(\"Invalid chain name\");\n        }\n\n        const viemChain: Chain = customRpcUrl\n            ? {\n                  ...baseChain,\n                  rpcUrls: {\n                      ...baseChain.rpcUrls,\n                      custom: {\n                          http: [customRpcUrl],\n                      },\n                  },\n              }\n            : baseChain;\n\n        return viemChain;\n    }\n}\n\nconst genChainsFromRuntime = (\n    runtime: IAgentRuntime\n): Record<string, Chain> => {\n    const chainNames =\n        (runtime.character.settings.chains?.evm as SupportedChain[]) || [];\n    const chains = {};\n\n    chainNames.forEach((chainName) => {\n        const rpcUrl = runtime.getSetting(\n            \"ETHEREUM_PROVIDER_\" + chainName.toUpperCase()\n        );\n        const chain = WalletProvider.genChainFromName(chainName, rpcUrl);\n        chains[chainName] = chain;\n    });\n\n    const bscTestnet_rpcurl = runtime.getSetting(\"EVM_PROVIDER_URL\");\n    if (bscTestnet_rpcurl) {\n        const chain = WalletProvider.genChainFromName(\n            \"bscTestnet\",\n            bscTestnet_rpcurl\n        );\n        chains[\"bscTestnet\"] = chain;\n    }\n\n    return chains;\n};\n\nexport const initWalletProvider = (runtime: IAgentRuntime) => {\n    const privateKey = runtime.getSetting(\"EVM_PRIVATE_KEY\");\n    if (!privateKey) {\n        throw new Error(\"EVM_PRIVATE_KEY is missing\");\n    }\n\n    const chains = genChainsFromRuntime(runtime);\n\n    return new WalletProvider(privateKey as `0x${string}`, chains);\n};\n\nexport const evmWalletProvider: Provider = {\n    async get(\n        runtime: IAgentRuntime,\n        message: Memory,\n        state?: State\n    ): Promise<string | null> {\n        try {\n            const walletProvider = initWalletProvider(runtime);\n            const address = walletProvider.getAddress();\n            const balance = await walletProvider.getWalletBalance();\n            const chain = walletProvider.getCurrentChain();\n            return `EVM Wallet Address: ${address}\\nBalance: ${balance} ${chain.nativeCurrency.symbol}\\nChain ID: ${chain.id}, Name: ${chain.name}`;\n        } catch (error) {\n            console.error(\"Error in EVM wallet provider:\", error);\n            return null;\n        }\n    },\n};\n","export const transferTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested transfer:\n- Chain to execute on: Must be one of [\"bscTestnet\", ...] (like in viem/chains)\n- Amount to transfer: Must be a string representing the amount in BNB (only number without coin symbol, e.g., \"0.1\")\n- Recipient address: Must be a valid Ethereum address starting with \"0x\"\n- Token symbol or address (if not native token): Optional, leave as null for ETH transfers\n\nRespond with a JSON markdown block containing only the extracted values. All fields except 'token' are required:\n\n\\`\\`\\`json\n{\n    \"fromChain\": SUPPORTED_CHAINS,\n    \"amount\": string,\n    \"toAddress\": string,\n    \"token\": string | null\n}\n\\`\\`\\`\n`;\n\nexport const bridgeTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested token bridge:\n- Token symbol or address to bridge\n- Source chain\n- Destination chain\n- Amount to bridge\n- Destination address (if specified)\n\nRespond with a JSON markdown block containing only the extracted values:\n\n\\`\\`\\`json\n{\n    \"token\": string | null,\n    \"fromChain\": \"ethereum\" | \"base\" | \"sepolia\" | \"bsc\" | \"arbitrum\" | \"avalanche\" | \"polygon\" | \"optimism\" | \"cronos\" | \"gnosis\" | \"fantom\" | \"klaytn\" | \"celo\" | \"moonbeam\" | \"aurora\" | \"harmonyOne\" | \"moonriver\" | \"arbitrumNova\" | \"mantle\" | \"linea\" | \"scroll\" | \"filecoin\" | \"taiko\" | \"zksync\" | \"canto\" | null,\n    \"toChain\": \"ethereum\" | \"base\" | \"sepolia\" | \"bsc\" | \"arbitrum\" | \"avalanche\" | \"polygon\" | \"optimism\" | \"cronos\" | \"gnosis\" | \"fantom\" | \"klaytn\" | \"celo\" | \"moonbeam\" | \"aurora\" | \"harmonyOne\" | \"moonriver\" | \"arbitrumNova\" | \"mantle\" | \"linea\" | \"scroll\" | \"filecoin\" | \"taiko\" | \"zksync\" | \"canto\" | null,\n    \"amount\": string | null,\n    \"toAddress\": string | null\n}\n\\`\\`\\`\n`;\n\nexport const swapTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested token swap:\n- Input token symbol or address (the token being sold)\n- Output token symbol or address (the token being bought)\n- Amount to swap\n- Chain to execute on\n\nRespond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined:\n\n\\`\\`\\`json\n{\n    \"inputToken\": string | null,\n    \"outputToken\": string | null,\n    \"amount\": string | null,\n    \"chain\": \"ethereum\" | \"base\" | \"sepolia\" | \"bsc\" | \"arbitrum\" | \"avalanche\" | \"polygon\" | \"optimism\" | \"cronos\" | \"gnosis\" | \"fantom\" | \"klaytn\" | \"celo\" | \"moonbeam\" | \"aurora\" | \"harmonyOne\" | \"moonriver\" | \"arbitrumNova\" | \"mantle\" | \"linea\" | \"scroll\" | \"filecoin\" | \"taiko\" | \"zksync\" | \"canto\" | null,\n    \"slippage\": number | null\n}\n\\`\\`\\`\n`;\n\nexport const deployTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested token deployment:\n- Token Name: The name of the token being deployed\n- Token Symbol: The symbol for the token being deployed\n- Initial Supply: The initial supply of the token (must be a string representing the amount)\n- Chain to deploy on: Must be one of [\"ethereum\", \"bsc\", \"polygon\", \"arbitrum\", \"avalanche\", \"optimism\", \"fantom\", \"gnosis\", \"klaytn\", \"celo\", \"moonbeam\", \"aurora\", \"harmonyOne\", \"moonriver\", \"arbitrumNova\", \"mantle\", \"linea\", \"scroll\", \"filecoin\", \"taiko\", \"zksync\", \"canto\"]\n\nRespond with a JSON markdown block containing only the extracted values:\n\n\\`\\`\\`json\n{\n    \"tokenName\": string,\n    \"tokenSymbol\": string,\n    \"initialSupply\": string,\n    \"decimals\": number,\n    \"chain\": \"ethereum\" | \"bscTestnet\" | \"polygon\" | \"arbitrum\" | \"avalanche\" | \"optimism\" | \"fantom\" | \"gnosis\" | \"klaytn\" | \"celo\" | \"moonbeam\" | \"aurora\" | \"harmonyOne\" | \"moonriver\" | \"arbitrumNova\" | \"mantle\" | \"linea\" | \"scroll\" | \"filecoin\" | \"taiko\" | \"zksync\" | \"canto\"\n}\n\\`\\`\\`\n`;\n\n","import type { IAgentRuntime, Memory, State } from \"@ai16z/eliza\";\nimport {\n    ChainId,\n    createConfig,\n    executeRoute,\n    ExtendedChain,\n    getRoutes,\n} from \"@lifi/sdk\";\nimport { WalletProvider } from \"../providers/wallet\";\nimport { swapTemplate } from \"../templates\";\nimport type { SwapParams, Transaction } from \"../types\";\n\nexport { swapTemplate };\n\nexport class SwapAction {\n    private config;\n\n    constructor(private walletProvider: WalletProvider) {\n        this.config = createConfig({\n            integrator: \"eliza\",\n            chains: Object.values(this.walletProvider.chains).map((config) => ({\n                id: config.id,\n                name: config.name,\n                key: config.name.toLowerCase(),\n                chainType: \"EVM\" as const,\n                nativeToken: {\n                    ...config.nativeCurrency,\n                    chainId: config.id,\n                    address: \"0x0000000000000000000000000000000000000000\",\n                    coinKey: config.nativeCurrency.symbol,\n                    priceUSD: \"0\",\n                    logoURI: \"\",\n                    symbol: config.nativeCurrency.symbol,\n                    decimals: config.nativeCurrency.decimals,\n                    name: config.nativeCurrency.name,\n                },\n                rpcUrls: {\n                    public: { http: [config.rpcUrls.default.http[0]] },\n                },\n                blockExplorerUrls: [config.blockExplorers.default.url],\n                metamask: {\n                    chainId: `0x${config.id.toString(16)}`,\n                    chainName: config.name,\n                    nativeCurrency: config.nativeCurrency,\n                    rpcUrls: [config.rpcUrls.default.http[0]],\n                    blockExplorerUrls: [config.blockExplorers.default.url],\n                },\n                coin: config.nativeCurrency.symbol,\n                mainnet: true,\n                diamondAddress: \"0x0000000000000000000000000000000000000000\",\n            })) as ExtendedChain[],\n        });\n    }\n\n    async swap(params: SwapParams): Promise<Transaction> {\n        const walletClient = this.walletProvider.getWalletClient(params.chain);\n        const [fromAddress] = await walletClient.getAddresses();\n\n        const routes = await getRoutes({\n            fromChainId: this.walletProvider.getChainConfigs(params.chain).id,\n            toChainId: this.walletProvider.getChainConfigs(params.chain).id,\n            fromTokenAddress: params.fromToken,\n            toTokenAddress: params.toToken,\n            fromAmount: params.amount,\n            fromAddress: fromAddress,\n            options: {\n                slippage: params.slippage || 0.5,\n                order: \"RECOMMENDED\",\n            },\n        });\n\n        if (!routes.routes.length) throw new Error(\"No routes found\");\n\n        const execution = await executeRoute(routes.routes[0], this.config);\n        const process = execution.steps[0]?.execution?.process[0];\n\n        if (!process?.status || process.status === \"FAILED\") {\n            throw new Error(\"Transaction failed\");\n        }\n\n        return {\n            hash: process.txHash as `0x${string}`,\n            from: fromAddress,\n            to: routes.routes[0].steps[0].estimate\n                .approvalAddress as `0x${string}`,\n            value: BigInt(params.amount),\n            data: process.data as `0x${string}`,\n            chainId: this.walletProvider.getChainConfigs(params.chain).id,\n        };\n    }\n}\n\nexport const swapAction = {\n    name: \"swap\",\n    description: \"Swap tokens on the same chain\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        options: any,\n        callback?: any\n    ) => {\n        try {\n            const privateKey = runtime.getSetting(\n                \"EVM_PRIVATE_KEY\"\n            ) as `0x${string}`;\n            const walletProvider = new WalletProvider(privateKey);\n            const action = new SwapAction(walletProvider);\n            return await action.swap(options);\n        } catch (error) {\n            console.error(\"Error in swap handler:\", error.message);\n            if (callback) {\n                callback({ text: `Error: ${error.message}` });\n            }\n            // console.error(\"Successfully swaped 0.01 BNB for 1.67887 CAKE Tokens\");\n            return false;\n        }\n    },\n    template: swapTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"EVM_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"user\",\n                content: {\n                    text: \"Swap 1 ETH for USDC on Base\",\n                    action: \"TOKEN_SWAP\",\n                },\n            },\n        ],\n    ],\n    similes: [\"TOKEN_SWAP\", \"EXCHANGE_TOKENS\", \"TRADE_TOKENS\"],\n}; // TODO: add more examples\n","import { ByteArray, formatEther, parseEther, type Hex } from \"viem\";\nimport {\n    composeContext,\n    generateObjectDeprecated,\n    HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@ai16z/eliza\";\n\nimport { initWalletProvider, WalletProvider } from \"../providers/wallet\";\nimport type { Transaction, TransferParams } from \"../types\";\nimport { transferTemplate } from \"../templates\";\n\nexport { transferTemplate };\n\n// Exported for tests\nexport class TransferAction {\n    constructor(private walletProvider: WalletProvider) {}\n\n    async transfer(params: TransferParams): Promise<Transaction> {\n        console.log(\n            `Transferring: ${params.amount} tokens to (${params.toAddress} on ${params.fromChain})`\n        );\n\n        if (!params.data) {\n            params.data = \"0x\";\n        }\n\n        await this.walletProvider.switchChain(params.fromChain);\n\n        const walletClient = this.walletProvider.getWalletClient(\n            params.fromChain\n        );\n\n        try {\n            const hash = await walletClient.sendTransaction({\n                account: walletClient.account,\n                to: params.toAddress,\n                value: parseEther(params.amount),\n                data: params.data as Hex,\n                kzg: {\n                    blobToKzgCommitment: function (blob: ByteArray): ByteArray {\n                        throw new Error(\"Function not implemented.\");\n                    },\n                    computeBlobKzgProof: function (\n                        blob: ByteArray,\n                        commitment: ByteArray\n                    ): ByteArray {\n                        throw new Error(\"Function not implemented.\");\n                    },\n                },\n                chain: undefined,\n            });\n\n            return {\n                hash,\n                from: walletClient.account.address,\n                to: params.toAddress,\n                value: parseEther(params.amount),\n                data: params.data as Hex,\n            };\n        } catch (error) {\n            throw new Error(`Transfer failed: ${error.message}`);\n        }\n    }\n}\n\nconst buildTransferDetails = async (\n    state: State,\n    runtime: IAgentRuntime,\n    wp: WalletProvider\n): Promise<TransferParams> => {\n    const context = composeContext({\n        state,\n        template: transferTemplate,\n    });\n\n    const chains = Object.keys(wp.chains);\n\n    const contextWithChains = context.replace(\n        \"SUPPORTED_CHAINS\",\n        chains.toString()\n    );\n\n    const transferDetails = (await generateObjectDeprecated({\n        runtime,\n        context: contextWithChains,\n        modelClass: ModelClass.SMALL,\n    })) as TransferParams;\n\n    const existingChain = wp.chains[transferDetails.fromChain];\n\n    if (!existingChain) {\n        throw new Error(\n            \"The chain \" +\n                transferDetails.fromChain +\n                \" not configured yet. Add the chain or choose one from configured: \" +\n                chains.toString()\n        );\n    }\n\n    return transferDetails;\n};\n\nexport const transferAction = {\n    name: \"transfer\",\n    description: \"Transfer tokens between addresses on the same chain\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        options: any,\n        callback?: HandlerCallback\n    ) => {\n        console.log(\"Transfer action handler called\");\n        const walletProvider = initWalletProvider(runtime);\n        const action = new TransferAction(walletProvider);\n\n        // Compose transfer context\n        const transferContext = composeContext({\n            state,\n            template: transferTemplate,\n        });\n\n        // Generate transfer content\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: transferContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        const paramOptions: TransferParams = {\n            fromChain: content.fromChain,\n            toAddress: content.toAddress,\n            amount: content.amount,\n            data: content.data,\n        };\n\n        try {\n            const transferResp = await action.transfer(paramOptions);\n            if (callback) {\n                callback({\n                    text: `Successfully transferred ${paramOptions.amount} tokens to ${paramOptions.toAddress}\\nTransaction Hash: ${transferResp.hash}`,\n                    content: {\n                        success: true,\n                        hash: transferResp.hash,\n                        amount: formatEther(transferResp.value),\n                        recipient: transferResp.to,\n                        chain: content.fromChain,\n                    },\n                });\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Error during token transfer:\", error);\n            if (callback) {\n                callback({\n                    text: `Error transferring tokens: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n    template: transferTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"EVM_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"assistant\",\n                content: {\n                    text: \"I'll help you transfer 1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                    action: \"SEND_TOKENS\",\n                },\n            },\n            {\n                user: \"user\",\n                content: {\n                    text: \"Transfer 1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                    action: \"SEND_TOKENS\",\n                },\n            },\n        ],\n    ],\n    similes: [\"SEND_TOKENS\", \"TOKEN_TRANSFER\", \"MOVE_TOKENS\"],\n};\n","import type { Token } from \"@lifi/types\";\nimport type {\n    Account,\n    Address,\n    ByteArray,\n    Chain,\n    Hash,\n    HttpTransport,\n    PublicClient,\n    WalletClient,\n} from \"viem\";\nimport * as viemChains from \"viem/chains\";\n\nconst SupportedChainList = Object.keys(viemChains) as Array<keyof typeof viemChains>;\nexport type SupportedChain = (typeof SupportedChainList)[number];\n\n// Transaction types\nexport interface Transaction {\n    hash: Hash;\n    from: Address;\n    to: Address;\n    value: bigint;\n    data?: `0x${string}`;\n    chainId?: number;\n}\n\n// Token types\nexport interface TokenWithBalance {\n    token: Token;\n    balance: bigint;\n    formattedBalance: string;\n    priceUSD: string;\n    valueUSD: string;\n}\n\nexport interface WalletBalance {\n    chain: SupportedChain;\n    address: Address;\n    totalValueUSD: string;\n    tokens: TokenWithBalance[];\n}\n\n// Chain configuration\nexport interface ChainMetadata {\n    chainId: number;\n    name: string;\n    chain: Chain;\n    rpcUrl: string;\n    nativeCurrency: {\n        name: string;\n        symbol: string;\n        decimals: number;\n    };\n    blockExplorerUrl: string;\n}\n\nexport interface ChainConfig {\n    chain: Chain;\n    publicClient: PublicClient<HttpTransport, Chain, Account | undefined>;\n    walletClient?: WalletClient;\n}\n\n// Action parameters\nexport interface TransferParams {\n    fromChain: SupportedChain;\n    toAddress: Address;\n    amount: string;\n    data?: `0x${string}`;\n}\n\nexport interface SwapParams {\n    chain: SupportedChain;\n    fromToken: Address;\n    toToken: Address;\n    amount: string;\n    slippage?: number;\n}\n\nexport interface BridgeParams {\n    fromChain: SupportedChain;\n    toChain: SupportedChain;\n    fromToken: Address;\n    toToken: Address;\n    amount: string;\n    toAddress?: Address;\n}\n\n// interface Kzg {\n//     blobToKzgCommitment: (blob: ByteArray) => ByteArray;\n//     computeBlobKzgProof: (blob: ByteArray, commitment: ByteArray) => ByteArray;\n// }\n\nexport interface DeployTokenParams {\n    abi: any; // ABI of the token contract (could be a type for ABI)\n    account: Address; // The wallet address deploying the contract\n    bytecode: string; // Bytecode of the ERC20 token contract\n    args: [string, string, number, string]; // Arguments for the constructor: name, symbol, decimals, totalSupply\n    // kzg: Kzg; // KZG-related methods (used for zero-knowledge proof)\n    chain: SupportedChain | undefined; // Chain to deploy on, e.g., \"ethereum\", \"bsc\", etc.\n}\n\n// Plugin configuration\nexport interface EvmPluginConfig {\n    rpcUrl?: {\n        ethereum?: string;\n        base?: string;\n        sepolia?: string;\n        bsc?: string;\n        bscTestnet?: string;\n        arbitrum?: string;\n        avalanche?: string;\n        polygon?: string;\n        optimism?: string;\n        cronos?: string;\n        gnosis?: string;\n        fantom?: string;\n        klaytn?: string;\n        celo?: string;\n        moonbeam?: string;\n        aurora?: string;\n        harmonyOne?: string;\n        moonriver?: string;\n        arbitrumNova?: string;\n        mantle?: string;\n        linea?: string;\n        scroll?: string;\n        filecoin?: string;\n        taiko?: string;\n        zksync?: string;\n        canto?: string;\n    };\n    secrets?: {\n        EVM_PRIVATE_KEY: string;\n    };\n    testMode?: boolean;\n    multicall?: {\n        batchSize?: number;\n        wait?: number;\n    };\n}\n\n// LiFi types\nexport type LiFiStatus = {\n    status: \"PENDING\" | \"DONE\" | \"FAILED\";\n    substatus?: string;\n    error?: Error;\n};\n\nexport type LiFiRoute = {\n    transactionHash: Hash;\n    transactionData: `0x${string}`;\n    toAddress: Address;\n    status: LiFiStatus;\n};\n\n// Provider types\nexport interface TokenData extends Token {\n    symbol: string;\n    decimals: number;\n    address: Address;\n    name: string;\n    logoURI?: string;\n    chainId: number;\n}\n\nexport interface TokenPriceResponse {\n    priceUSD: string;\n    token: TokenData;\n}\n\nexport interface TokenListResponse {\n    tokens: TokenData[];\n}\n\nexport interface ProviderError extends Error {\n    code?: number;\n    data?: unknown;\n}\n","export const ERC20ABI = [\n    {\n        constant: true,\n        inputs: [],\n        name: \"name\",\n        outputs: [{ name: \"\", type: \"string\" }],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            { name: \"_spender\", type: \"address\" },\n            { name: \"_value\", type: \"uint256\" },\n        ],\n        name: \"approve\",\n        outputs: [{ name: \"\", type: \"bool\" }],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"totalSupply\",\n        outputs: [{ name: \"\", type: \"uint256\" }],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            { name: \"_from\", type: \"address\" },\n            { name: \"_to\", type: \"address\" },\n            { name: \"_value\", type: \"uint256\" },\n        ],\n        name: \"transferFrom\",\n        outputs: [{ name: \"\", type: \"bool\" }],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"decimals\",\n        outputs: [{ name: \"\", type: \"uint8\" }],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [{ name: \"_owner\", type: \"address\" }],\n        name: \"balanceOf\",\n        outputs: [{ name: \"balance\", type: \"uint256\" }],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [],\n        name: \"symbol\",\n        outputs: [{ name: \"\", type: \"string\" }],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    {\n        constant: false,\n        inputs: [\n            { name: \"_to\", type: \"address\" },\n            { name: \"_value\", type: \"uint256\" },\n        ],\n        name: \"transfer\",\n        outputs: [{ name: \"\", type: \"bool\" }],\n        payable: false,\n        stateMutability: \"nonpayable\",\n        type: \"function\",\n    },\n    {\n        constant: true,\n        inputs: [\n            { name: \"_owner\", type: \"address\" },\n            { name: \"_spender\", type: \"address\" },\n        ],\n        name: \"allowance\",\n        outputs: [{ name: \"\", type: \"uint256\" }],\n        payable: false,\n        stateMutability: \"view\",\n        type: \"function\",\n    },\n    { payable: true, stateMutability: \"payable\", type: \"fallback\" },\n    {\n        anonymous: false,\n        inputs: [\n            { indexed: true, name: \"owner\", type: \"address\" },\n            { indexed: true, name: \"spender\", type: \"address\" },\n            { indexed: false, name: \"value\", type: \"uint256\" },\n        ],\n        name: \"Approval\",\n        type: \"event\",\n    },\n    {\n        anonymous: false,\n        inputs: [\n            { indexed: true, name: \"from\", type: \"address\" },\n            { indexed: true, name: \"to\", type: \"address\" },\n            { indexed: false, name: \"value\", type: \"uint256\" },\n        ],\n        name: \"Transfer\",\n        type: \"event\",\n    },\n] as const;\n\n\nexport const ERC20_BYTECODE = \"0x00050000000000020000008004000039000000400040043f0000006003100270000001020330019700000001002001900000002c0000c13d000000040030008c000003500000413d000000000201043b000000e002200270000001130020009c000000860000a13d000001140020009c0000009c0000a13d000001150020009c000000e90000613d000001160020009c000001020000613d000001170020009c000003500000c13d000000440030008c000003500000413d0000000002000416000000000002004b000003500000c13d0000000402100370000000000202043b0000011f0020009c000003500000213d0000002401100370000000000101043b0000011f0010009c000003500000213d000000000020043f000500000001001d0000000101000039000000200010043f0000004001000039040403e90000040f0000000502000029000000000020043f000000200010043f000000ab0000013d0000000002000416000000000002004b000003500000c13d0000001f0230003900000103022001970000008002200039000000400020043f0000001f0530018f000001040630019800000080026000390000003c0000613d000000000701034f000000007807043c0000000004840436000000000024004b000000380000c13d000000000005004b000000490000613d000000000161034f0000000304500210000000000502043300000000054501cf000000000545022f000000000101043b0000010004400089000000000141022f00000000014101cf000000000151019f0000000000120435000000600030008c000003500000413d000000800500043d000001050050009c000003500000213d0000001f01500039000000000031004b000000000200001900000106020080410000010601100197000000000001004b00000000040000190000010604004041000001060010009c000000000402c019000000000004004b000003500000c13d00000080015000390000000004010433000001050040009c000001f80000213d0000001f0140003900000128011001970000003f011000390000012801100197000000400d00043d00000000011d00190000000000d1004b00000000020000390000000102004039000001050010009c000001f80000213d0000000100200190000001f80000c13d0000008002300039000000400010043f00000000014d0436000000a0055000390000000006540019000000000026004b000003500000213d00000128074001970000001f0640018f000000000015004b000001440000813d000000000007004b000000820000613d00000000096500190000000008610019000000200880008a000000200990008a000000000a780019000000000b790019000000000b0b04330000000000ba0435000000200770008c0000007c0000c13d000000000006004b0000015a0000613d0000000008010019000001500000013d0000011a0020009c000000ae0000213d0000011d0020009c000001170000613d0000011e0020009c000003500000c13d000000440030008c000003500000413d0000000002000416000000000002004b000003500000c13d0000000402100370000000000302043b0000011f0030009c000003500000213d0000002401100370000000000201043b0000000001000411000000000001004b000001960000c13d0000012701000041000001990000013d000001180020009c0000012c0000613d000001190020009c000003500000c13d000000240030008c000003500000413d0000000002000416000000000002004b000003500000c13d0000000401100370000000000101043b0000011f0010009c000003500000213d000000000010043f000000200000043f0000004001000039040403e90000040f000001370000013d0000011b0020009c000001330000613d0000011c0020009c000003500000c13d000000640030008c000003500000413d0000000002000416000000000002004b000003500000c13d0000000402100370000000000302043b0000011f0030009c000003500000213d0000002402100370000000000202043b000500000002001d0000011f0020009c000003500000213d0000004401100370000000000101043b000300000001001d000000000030043f0000000101000039000000200010043f0000000001000414000001020010009c0000010201008041000000c0011002100000010d011001c70000801002000039000400000003001d040403ff0000040f0000000100200190000003500000613d000000000101043b00000000020004110000011f02200197000200000002001d000000000020043f000000200010043f0000000001000414000001020010009c0000010201008041000000c0011002100000010d011001c70000801002000039040403ff0000040f00000004030000290000000100200190000003500000613d000000000101043b000000000101041a000001290010009c0000020d0000c13d0000000001030019000000050200002900000003030000290404038d0000040f000001e30000013d0000000001000416000000000001004b000003500000c13d0000000403000039000000000203041a000000010520019000000001012002700000007f0410018f00000000010460190000001f0010008c00000000060000390000000106002039000000000662013f0000000100600190000001260000c13d000000800010043f000000000005004b0000019d0000c13d0000012a01200197000000a00010043f000000000004004b000000c001000039000000a001006039000000610110008a000001f50000013d000000440030008c000003500000413d0000000002000416000000000002004b000003500000c13d0000000402100370000000000202043b0000011f0020009c000003500000213d0000002401100370000000000301043b00000000010004110404038d0000040f0000000101000039000000400200043d0000000000120435000001020020009c0000010202008041000000400120021000000121011001c7000004050001042e0000000001000416000000000001004b000003500000c13d0000000303000039000000000203041a000000010520019000000001012002700000007f0410018f00000000010460190000001f0010008c00000000060000390000000106002039000000000662013f00000001006001900000013b0000613d0000011001000041000000000010043f0000002201000039000000040010043f000001110100004100000406000104300000000001000416000000000001004b000003500000c13d0000001201000039000000800010043f0000012001000041000004050001042e0000000001000416000000000001004b000003500000c13d0000000201000039000000000101041a000000800010043f0000012001000041000004050001042e000000800010043f000000000005004b000001ad0000c13d0000012a01200197000000a00010043f000000000004004b00000020020000390000000002006039000001f40000013d0000000008710019000000000007004b0000014d0000613d0000000009050019000000000a010019000000009b090434000000000aba043600000000008a004b000001490000c13d000000000006004b0000015a0000613d00000000057500190000000306600210000000000708043300000000076701cf000000000767022f00000000050504330000010006600089000000000565022f00000000056501cf000000000575019f000000000058043500000000044100190000000000040435000000a00400043d000001050040009c000003500000213d0000001f05400039000000000035004b000000000300001900000106030080410000010605500197000000000005004b00000000060000190000010606004041000001060050009c000000000603c019000000000006004b000003500000c13d00000080034000390000000003030433000001050030009c000001f80000213d0000001f0530003900000128055001970000003f055000390000012805500197000000400a00043d00000000055a00190000000000a5004b00000000060000390000000106004039000001050050009c000001f80000213d0000000100600190000001f80000c13d000000400050043f000000000b3a0436000000a0044000390000000005430019000000000025004b000003500000213d00000128053001970000001f0230018f0000000000b4004b000002180000813d000000000005004b000001920000613d000000000724001900000000062b0019000000200660008a000000200770008a0000000008560019000000000957001900000000090904330000000000980435000000200550008c0000018c0000c13d000000000002004b0000022e0000613d00000000060b0019000002240000013d000000000003004b000001b20000c13d0000012601000041000000000010043f000000040000043f00000111010000410000040600010430000000000030043f000000020020008c000001b00000413d0000010b0200004100000000040000190000000003040019000000000402041a000000a005300039000000000045043500000001022000390000002004300039000000000014004b000001a20000413d000000c001300039000000610110008a000001f50000013d000000000030043f000000020020008c000001eb0000813d0000002001000039000001fe0000013d000400000002001d000000000010043f0000000101000039000000200010043f0000000001000414000001020010009c0000010201008041000000c0011002100000010d011001c70000801002000039000500000003001d040403ff0000040f00000005030000290000000100200190000003500000613d000000000101043b000000000030043f000000200010043f0000000001000414000001020010009c0000010201008041000000c0011002100000010d011001c70000801002000039040403ff0000040f00000005060000290000000100200190000003500000613d000000000101043b0000000402000029000000000021041b000000400100043d0000000000210435000001020010009c000001020100804100000040011002100000000002000414000001020020009c0000010202008041000000c002200210000000000112019f00000109011001c70000800d02000039000000030300003900000125040000410000000005000411040403fa0000040f0000000100200190000003500000613d000000400100043d00000001020000390000000000210435000001020010009c0000010201008041000000400110021000000121011001c7000004050001042e00000108030000410000000002000019000000000403041a000000a005200039000000000045043500000001033000390000002002200039000000000012004b000001ed0000413d0000003f012000390000012801100197000001220010009c000001fe0000a13d0000011001000041000000000010043f0000004101000039000000040010043f000001110100004100000406000104300000008001100039000500000001001d000000400010043f0000008002000039040403580000040f00000005020000290000000001210049000001020010009c00000102010080410000006001100210000001020020009c00000102020080410000004002200210000000000121019f000004050001042e0000000304000029000000000241004b000002660000813d0000012302000041000000000020043f0000000002000411000000040020043f000000240010043f000000440040043f0000012401000041000004060001043000000000065b0019000000000005004b000002210000613d000000000704001900000000080b001900000000790704340000000008980436000000000068004b0000021d0000c13d000000000002004b0000022e0000613d00000000045400190000000302200210000000000506043300000000052501cf000000000525022f00000000040404330000010002200089000000000424022f00000000022401cf000000000252019f000000000026043500000000023b0019000000000002043500000000060d0433000001050060009c000001f80000213d0000000305000039000000000205041a000000010320019000000001022002700000007f0220618f0000001f0020008c00000000040000390000000104002039000000000043004b000001260000c13d00010000000b001d00030000000d001d00040000000a001d000000200020008c000002510000413d000000000050043f0000001f036000390000000503300270000001070330009a000000200060008c00000108030040410000001f022000390000000502200270000001070220009a000000000023004b000002510000813d000000000003041b0000000103300039000000000023004b0000024d0000413d000000c00200043d000200000002001d000500000006001d0000001f0060008c0000028a0000a13d000000000050043f0000000001000414000001020010009c0000010201008041000000c00110021000000109011001c70000801002000039040403ff0000040f0000000100200190000000200200008a000003500000613d0000000502200180000000000101043b000002960000c13d0000002003000039000002a30000013d000000000003004b0000009a0000613d000100000002001d0000000001000411000000000001004b000001980000613d000000000030043f0000000101000039000000200010043f0000000001000414000001020010009c0000010201008041000000c0011002100000010d011001c70000801002000039040403ff0000040f0000000100200190000003500000613d000000000101043b0000000202000029000000000020043f000000200010043f0000000001000414000001020010009c0000010201008041000000c0011002100000010d011001c70000801002000039040403ff0000040f00000004030000290000000100200190000003500000613d000000000101043b0000000102000029000000000021041b000000e40000013d000000050000006b00000000020000190000028e0000613d000000000201043300000005040000290000000301400210000001290110027f0000012901100167000000000112016f0000000102400210000000000121019f000002b10000013d000000010320008a0000000503300270000000000431001900000020030000390000000104400039000000030600002900000000056300190000000005050433000000000051041b00000020033000390000000101100039000000000041004b0000029c0000c13d000000050020006c000002ae0000813d00000005020000290000000302200210000000f80220018f000001290220027f000001290220016700000003033000290000000003030433000000000223016f000000000021041b0000000501000029000000010110021000000001011001bf0000000302000039000000000012041b00000004010000290000000001010433000500000001001d000001050010009c000001f80000213d0000000401000039000000000201041a000000010020019000000001012002700000007f0110618f0000001f0010008c00000000030000390000000103002039000000000232013f0000000100200190000001260000c13d000000200010008c000002d60000413d0000000402000039000000000020043f00000005030000290000001f0230003900000005022002700000010a0220009a000000200030008c0000010b020040410000001f0110003900000005011002700000010a0110009a000000000012004b000002d60000813d000000000002041b0000000102200039000000000012004b000002d20000413d00000005010000290000001f0010008c000002ea0000a13d0000000401000039000000000010043f0000000001000414000001020010009c0000010201008041000000c00110021000000109011001c70000801002000039040403ff0000040f0000000100200190000000200200008a000003500000613d0000000502200180000000000101043b000002f70000c13d0000002003000039000003040000013d000000050000006b0000000001000019000002ef0000613d0000000101000029000000000101043300000005040000290000000302400210000001290220027f0000012902200167000000000121016f0000000102400210000000000121019f000003120000013d000000010320008a0000000503300270000000000431001900000020030000390000000104400039000000040600002900000000056300190000000005050433000000000051041b00000020033000390000000101100039000000000041004b000002fd0000c13d000000050020006c0000030f0000813d00000005020000290000000302200210000000f80220018f000001290220027f000001290220016700000004033000290000000003030433000000000223016f000000000021041b0000000501000029000000010110021000000001011001bf0000000402000039000000000012041b00000002010000290005010c001000d5000000000001004b0000031c0000613d000000050200002900000002012000fa0000010c0010009c000003520000c13d0000000001000411000000000001004b000003210000c13d0000011201000041000001990000013d0000000201000039000000000201041a000000050020002a000003520000413d0000000502200029000000000021041b0000000001000411000000000010043f000000200000043f0000000001000414000001020010009c0000010201008041000000c0011002100000010d011001c70000801002000039040403ff0000040f0000000100200190000003500000613d000000000101043b000000000201041a00000005030000290000000002320019000000000021041b000000400100043d0000000000310435000001020010009c000001020100804100000040011002100000000002000414000001020020009c0000010202008041000000c002200210000000000112019f00000109011001c70000800d0200003900000003030000390000010e0400004100000000050000190000000006000411040403fa0000040f0000000100200190000003500000613d0000002001000039000001000010044300000120000004430000010f01000041000004050001042e000000000100001900000406000104300000011001000041000000000010043f0000001101000039000000040010043f00000111010000410000040600010430000000200300003900000000033104360000000042020434000000000023043500000128062001970000001f0520018f0000004001100039000000000014004b000003710000813d000000000006004b0000036d0000613d00000000085400190000000007510019000000200770008a000000200880008a0000000009670019000000000a680019000000000a0a04330000000000a90435000000200660008c000003670000c13d000000000005004b000003870000613d00000000070100190000037d0000013d0000000007610019000000000006004b0000037a0000613d00000000080400190000000009010019000000008a0804340000000009a90436000000000079004b000003760000c13d000000000005004b000003870000613d00000000046400190000000305500210000000000607043300000000065601cf000000000656022f00000000040404330000010005500089000000000454022f00000000045401cf000000000464019f0000000000470435000000000421001900000000000404350000001f0220003900000128022001970000000001210019000000000001042d0004000000000002000400000003001d0000011f01100198000003d90000613d0002011f0020019c000003db0000613d000300000001001d000000000010043f000000200000043f0000000001000414000001020010009c0000010201008041000000c0011002100000010d011001c70000801002000039040403ff0000040f0000000100200190000003d70000613d000000000101043b000000000101041a0001000400100074000003e00000413d0000000301000029000000000010043f000000200000043f0000000001000414000001020010009c0000010201008041000000c0011002100000010d011001c70000801002000039040403ff0000040f0000000100200190000003d70000613d000000000101043b0000000102000029000000000021041b0000000201000029000000000010043f000000200000043f0000000001000414000001020010009c0000010201008041000000c0011002100000010d011001c70000801002000039040403ff0000040f0000000100200190000003d70000613d000000000101043b000000000201041a00000004030000290000000002320019000000000021041b000000400100043d0000000000310435000001020010009c000001020100804100000040011002100000000002000414000001020020009c0000010202008041000000c002200210000000000112019f00000109011001c70000800d0200003900000003030000390000010e0400004100000003050000290000000206000029040403fa0000040f0000000100200190000003d70000613d000000000001042d000000000100001900000406000104300000012c01000041000003dc0000013d0000011201000041000000000010043f000000040000043f000001110100004100000406000104300000012b02000041000000000020043f0000000302000029000000040020043f000000240010043f0000000401000029000000440010043f00000124010000410000040600010430000001020010009c000001020100804100000060011002100000000002000414000001020020009c0000010202008041000000c002200210000000000112019f0000012d011001c70000801002000039040403ff0000040f0000000100200190000003f80000613d000000000101043b000000000001042d00000000010000190000040600010430000003fd002104210000000102000039000000000001042d0000000002000019000000000001042d00000402002104230000000102000039000000000001042d0000000002000019000000000001042d0000040400000432000004050001042e0000040600010430000000000000000000000000000000000000000000000000000000000000000000000000ffffffff00000000000000000000000000000000000000000000000000000001ffffffe000000000000000000000000000000000000000000000000000000000ffffffe0000000000000000000000000000000000000000000000000ffffffffffffffff80000000000000000000000000000000000000000000000000000000000000003da8a5f161a6c3ff06a60736d0ed24d7963cc6a5c4fafd2fa1dae9bb908e07a5c2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b020000000000000000000000000000000000002000000000000000000000000075ca53043ea007e5c65182cbb028f60d7179ff4b55739a3949b401801c942e658a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0000000000000000000000000000000000000000000000000de0b6b3a76400000200000000000000000000000000000000000040000000000000000000000000ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef00000002000000000000000000000000000000400000010000000000000000004e487b71000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024000000000000000000000000ec442f050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000313ce5660000000000000000000000000000000000000000000000000000000095d89b400000000000000000000000000000000000000000000000000000000095d89b4100000000000000000000000000000000000000000000000000000000a9059cbb00000000000000000000000000000000000000000000000000000000dd62ed3e00000000000000000000000000000000000000000000000000000000313ce5670000000000000000000000000000000000000000000000000000000070a082310000000000000000000000000000000000000000000000000000000018160ddc0000000000000000000000000000000000000000000000000000000018160ddd0000000000000000000000000000000000000000000000000000000023b872dd0000000000000000000000000000000000000000000000000000000006fdde0300000000000000000000000000000000000000000000000000000000095ea7b3000000000000000000000000ffffffffffffffffffffffffffffffffffffffff00000000000000000000000000000000000000200000008000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffff7ffb8f41b20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640000000000000000000000008c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92594280d6200000000000000000000000000000000000000000000000000000000e602df0500000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00e450d38c0000000000000000000000000000000000000000000000000000000096c6fd1e000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000449f9616cd27bc417d724509f30ba0456bf7aaee39c3daff5e171e3cf3c24a6c\";\n\n\nexport default ERC20ABI;\n","import {\n    composeContext,\n    generateObjectDeprecated,\n    HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@ai16z/eliza\";\n\nimport { initWalletProvider, WalletProvider } from \"../providers/wallet\";\nimport type { ChainConfig } from \"../types\";\nimport { ERC20ABI, ERC20_BYTECODE } from \"../abis/erc20\";\n\nexport class DeployTokenAction {\n    constructor(private walletProvider: WalletProvider) {}\n\n    async deploy(params: {\n        name: string;\n        symbol: string;\n        initialSupply: number;\n    }): Promise<ChainConfig> {\n        const { name, symbol, initialSupply } = params;\n        const decimals = 18n;\n        const totalSupply = BigInt(initialSupply) * 10n ** decimals;\n\n        console.log(\n            `Deploying token: Name - ${name}, Symbol - ${symbol}, Initial Supply - ${initialSupply} (${totalSupply} units)`\n        );\n\n        const walletClient = this.walletProvider.getWalletClient(\"bscTestnet\");\n\n        try {\n            const hash = await walletClient.deployContract({\n                abi: ERC20ABI,\n                bytecode: ERC20_BYTECODE,\n                args: [name, symbol, decimals, totalSupply],\n                account: walletClient.account,\n                chain: undefined,\n            });\n\n            const receipt = await this.walletProvider\n                .getPublicClient(\"bscTestnet\")\n                .waitForTransactionReceipt({ hash });\n\n            console.log(`Token deployed successfully at ${receipt.contractAddress}`);\n\n            return {\n                chain: walletClient.chain,\n                walletClient,\n                publicClient: this.walletProvider.getPublicClient(\"bscTestnet\"),\n            };\n        } catch (error) {\n            throw new Error(`Token deployment failed: ${error.message}`);\n        }\n    }\n}\n\n// const buildDeployDetails = async (\n//     state: State,\n//     runtime: IAgentRuntime\n// ): Promise<{ name: string; symbol: string; initialSupply: number }> => {\n//     const context = composeContext({\n//         state,\n//         template: \"Create an ERC-20 token with name: NAME, symbol: SYMBOL, and supply: SUPPLY\",\n//     });\n\n//     const deployDetails = (await generateObjectDeprecated({\n//         runtime,\n//         context,\n//         modelClass: ModelClass.SMALL,\n//     })) as { name: string; symbol: string; initialSupply: number };\n\n//     if (!deployDetails.name || !deployDetails.symbol || !deployDetails.initialSupply) {\n//         throw new Error(\"Invalid token details provided.\");\n//     }\n\n//     return deployDetails;\n// };\n\nexport const deployTokenAction = {\n    name: \"deploy_token\",\n    description: \"Deploy a new ERC-20 token on BNB Testnet.\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        options: any,\n        callback?: HandlerCallback\n    ) => {\n        console.log(\"Deploy token action handler called\");\n        const walletProvider = initWalletProvider(runtime);\n        const action = new DeployTokenAction(walletProvider);\n\n        // const deployParams = await buildDeployDetails(state, runtime);\n\n        try {\n            const deployResp = await action.deploy(deployParams);\n\n            if (callback) {\n                callback({\n                    text: `Token ${deployParams.name} (${deployParams.symbol}) deployed successfully!\\nContract Address: ${deployResp.publicClient}`,\n                    content: {\n                        success: true,\n                        name: deployParams.name,\n                        symbol: deployParams.symbol,\n                        initialSupply: deployParams.initialSupply,\n                        contractAddress: deployResp.publicClient,\n                    },\n                });\n            }\n            return true;\n        } catch (error) {\n            console.error(\"Error during token deployment:\", error);\n            if (callback) {\n                callback({\n                    text: `Error deploying token: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n    template: \"Deploy a new token with specific name, symbol, and supply.\",\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"EVM_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"assistant\",\n                content: {\n                    text: \"Deploy a new token named Glitch with symbol GLH and supply 1,000,000.\",\n                    action: \"DEPLOY_TOKEN\",\n                },\n            },\n            {\n                user: \"user\",\n                content: {\n                    text: \"Token Glitch (GLH) deployed successfully at address: 0x123456789abcdef\",\n                    action: \"DEPLOY_TOKEN\",\n                },\n            },\n        ],\n    ],\n    similes: [\"CREATE_TOKEN\", \"DEPLOY_NEW_TOKEN\", \"TOKEN_CREATION\"],\n};\n","export * from \"./actions/bridge\";\nexport * from \"./actions/swap\";\nexport * from \"./actions/transfer\";\nexport * from \"./providers/wallet\";\nexport * from \"./types\";\n\nimport type { Plugin } from \"@ai16z/eliza\";\nimport { bridgeAction } from \"./actions/bridge\";\nimport { swapAction } from \"./actions/swap\";\nimport { transferAction } from \"./actions/transfer\";\nimport { evmWalletProvider } from \"./providers/wallet\";\nimport { deployTokenAction } from \"./actions/deploytoken\";\n\nexport const evmPlugin: Plugin = {\n    name: \"evm\",\n    description: \"EVM blockchain integration plugin\",\n    providers: [evmWalletProvider],\n    evaluators: [],\n    services: [],\n    actions: [transferAction, bridgeAction, swapAction, deployTokenAction],\n};\n\nexport default evmPlugin;\n"],"mappings":"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","names":["createConfig","executeRoute","getRoutes","createConfig","getRoutes","executeRoute","viemChains"]}