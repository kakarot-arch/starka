{"version":3,"sources":["../../../node_modules/deepmerge/dist/cjs.js","../src/services/browser.ts","../src/services/image.ts","../src/services/llama.ts","../src/services/pdf.ts","../src/services/speech.ts","../src/services/audioUtils.ts","../src/environment.ts","../src/services/transcription.ts","../../../node_modules/@deepgram/sdk/src/lib/errors.ts","../../../node_modules/@deepgram/sdk/src/packages/AbstractClient.ts","../../../node_modules/@deepgram/sdk/src/lib/helpers.ts","../../../node_modules/@deepgram/sdk/src/lib/version.ts","../../../node_modules/@deepgram/sdk/src/lib/constants.ts","../../../node_modules/@deepgram/sdk/src/packages/AbstractLiveClient.ts","../../../node_modules/@deepgram/sdk/src/lib/fetch.ts","../../../node_modules/@deepgram/sdk/src/packages/AbstractRestClient.ts","../../../node_modules/@deepgram/sdk/src/lib/enums/LiveTranscriptionEvents.ts","../../../node_modules/@deepgram/sdk/src/lib/enums/LiveTTSEvents.ts","../../../node_modules/@deepgram/sdk/src/packages/ListenLiveClient.ts","../../../node_modules/@deepgram/sdk/src/packages/ListenRestClient.ts","../../../node_modules/@deepgram/sdk/src/packages/ListenClient.ts","../../../node_modules/@deepgram/sdk/src/packages/ManageRestClient.ts","../../../node_modules/@deepgram/sdk/src/packages/ModelsRestClient.ts","../../../node_modules/@deepgram/sdk/src/packages/ReadRestClient.ts","../../../node_modules/@deepgram/sdk/src/packages/SelfHostedRestClient.ts","../../../node_modules/@deepgram/sdk/src/packages/SpeakLiveClient.ts","../../../node_modules/@deepgram/sdk/src/packages/SpeakRestClient.ts","../../../node_modules/@deepgram/sdk/src/packages/SpeakClient.ts","../../../node_modules/@deepgram/sdk/src/DeepgramClient.ts","../../../node_modules/@deepgram/sdk/src/index.ts","../src/services/video.ts","../src/services/awsS3.ts","../src/index.ts"],"sourcesContent":["'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction getMergeFunction(key, options) {\n\tif (!options.customMerge) {\n\t\treturn deepmerge\n\t}\n\tvar customMerge = options.customMerge(key);\n\treturn typeof customMerge === 'function' ? customMerge : deepmerge\n}\n\nfunction getEnumerableOwnPropertySymbols(target) {\n\treturn Object.getOwnPropertySymbols\n\t\t? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n\t\t\treturn Object.propertyIsEnumerable.call(target, symbol)\n\t\t})\n\t\t: []\n}\n\nfunction getKeys(target) {\n\treturn Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))\n}\n\nfunction propertyIsOnObject(object, property) {\n\ttry {\n\t\treturn property in object\n\t} catch(_) {\n\t\treturn false\n\t}\n}\n\n// Protects from prototype poisoning and unexpected merging up the prototype chain.\nfunction propertyIsUnsafe(target, key) {\n\treturn propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,\n\t\t&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,\n\t\t\t&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tgetKeys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tgetKeys(source).forEach(function(key) {\n\t\tif (propertyIsUnsafe(target, key)) {\n\t\t\treturn\n\t\t}\n\n\t\tif (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n\t\t\tdestination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\t// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()\n\t// implementations can use it. The caller may not replace it.\n\toptions.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nmodule.exports = deepmerge_1;\n","import { generateText, IBrowserService, trimTokens } from \"@ai16z/eliza\";\nimport { parseJSONObjectFromText } from \"@ai16z/eliza\";\nimport { Service } from \"@ai16z/eliza\";\nimport { settings } from \"@ai16z/eliza\";\nimport { IAgentRuntime, ModelClass, ServiceType } from \"@ai16z/eliza\";\nimport { stringToUuid } from \"@ai16z/eliza\";\nimport { PlaywrightBlocker } from \"@cliqz/adblocker-playwright\";\nimport CaptchaSolver from \"capsolver-npm\";\nimport { Browser, BrowserContext, chromium, Page } from \"playwright\";\n\nasync function generateSummary(\n    runtime: IAgentRuntime,\n    text: string\n): Promise<{ title: string; description: string }> {\n    // make sure text is under 128k characters\n    text = trimTokens(text, 100000, \"gpt-4o-mini\"); // TODO: clean this up\n\n    const prompt = `Please generate a concise summary for the following text:\n  \n  Text: \"\"\"\n  ${text}\n  \"\"\"\n  \n  Respond with a JSON object in the following format:\n  \\`\\`\\`json\n  {\n    \"title\": \"Generated Title\",\n    \"summary\": \"Generated summary and/or description of the text\"\n  }\n  \\`\\`\\``;\n\n    const response = await generateText({\n        runtime,\n        context: prompt,\n        modelClass: ModelClass.SMALL,\n    });\n\n    const parsedResponse = parseJSONObjectFromText(response);\n\n    if (parsedResponse) {\n        return {\n            title: parsedResponse.title,\n            description: parsedResponse.summary,\n        };\n    }\n\n    return {\n        title: \"\",\n        description: \"\",\n    };\n}\n\ntype PageContent = {\n    title: string;\n    description: string;\n    bodyContent: string;\n};\n\nexport class BrowserService extends Service implements IBrowserService {\n    private browser: Browser | undefined;\n    private context: BrowserContext | undefined;\n    private blocker: PlaywrightBlocker | undefined;\n    private captchaSolver: CaptchaSolver;\n    private cacheKey = \"content/browser\";\n\n    static serviceType: ServiceType = ServiceType.BROWSER;\n\n    static register(runtime: IAgentRuntime): IAgentRuntime {\n        // since we are lazy loading, do nothing\n        return runtime;\n    }\n\n    getInstance(): IBrowserService {\n        return BrowserService.getInstance();\n    }\n\n    constructor() {\n        super();\n        this.browser = undefined;\n        this.context = undefined;\n        this.blocker = undefined;\n        this.captchaSolver = new CaptchaSolver(\n            settings.CAPSOLVER_API_KEY || \"\"\n        );\n    }\n\n    async initialize() {}\n\n    async initializeBrowser() {\n        if (!this.browser) {\n            this.browser = await chromium.launch({\n                headless: true,\n                args: [\n                    \"--disable-dev-shm-usage\", // Uses /tmp instead of /dev/shm. Prevents memory issues on low-memory systems\n                    \"--block-new-web-contents\", // Prevents creation of new windows/tabs\n                ],\n            });\n\n            const platform = process.platform;\n            let userAgent = \"\";\n\n            // Change the user agent to match the platform to reduce bot detection\n            switch (platform) {\n                case \"darwin\":\n                    userAgent =\n                        \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\";\n                    break;\n                case \"win32\":\n                    userAgent =\n                        \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\";\n                    break;\n                case \"linux\":\n                    userAgent =\n                        \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\";\n                    break;\n                default:\n                    userAgent =\n                        \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\";\n            }\n\n            this.context = await this.browser.newContext({\n                userAgent,\n                acceptDownloads: false,\n            });\n\n            this.blocker =\n                await PlaywrightBlocker.fromPrebuiltAdsAndTracking(fetch);\n        }\n    }\n\n    async closeBrowser() {\n        if (this.context) {\n            await this.context.close();\n            this.context = undefined;\n        }\n        if (this.browser) {\n            await this.browser.close();\n            this.browser = undefined;\n        }\n    }\n\n    async getPageContent(\n        url: string,\n        runtime: IAgentRuntime\n    ): Promise<PageContent> {\n        await this.initializeBrowser();\n        return await this.fetchPageContent(url, runtime);\n    }\n\n    private getCacheKey(url: string): string {\n        return stringToUuid(url);\n    }\n\n    private async fetchPageContent(\n        url: string,\n        runtime: IAgentRuntime\n    ): Promise<PageContent> {\n        const cacheKey = this.getCacheKey(url);\n        const cached = await runtime.cacheManager.get<{\n            url: string;\n            content: PageContent;\n        }>(`${this.cacheKey}/${cacheKey}`);\n\n        if (cached) {\n            return cached.content;\n        }\n\n        let page: Page | undefined;\n\n        try {\n            if (!this.context) {\n                console.log(\n                    \"Browser context not initialized. Call initializeBrowser() first.\"\n                );\n            }\n\n            page = await this.context.newPage();\n\n            // Enable stealth mode\n            await page.setExtraHTTPHeaders({\n                \"Accept-Language\": \"en-US,en;q=0.9\",\n            });\n\n            // Apply ad blocker\n            if (this.blocker) {\n                await this.blocker.enableBlockingInPage(page);\n            }\n\n            const response = await page.goto(url, { waitUntil: \"networkidle\" });\n\n            if (!response) {\n                console.log(\"Failed to load the page\");\n            }\n\n            if (response.status() === 403 || response.status() === 404) {\n                return await this.tryAlternativeSources(url, runtime);\n            }\n\n            // Check for CAPTCHA\n            const captchaDetected = await this.detectCaptcha(page);\n            if (captchaDetected) {\n                await this.solveCaptcha(page, url);\n            }\n            const documentTitle = await page.evaluate(() => document.title);\n            const bodyContent = await page.evaluate(\n                () => document.body.innerText\n            );\n            const { title: parsedTitle, description } = await generateSummary(\n                runtime,\n                documentTitle + \"\\n\" + bodyContent\n            );\n            const content = { title: parsedTitle, description, bodyContent };\n            await runtime.cacheManager.set(`${this.cacheKey}/${cacheKey}`, {\n                url,\n                content,\n            });\n            return content;\n        } catch (error) {\n            console.error(\"Error:\", error);\n            return {\n                title: url,\n                description: \"Error, could not fetch content\",\n                bodyContent: \"\",\n            };\n        } finally {\n            if (page) {\n                await page.close();\n            }\n        }\n    }\n\n    private async detectCaptcha(page: Page): Promise<boolean> {\n        const captchaSelectors = [\n            'iframe[src*=\"captcha\"]',\n            'div[class*=\"captcha\"]',\n            \"#captcha\",\n            \".g-recaptcha\",\n            \".h-captcha\",\n        ];\n\n        for (const selector of captchaSelectors) {\n            const element = await page.$(selector);\n            if (element) return true;\n        }\n\n        return false;\n    }\n\n    private async solveCaptcha(page: Page, url: string): Promise<void> {\n        try {\n            const hcaptchaKey = await this.getHCaptchaWebsiteKey(page);\n            if (hcaptchaKey) {\n                const solution = await this.captchaSolver.hcaptchaProxyless({\n                    websiteURL: url,\n                    websiteKey: hcaptchaKey,\n                });\n                await page.evaluate((token) => {\n                    // eslint-disable-next-line\n                    // @ts-ignore\n                    window.hcaptcha.setResponse(token);\n                }, solution.gRecaptchaResponse);\n                return;\n            }\n\n            const recaptchaKey = await this.getReCaptchaWebsiteKey(page);\n            if (recaptchaKey) {\n                const solution = await this.captchaSolver.recaptchaV2Proxyless({\n                    websiteURL: url,\n                    websiteKey: recaptchaKey,\n                });\n                await page.evaluate((token) => {\n                    // eslint-disable-next-line\n                    // @ts-ignore\n                    document.getElementById(\"g-recaptcha-response\").innerHTML =\n                        token;\n                }, solution.gRecaptchaResponse);\n            }\n        } catch (error) {\n            console.error(\"Error solving CAPTCHA:\", error);\n        }\n    }\n\n    private async getHCaptchaWebsiteKey(page: Page): Promise<string> {\n        return page.evaluate(() => {\n            const hcaptchaIframe = document.querySelector(\n                'iframe[src*=\"hcaptcha.com\"]'\n            );\n            if (hcaptchaIframe) {\n                const src = hcaptchaIframe.getAttribute(\"src\");\n                const match = src?.match(/sitekey=([^&]*)/);\n                return match ? match[1] : \"\";\n            }\n            return \"\";\n        });\n    }\n\n    private async getReCaptchaWebsiteKey(page: Page): Promise<string> {\n        return page.evaluate(() => {\n            const recaptchaElement = document.querySelector(\".g-recaptcha\");\n            return recaptchaElement\n                ? recaptchaElement.getAttribute(\"data-sitekey\") || \"\"\n                : \"\";\n        });\n    }\n\n    private async tryAlternativeSources(\n        url: string,\n        runtime: IAgentRuntime\n    ): Promise<{ title: string; description: string; bodyContent: string }> {\n        // Try Internet Archive\n        const archiveUrl = `https://web.archive.org/web/${url}`;\n        try {\n            return await this.fetchPageContent(archiveUrl, runtime);\n        } catch (error) {\n            console.error(\"Error fetching from Internet Archive:\", error);\n        }\n\n        // Try Google Search as a last resort\n        const googleSearchUrl = `https://www.google.com/search?q=${encodeURIComponent(url)}`;\n        try {\n            return await this.fetchPageContent(googleSearchUrl, runtime);\n        } catch (error) {\n            console.error(\"Error fetching from Google Search:\", error);\n            console.error(\"Failed to fetch content from alternative sources\");\n            return {\n                title: url,\n                description:\n                    \"Error, could not fetch content from alternative sources\",\n                bodyContent: \"\",\n            };\n        }\n    }\n}\n","import { elizaLogger, models } from \"@ai16z/eliza\";\nimport { Service } from \"@ai16z/eliza\";\nimport {\n    IAgentRuntime,\n    ModelProviderName,\n    ServiceType,\n    IImageDescriptionService,\n} from \"@ai16z/eliza\";\nimport {\n    AutoProcessor,\n    AutoTokenizer,\n    env,\n    Florence2ForConditionalGeneration,\n    Florence2Processor,\n    PreTrainedModel,\n    PreTrainedTokenizer,\n    RawImage,\n    type Tensor,\n} from \"@huggingface/transformers\";\nimport fs from \"fs\";\nimport gifFrames from \"gif-frames\";\nimport os from \"os\";\nimport path from \"path\";\n\nexport class ImageDescriptionService\n    extends Service\n    implements IImageDescriptionService\n{\n    static serviceType: ServiceType = ServiceType.IMAGE_DESCRIPTION;\n\n    private modelId: string = \"onnx-community/Florence-2-base-ft\";\n    private device: string = \"gpu\";\n    private model: PreTrainedModel | null = null;\n    private processor: Florence2Processor | null = null;\n    private tokenizer: PreTrainedTokenizer | null = null;\n    private initialized: boolean = false;\n    private runtime: IAgentRuntime | null = null;\n    private queue: string[] = [];\n    private processing: boolean = false;\n\n    getInstance(): IImageDescriptionService {\n        return ImageDescriptionService.getInstance();\n    }\n\n    async initialize(runtime: IAgentRuntime): Promise<void> {\n        console.log(\"Initializing ImageDescriptionService\");\n        this.runtime = runtime;\n    }\n\n    private async initializeLocalModel(): Promise<void> {\n        env.allowLocalModels = false;\n        env.allowRemoteModels = true;\n        env.backends.onnx.logLevel = \"fatal\";\n        env.backends.onnx.wasm.proxy = false;\n        env.backends.onnx.wasm.numThreads = 1;\n\n        elizaLogger.info(\"Downloading Florence model...\");\n\n        this.model = await Florence2ForConditionalGeneration.from_pretrained(\n            this.modelId,\n            {\n                device: \"gpu\",\n                progress_callback: (progress) => {\n                    if (progress.status === \"downloading\") {\n                        const percent = (\n                            (progress.loaded / progress.total) *\n                            100\n                        ).toFixed(1);\n                        const dots = \".\".repeat(\n                            Math.floor(Number(percent) / 5)\n                        );\n                        elizaLogger.info(\n                            `Downloading Florence model: [${dots.padEnd(20, \" \")}] ${percent}%`\n                        );\n                    }\n                },\n            }\n        );\n\n        elizaLogger.success(\"Florence model downloaded successfully\");\n\n        elizaLogger.info(\"Downloading processor...\");\n        this.processor = (await AutoProcessor.from_pretrained(\n            this.modelId\n        )) as Florence2Processor;\n\n        elizaLogger.info(\"Downloading tokenizer...\");\n        this.tokenizer = await AutoTokenizer.from_pretrained(this.modelId);\n        elizaLogger.success(\"Image service initialization complete\");\n    }\n\n    async describeImage(\n        imageUrl: string\n    ): Promise<{ title: string; description: string }> {\n        if (!this.initialized) {\n            const model = models[this.runtime?.character?.modelProvider];\n\n            if (model === models[ModelProviderName.LLAMALOCAL]) {\n                await this.initializeLocalModel();\n            } else {\n                this.modelId = \"gpt-4o-mini\";\n                this.device = \"cloud\";\n            }\n\n            this.initialized = true;\n        }\n\n        if (this.device === \"cloud\") {\n            if (!this.runtime) {\n                throw new Error(\n                    \"Runtime is required for OpenAI image recognition\"\n                );\n            }\n            return this.recognizeWithOpenAI(imageUrl);\n        }\n\n        this.queue.push(imageUrl);\n        this.processQueue();\n\n        return new Promise((resolve, _reject) => {\n            const checkQueue = () => {\n                const index = this.queue.indexOf(imageUrl);\n                if (index !== -1) {\n                    setTimeout(checkQueue, 100);\n                } else {\n                    resolve(this.processImage(imageUrl));\n                }\n            };\n            checkQueue();\n        });\n    }\n\n    private async recognizeWithOpenAI(\n        imageUrl: string\n    ): Promise<{ title: string; description: string }> {\n        const isGif = imageUrl.toLowerCase().endsWith(\".gif\");\n        let imageData: Buffer | null = null;\n\n        try {\n            if (isGif) {\n                const { filePath } =\n                    await this.extractFirstFrameFromGif(imageUrl);\n                imageData = fs.readFileSync(filePath);\n            } else {\n                const response = await fetch(imageUrl);\n                if (!response.ok) {\n                    throw new Error(\n                        `Failed to fetch image: ${response.statusText}`\n                    );\n                }\n                imageData = Buffer.from(await response.arrayBuffer());\n            }\n\n            if (!imageData || imageData.length === 0) {\n                throw new Error(\"Failed to fetch image data\");\n            }\n\n            const prompt =\n                \"Describe this image and give it a title. The first line should be the title, and then a line break, then a detailed description of the image. Respond with the format 'title\\ndescription'\";\n            const text = await this.requestOpenAI(\n                imageUrl,\n                imageData,\n                prompt,\n                isGif\n            );\n\n            const [title, ...descriptionParts] = text.split(\"\\n\");\n            return {\n                title,\n                description: descriptionParts.join(\"\\n\"),\n            };\n        } catch (error) {\n            elizaLogger.error(\"Error in recognizeWithOpenAI:\", error);\n            throw error;\n        }\n    }\n\n    private async requestOpenAI(\n        imageUrl: string,\n        imageData: Buffer,\n        prompt: string,\n        isGif: boolean\n    ): Promise<string> {\n        for (let attempt = 0; attempt < 3; attempt++) {\n            try {\n                const content = [\n                    { type: \"text\", text: prompt },\n                    {\n                        type: \"image_url\",\n                        image_url: {\n                            url: isGif\n                                ? `data:image/png;base64,${imageData.toString(\"base64\")}`\n                                : imageUrl,\n                        },\n                    },\n                ];\n\n                const endpoint =\n                    models[this.runtime.imageModelProvider].endpoint ??\n                    \"https://api.openai.com/v1\";\n\n                const response = await fetch(endpoint + \"/chat/completions\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        Authorization: `Bearer ${this.runtime.getSetting(\"OPENAI_API_KEY\")}`,\n                    },\n                    body: JSON.stringify({\n                        model: \"gpt-4o-mini\",\n                        messages: [{ role: \"user\", content }],\n                        max_tokens: isGif ? 500 : 300,\n                    }),\n                });\n\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n\n                const data = await response.json();\n                return data.choices[0].message.content;\n            } catch (error) {\n                elizaLogger.error(\n                    `OpenAI request failed (attempt ${attempt + 1}):`,\n                    error\n                );\n                if (attempt === 2) throw error;\n            }\n        }\n        throw new Error(\n            \"Failed to recognize image with OpenAI after 3 attempts\"\n        );\n    }\n\n    private async processQueue(): Promise<void> {\n        if (this.processing || this.queue.length === 0) return;\n\n        this.processing = true;\n        while (this.queue.length > 0) {\n            const imageUrl = this.queue.shift();\n            await this.processImage(imageUrl);\n        }\n        this.processing = false;\n    }\n\n    private async processImage(\n        imageUrl: string\n    ): Promise<{ title: string; description: string }> {\n        if (!this.model || !this.processor || !this.tokenizer) {\n            throw new Error(\"Model components not initialized\");\n        }\n\n        elizaLogger.log(\"Processing image:\", imageUrl);\n        const isGif = imageUrl.toLowerCase().endsWith(\".gif\");\n        let imageToProcess = imageUrl;\n\n        try {\n            if (isGif) {\n                elizaLogger.log(\"Extracting first frame from GIF\");\n                const { filePath } =\n                    await this.extractFirstFrameFromGif(imageUrl);\n                imageToProcess = filePath;\n            }\n\n            const image = await RawImage.fromURL(imageToProcess);\n            const visionInputs = await this.processor(image);\n            const prompts =\n                this.processor.construct_prompts(\"<DETAILED_CAPTION>\");\n            const textInputs = this.tokenizer(prompts);\n\n            elizaLogger.log(\"Generating image description\");\n            const generatedIds = (await this.model.generate({\n                ...textInputs,\n                ...visionInputs,\n                max_new_tokens: 256,\n            })) as Tensor;\n\n            const generatedText = this.tokenizer.batch_decode(generatedIds, {\n                skip_special_tokens: false,\n            })[0];\n\n            const result = this.processor.post_process_generation(\n                generatedText,\n                \"<DETAILED_CAPTION>\",\n                image.size\n            );\n\n            const detailedCaption = result[\"<DETAILED_CAPTION>\"] as string;\n            return { title: detailedCaption, description: detailedCaption };\n        } catch (error) {\n            elizaLogger.error(\"Error processing image:\", error);\n            throw error;\n        } finally {\n            if (isGif && imageToProcess !== imageUrl) {\n                fs.unlinkSync(imageToProcess);\n            }\n        }\n    }\n\n    private async extractFirstFrameFromGif(\n        gifUrl: string\n    ): Promise<{ filePath: string }> {\n        const frameData = await gifFrames({\n            url: gifUrl,\n            frames: 1,\n            outputType: \"png\",\n        });\n\n        const tempFilePath = path.join(\n            os.tmpdir(),\n            `gif_frame_${Date.now()}.png`\n        );\n\n        return new Promise((resolve, reject) => {\n            const writeStream = fs.createWriteStream(tempFilePath);\n            frameData[0].getImage().pipe(writeStream);\n            writeStream.on(\"finish\", () => resolve({ filePath: tempFilePath }));\n            writeStream.on(\"error\", reject);\n        });\n    }\n}\n\nexport default ImageDescriptionService;\n","import {\n    elizaLogger,\n    IAgentRuntime,\n    ServiceType,\n    ModelProviderName,\n} from \"@ai16z/eliza\";\nimport { Service } from \"@ai16z/eliza\";\nimport fs from \"fs\";\nimport https from \"https\";\nimport {\n    GbnfJsonSchema,\n    getLlama,\n    Llama,\n    LlamaContext,\n    LlamaContextSequence,\n    LlamaContextSequenceRepeatPenalty,\n    LlamaJsonSchemaGrammar,\n    LlamaModel,\n    Token,\n} from \"node-llama-cpp\";\nimport path from \"path\";\nimport si from \"systeminformation\";\nimport { fileURLToPath } from \"url\";\n\nconst wordsToPunish = [\n    \" please\",\n    \" feel\",\n    \" free\",\n    \"!\",\n    \"–\",\n    \"—\",\n    \"?\",\n    \".\",\n    \",\",\n    \"; \",\n    \" cosmos\",\n    \" tapestry\",\n    \" tapestries\",\n    \" glitch\",\n    \" matrix\",\n    \" cyberspace\",\n    \" troll\",\n    \" questions\",\n    \" topics\",\n    \" discuss\",\n    \" basically\",\n    \" simulation\",\n    \" simulate\",\n    \" universe\",\n    \" like\",\n    \" debug\",\n    \" debugging\",\n    \" wild\",\n    \" existential\",\n    \" juicy\",\n    \" circuits\",\n    \" help\",\n    \" ask\",\n    \" happy\",\n    \" just\",\n    \" cosmic\",\n    \" cool\",\n    \" joke\",\n    \" punchline\",\n    \" fancy\",\n    \" glad\",\n    \" assist\",\n    \" algorithm\",\n    \" Indeed\",\n    \" Furthermore\",\n    \" However\",\n    \" Notably\",\n    \" Therefore\",\n    \" Additionally\",\n    \" conclusion\",\n    \" Significantly\",\n    \" Consequently\",\n    \" Thus\",\n    \" What\",\n    \" Otherwise\",\n    \" Moreover\",\n    \" Subsequently\",\n    \" Accordingly\",\n    \" Unlock\",\n    \" Unleash\",\n    \" buckle\",\n    \" pave\",\n    \" forefront\",\n    \" harness\",\n    \" harnessing\",\n    \" bridging\",\n    \" bridging\",\n    \" Spearhead\",\n    \" spearheading\",\n    \" Foster\",\n    \" foster\",\n    \" environmental\",\n    \" impact\",\n    \" Navigate\",\n    \" navigating\",\n    \" challenges\",\n    \" chaos\",\n    \" social\",\n    \" inclusion\",\n    \" inclusive\",\n    \" diversity\",\n    \" diverse\",\n    \" delve\",\n    \" noise\",\n    \" infinite\",\n    \" insanity\",\n    \" coffee\",\n    \" singularity\",\n    \" AI\",\n    \" digital\",\n    \" artificial\",\n    \" intelligence\",\n    \" consciousness\",\n    \" reality\",\n    \" metaverse\",\n    \" virtual\",\n    \" virtual reality\",\n    \" VR\",\n    \" Metaverse\",\n    \" humanity\",\n];\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nconst jsonSchemaGrammar: Readonly<{\n    type: string;\n    properties: {\n        user: {\n            type: string;\n        };\n        content: {\n            type: string;\n        };\n    };\n}> = {\n    type: \"object\",\n    properties: {\n        user: {\n            type: \"string\",\n        },\n        content: {\n            type: \"string\",\n        },\n    },\n};\n\ninterface QueuedMessage {\n    context: string;\n    temperature: number;\n    stop: string[];\n    max_tokens: number;\n    frequency_penalty: number;\n    presence_penalty: number;\n    useGrammar: boolean;\n    resolve: (value: any | string | PromiseLike<any | string>) => void;\n    reject: (reason?: any) => void;\n}\n\nexport class LlamaService extends Service {\n    private llama: Llama | undefined;\n    private model: LlamaModel | undefined;\n    private modelPath: string;\n    private grammar: LlamaJsonSchemaGrammar<GbnfJsonSchema> | undefined;\n    private ctx: LlamaContext | undefined;\n    private sequence: LlamaContextSequence | undefined;\n    private modelUrl: string;\n    private ollamaModel: string | undefined;\n\n    private messageQueue: QueuedMessage[] = [];\n    private isProcessing: boolean = false;\n    private modelInitialized: boolean = false;\n    private runtime: IAgentRuntime | undefined;\n\n    static serviceType: ServiceType = ServiceType.TEXT_GENERATION;\n\n    constructor() {\n        super();\n        this.llama = undefined;\n        this.model = undefined;\n        this.modelUrl =\n            \"https://huggingface.co/NousResearch/Hermes-3-Llama-3.1-8B-GGUF/resolve/main/Hermes-3-Llama-3.1-8B.Q8_0.gguf?download=true\";\n        const modelName = \"model.gguf\";\n        this.modelPath = path.join(\n            process.env.LLAMALOCAL_PATH?.trim() ?? \"./\",\n            modelName\n        );\n        this.ollamaModel = process.env.OLLAMA_MODEL;\n    }\n\n    async initialize(runtime: IAgentRuntime): Promise<void> {\n        elizaLogger.info(\"Initializing LlamaService...\");\n        this.runtime = runtime;\n    }\n\n    private async ensureInitialized() {\n        if (!this.modelInitialized) {\n            elizaLogger.info(\n                \"Model not initialized, starting initialization...\"\n            );\n            await this.initializeModel();\n        } else {\n            elizaLogger.info(\"Model already initialized\");\n        }\n    }\n\n    async initializeModel() {\n        try {\n            elizaLogger.info(\"Checking model file...\");\n            await this.checkModel();\n\n            const systemInfo = await si.graphics();\n            const hasCUDA = systemInfo.controllers.some((controller) =>\n                controller.vendor.toLowerCase().includes(\"nvidia\")\n            );\n\n            if (hasCUDA) {\n                elizaLogger.info(\n                    \"LlamaService: CUDA detected, using GPU acceleration\"\n                );\n            } else {\n                elizaLogger.warn(\n                    \"LlamaService: No CUDA detected - local response will be slow\"\n                );\n            }\n\n            elizaLogger.info(\"Initializing Llama instance...\");\n            this.llama = await getLlama({\n                gpu: hasCUDA ? \"cuda\" : undefined,\n            });\n\n            elizaLogger.info(\"Creating JSON schema grammar...\");\n            const grammar = new LlamaJsonSchemaGrammar(\n                this.llama,\n                jsonSchemaGrammar as GbnfJsonSchema\n            );\n            this.grammar = grammar;\n\n            elizaLogger.info(\"Loading model...\");\n            this.model = await this.llama.loadModel({\n                modelPath: this.modelPath,\n            });\n\n            elizaLogger.info(\"Creating context and sequence...\");\n            this.ctx = await this.model.createContext({ contextSize: 8192 });\n            this.sequence = this.ctx.getSequence();\n\n            this.modelInitialized = true;\n            elizaLogger.success(\"Model initialization complete\");\n            this.processQueue();\n        } catch (error) {\n            elizaLogger.error(\n                \"Model initialization failed. Deleting model and retrying:\",\n                error\n            );\n            try {\n                elizaLogger.info(\n                    \"Attempting to delete and re-download model...\"\n                );\n                await this.deleteModel();\n                await this.initializeModel();\n            } catch (retryError) {\n                elizaLogger.error(\n                    \"Model re-initialization failed:\",\n                    retryError\n                );\n                throw new Error(\n                    `Model initialization failed after retry: ${retryError.message}`\n                );\n            }\n        }\n    }\n\n    async checkModel() {\n        if (!fs.existsSync(this.modelPath)) {\n            elizaLogger.info(\"Model file not found, starting download...\");\n            await new Promise<void>((resolve, reject) => {\n                const file = fs.createWriteStream(this.modelPath);\n                let downloadedSize = 0;\n                let totalSize = 0;\n\n                const downloadModel = (url: string) => {\n                    https\n                        .get(url, (response) => {\n                            if (\n                                response.statusCode >= 300 &&\n                                response.statusCode < 400 &&\n                                response.headers.location\n                            ) {\n                                elizaLogger.info(\n                                    `Following redirect to: ${response.headers.location}`\n                                );\n                                downloadModel(response.headers.location);\n                                return;\n                            }\n\n                            if (response.statusCode !== 200) {\n                                reject(\n                                    new Error(\n                                        `Failed to download model: HTTP ${response.statusCode}`\n                                    )\n                                );\n                                return;\n                            }\n\n                            totalSize = parseInt(\n                                response.headers[\"content-length\"] || \"0\",\n                                10\n                            );\n                            elizaLogger.info(\n                                `Downloading model: Hermes-3-Llama-3.1-8B.Q8_0.gguf`\n                            );\n                            elizaLogger.info(\n                                `Download location: ${this.modelPath}`\n                            );\n                            elizaLogger.info(\n                                `Total size: ${(totalSize / 1024 / 1024).toFixed(2)} MB`\n                            );\n\n                            response.pipe(file);\n\n                            let progressString = \"\";\n                            response.on(\"data\", (chunk) => {\n                                downloadedSize += chunk.length;\n                                const progress =\n                                    totalSize > 0\n                                        ? (\n                                              (downloadedSize / totalSize) *\n                                              100\n                                          ).toFixed(1)\n                                        : \"0.0\";\n                                const dots = \".\".repeat(\n                                    Math.floor(Number(progress) / 5)\n                                );\n                                progressString = `Downloading model: [${dots.padEnd(20, \" \")}] ${progress}%`;\n                                elizaLogger.progress(progressString);\n                            });\n\n                            file.on(\"finish\", () => {\n                                file.close();\n                                elizaLogger.progress(\"\"); // Clear the progress line\n                                elizaLogger.success(\"Model download complete\");\n                                resolve();\n                            });\n\n                            response.on(\"error\", (error) => {\n                                fs.unlink(this.modelPath, () => {});\n                                reject(\n                                    new Error(\n                                        `Model download failed: ${error.message}`\n                                    )\n                                );\n                            });\n                        })\n                        .on(\"error\", (error) => {\n                            fs.unlink(this.modelPath, () => {});\n                            reject(\n                                new Error(\n                                    `Model download request failed: ${error.message}`\n                                )\n                            );\n                        });\n                };\n\n                downloadModel(this.modelUrl);\n\n                file.on(\"error\", (err) => {\n                    fs.unlink(this.modelPath, () => {}); // Delete the file async\n                    console.error(\"File write error:\", err.message);\n                    reject(err);\n                });\n            });\n        } else {\n            elizaLogger.warn(\"Model already exists.\");\n        }\n    }\n\n    async deleteModel() {\n        if (fs.existsSync(this.modelPath)) {\n            fs.unlinkSync(this.modelPath);\n        }\n    }\n\n    async queueMessageCompletion(\n        context: string,\n        temperature: number,\n        stop: string[],\n        frequency_penalty: number,\n        presence_penalty: number,\n        max_tokens: number\n    ): Promise<any> {\n        await this.ensureInitialized();\n        return new Promise((resolve, reject) => {\n            this.messageQueue.push({\n                context,\n                temperature,\n                stop,\n                frequency_penalty,\n                presence_penalty,\n                max_tokens,\n                useGrammar: true,\n                resolve,\n                reject,\n            });\n            this.processQueue();\n        });\n    }\n\n    async queueTextCompletion(\n        context: string,\n        temperature: number,\n        stop: string[],\n        frequency_penalty: number,\n        presence_penalty: number,\n        max_tokens: number\n    ): Promise<string> {\n        await this.ensureInitialized();\n\n        return new Promise((resolve, reject) => {\n            this.messageQueue.push({\n                context,\n                temperature,\n                stop,\n                frequency_penalty: frequency_penalty ?? 1.0,\n                presence_penalty: presence_penalty ?? 1.0,\n                max_tokens,\n                useGrammar: false,\n                resolve,\n                reject,\n            });\n            this.processQueue();\n        });\n    }\n\n    private async processQueue() {\n        if (\n            this.isProcessing ||\n            this.messageQueue.length === 0 ||\n            !this.modelInitialized\n        ) {\n            return;\n        }\n\n        this.isProcessing = true;\n\n        while (this.messageQueue.length > 0) {\n            const message = this.messageQueue.shift();\n            if (message) {\n                try {\n                    const response = await this.getCompletionResponse(\n                        message.context,\n                        message.temperature,\n                        message.stop,\n                        message.frequency_penalty,\n                        message.presence_penalty,\n                        message.max_tokens,\n                        message.useGrammar\n                    );\n                    message.resolve(response);\n                } catch (error) {\n                    message.reject(error);\n                }\n            }\n        }\n\n        this.isProcessing = false;\n    }\n\n    async completion(prompt: string, runtime: IAgentRuntime): Promise<string> {\n        try {\n            await this.initialize(runtime);\n\n            if (runtime.modelProvider === ModelProviderName.OLLAMA) {\n                return await this.ollamaCompletion(prompt);\n            }\n\n            return await this.localCompletion(prompt);\n        } catch (error) {\n            elizaLogger.error(\"Error in completion:\", error);\n            throw error;\n        }\n    }\n\n    async embedding(text: string, runtime: IAgentRuntime): Promise<number[]> {\n        try {\n            await this.initialize(runtime);\n\n            if (runtime.modelProvider === ModelProviderName.OLLAMA) {\n                return await this.ollamaEmbedding(text);\n            }\n\n            return await this.localEmbedding(text);\n        } catch (error) {\n            elizaLogger.error(\"Error in embedding:\", error);\n            throw error;\n        }\n    }\n\n    private async getCompletionResponse(\n        context: string,\n        temperature: number,\n        stop: string[],\n        frequency_penalty: number,\n        presence_penalty: number,\n        max_tokens: number,\n        useGrammar: boolean\n    ): Promise<any | string> {\n        const ollamaModel = process.env.OLLAMA_MODEL;\n        if (ollamaModel) {\n            const ollamaUrl =\n                process.env.OLLAMA_SERVER_URL || \"http://localhost:11434\";\n            elizaLogger.info(\n                `Using Ollama API at ${ollamaUrl} with model ${ollamaModel}`\n            );\n\n            const response = await fetch(`${ollamaUrl}/api/generate`, {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({\n                    model: ollamaModel,\n                    prompt: context,\n                    stream: false,\n                    options: {\n                        temperature,\n                        stop,\n                        frequency_penalty,\n                        presence_penalty,\n                        num_predict: max_tokens,\n                    },\n                }),\n            });\n\n            if (!response.ok) {\n                throw new Error(\n                    `Ollama request failed: ${response.statusText}`\n                );\n            }\n\n            const result = await response.json();\n            return useGrammar ? { content: result.response } : result.response;\n        }\n\n        // Use local GGUF model\n        if (!this.sequence) {\n            throw new Error(\"Model not initialized.\");\n        }\n\n        const tokens = this.model!.tokenize(context);\n\n        // tokenize the words to punish\n        const wordsToPunishTokens = wordsToPunish\n            .map((word) => this.model!.tokenize(word))\n            .flat();\n\n        const repeatPenalty: LlamaContextSequenceRepeatPenalty = {\n            punishTokens: () => wordsToPunishTokens,\n            penalty: 1.2,\n            frequencyPenalty: frequency_penalty,\n            presencePenalty: presence_penalty,\n        };\n\n        const responseTokens: Token[] = [];\n\n        for await (const token of this.sequence.evaluate(tokens, {\n            temperature: Number(temperature),\n            repeatPenalty: repeatPenalty,\n            grammarEvaluationState: useGrammar ? this.grammar : undefined,\n            yieldEogToken: false,\n        })) {\n            const current = this.model.detokenize([...responseTokens, token]);\n            if ([...stop].some((s) => current.includes(s))) {\n                elizaLogger.info(\"Stop sequence found\");\n                break;\n            }\n\n            responseTokens.push(token);\n            process.stdout.write(this.model!.detokenize([token]));\n            if (useGrammar) {\n                if (current.replaceAll(\"\\n\", \"\").includes(\"}```\")) {\n                    elizaLogger.info(\"JSON block found\");\n                    break;\n                }\n            }\n            if (responseTokens.length > max_tokens) {\n                elizaLogger.info(\"Max tokens reached\");\n                break;\n            }\n        }\n\n        const response = this.model!.detokenize(responseTokens);\n\n        if (!response) {\n            throw new Error(\"Response is undefined\");\n        }\n\n        if (useGrammar) {\n            // extract everything between ```json and ```\n            let jsonString = response.match(/```json(.*?)```/s)?.[1].trim();\n            if (!jsonString) {\n                // try parsing response as JSON\n                try {\n                    jsonString = JSON.stringify(JSON.parse(response));\n                } catch {\n                    throw new Error(\"JSON string not found\");\n                }\n            }\n            try {\n                const parsedResponse = JSON.parse(jsonString);\n                if (!parsedResponse) {\n                    throw new Error(\"Parsed response is undefined\");\n                }\n                await this.sequence.clearHistory();\n                return parsedResponse;\n            } catch (error) {\n                elizaLogger.error(\"Error parsing JSON:\", error);\n            }\n        } else {\n            await this.sequence.clearHistory();\n            return response;\n        }\n    }\n\n    async getEmbeddingResponse(input: string): Promise<number[] | undefined> {\n        const ollamaModel = process.env.OLLAMA_MODEL;\n        if (ollamaModel) {\n            const ollamaUrl =\n                process.env.OLLAMA_SERVER_URL || \"http://localhost:11434\";\n            const embeddingModel =\n                process.env.OLLAMA_EMBEDDING_MODEL || \"mxbai-embed-large\";\n            elizaLogger.info(\n                `Using Ollama API for embeddings with model ${embeddingModel} (base: ${ollamaModel})`\n            );\n\n            const response = await fetch(`${ollamaUrl}/api/embeddings`, {\n                method: \"POST\",\n                headers: { \"Content-Type\": \"application/json\" },\n                body: JSON.stringify({\n                    model: embeddingModel,\n                    prompt: input,\n                }),\n            });\n\n            if (!response.ok) {\n                throw new Error(\n                    `Ollama embeddings request failed: ${response.statusText}`\n                );\n            }\n\n            const result = await response.json();\n            return result.embedding;\n        }\n\n        // Use local GGUF model\n        if (!this.sequence) {\n            throw new Error(\"Sequence not initialized\");\n        }\n\n        const ollamaUrl =\n            process.env.OLLAMA_SERVER_URL || \"http://localhost:11434\";\n        const embeddingModel =\n            process.env.OLLAMA_EMBEDDING_MODEL || \"mxbai-embed-large\";\n        elizaLogger.info(\n            `Using Ollama API for embeddings with model ${embeddingModel} (base: ${this.ollamaModel})`\n        );\n\n        const response = await fetch(`${ollamaUrl}/api/embeddings`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                input: input,\n                model: embeddingModel,\n            }),\n        });\n\n        if (!response.ok) {\n            throw new Error(`Failed to get embedding: ${response.statusText}`);\n        }\n\n        const embedding = await response.json();\n        return embedding.vector;\n    }\n\n    private async ollamaCompletion(prompt: string): Promise<string> {\n        const ollamaModel = process.env.OLLAMA_MODEL;\n        const ollamaUrl =\n            process.env.OLLAMA_SERVER_URL || \"http://localhost:11434\";\n        elizaLogger.info(\n            `Using Ollama API at ${ollamaUrl} with model ${ollamaModel}`\n        );\n\n        const response = await fetch(`${ollamaUrl}/api/generate`, {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n                model: ollamaModel,\n                prompt: prompt,\n                stream: false,\n                options: {\n                    temperature: 0.7,\n                    stop: [\"\\n\"],\n                    frequency_penalty: 0.5,\n                    presence_penalty: 0.5,\n                    num_predict: 256,\n                },\n            }),\n        });\n\n        if (!response.ok) {\n            throw new Error(`Ollama request failed: ${response.statusText}`);\n        }\n\n        const result = await response.json();\n        return result.response;\n    }\n\n    private async ollamaEmbedding(text: string): Promise<number[]> {\n        const ollamaModel = process.env.OLLAMA_MODEL;\n        const ollamaUrl =\n            process.env.OLLAMA_SERVER_URL || \"http://localhost:11434\";\n        const embeddingModel =\n            process.env.OLLAMA_EMBEDDING_MODEL || \"mxbai-embed-large\";\n        elizaLogger.info(\n            `Using Ollama API for embeddings with model ${embeddingModel} (base: ${ollamaModel})`\n        );\n\n        const response = await fetch(`${ollamaUrl}/api/embeddings`, {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n                model: embeddingModel,\n                prompt: text,\n            }),\n        });\n\n        if (!response.ok) {\n            throw new Error(\n                `Ollama embeddings request failed: ${response.statusText}`\n            );\n        }\n\n        const result = await response.json();\n        return result.embedding;\n    }\n\n    private async localCompletion(prompt: string): Promise<string> {\n        if (!this.sequence) {\n            throw new Error(\"Sequence not initialized\");\n        }\n\n        const tokens = this.model!.tokenize(prompt);\n\n        // tokenize the words to punish\n        const wordsToPunishTokens = wordsToPunish\n            .map((word) => this.model!.tokenize(word))\n            .flat();\n\n        const repeatPenalty: LlamaContextSequenceRepeatPenalty = {\n            punishTokens: () => wordsToPunishTokens,\n            penalty: 1.2,\n            frequencyPenalty: 0.5,\n            presencePenalty: 0.5,\n        };\n\n        const responseTokens: Token[] = [];\n\n        for await (const token of this.sequence.evaluate(tokens, {\n            temperature: 0.7,\n            repeatPenalty: repeatPenalty,\n            yieldEogToken: false,\n        })) {\n            const current = this.model.detokenize([...responseTokens, token]);\n            if (current.includes(\"\\n\")) {\n                elizaLogger.info(\"Stop sequence found\");\n                break;\n            }\n\n            responseTokens.push(token);\n            process.stdout.write(this.model!.detokenize([token]));\n            if (responseTokens.length > 256) {\n                elizaLogger.info(\"Max tokens reached\");\n                break;\n            }\n        }\n\n        const response = this.model!.detokenize(responseTokens);\n\n        if (!response) {\n            throw new Error(\"Response is undefined\");\n        }\n\n        await this.sequence.clearHistory();\n        return response;\n    }\n\n    private async localEmbedding(text: string): Promise<number[]> {\n        if (!this.sequence) {\n            throw new Error(\"Sequence not initialized\");\n        }\n\n        const embeddingContext = await this.model.createEmbeddingContext();\n        const embedding = await embeddingContext.getEmbeddingFor(text);\n        return embedding?.vector ? [...embedding.vector] : undefined;\n    }\n}\n\nexport default LlamaService;\n","import { IAgentRuntime, IPdfService, Service, ServiceType } from \"@ai16z/eliza\";\nimport { getDocument, PDFDocumentProxy } from \"pdfjs-dist\";\nimport { TextItem, TextMarkedContent } from \"pdfjs-dist/types/src/display/api\";\n\nexport class PdfService extends Service implements IPdfService {\n    static serviceType: ServiceType = ServiceType.PDF;\n\n    constructor() {\n        super();\n    }\n\n    getInstance(): IPdfService {\n        return PdfService.getInstance();\n    }\n\n    async initialize(_runtime: IAgentRuntime): Promise<void> {}\n\n    async convertPdfToText(pdfBuffer: Buffer): Promise<string> {\n        // Convert Buffer to Uint8Array\n        const uint8Array = new Uint8Array(pdfBuffer);\n\n        const pdf: PDFDocumentProxy = await getDocument({ data: uint8Array })\n            .promise;\n        const numPages = pdf.numPages;\n        const textPages: string[] = [];\n\n        for (let pageNum = 1; pageNum <= numPages; pageNum++) {\n            const page = await pdf.getPage(pageNum);\n            const textContent = await page.getTextContent();\n            const pageText = textContent.items\n                .filter(isTextItem)\n                .map((item) => item.str)\n                .join(\" \");\n            textPages.push(pageText);\n        }\n\n        return textPages.join(\"\\n\");\n    }\n}\n\n// Type guard function\nfunction isTextItem(item: TextItem | TextMarkedContent): item is TextItem {\n    return \"str\" in item;\n}\n","import { PassThrough, Readable } from \"stream\";\nimport { IAgentRuntime, ISpeechService, ServiceType } from \"@ai16z/eliza\";\nimport { getWavHeader } from \"./audioUtils.ts\";\nimport { Service } from \"@ai16z/eliza\";\nimport { validateNodeConfig } from \"../environment.ts\";\nimport * as Echogarden from \"echogarden\";\nimport { elizaLogger } from \"@ai16z/eliza\";\n\nfunction prependWavHeader(\n    readable: Readable,\n    audioLength: number,\n    sampleRate: number,\n    channelCount: number = 1,\n    bitsPerSample: number = 16\n): Readable {\n    const wavHeader = getWavHeader(\n        audioLength,\n        sampleRate,\n        channelCount,\n        bitsPerSample\n    );\n    let pushedHeader = false;\n    const passThrough = new PassThrough();\n    readable.on(\"data\", function (data) {\n        if (!pushedHeader) {\n            passThrough.push(wavHeader);\n            pushedHeader = true;\n        }\n        passThrough.push(data);\n    });\n    readable.on(\"end\", function () {\n        passThrough.end();\n    });\n    return passThrough;\n}\n\nasync function getVoiceSettings(runtime: IAgentRuntime) {\n    const hasElevenLabs = !!runtime.getSetting(\"ELEVENLABS_XI_API_KEY\");\n    const useVits = !hasElevenLabs;\n\n    // Get voice settings from character card\n    const voiceSettings = runtime.character.settings?.voice;\n    const elevenlabsSettings = voiceSettings?.elevenlabs;\n\n    elizaLogger.debug(\"Voice settings:\", {\n        hasElevenLabs,\n        useVits,\n        voiceSettings,\n        elevenlabsSettings,\n    });\n\n    return {\n        elevenlabsVoiceId:\n            elevenlabsSettings?.voiceId ||\n            runtime.getSetting(\"ELEVENLABS_VOICE_ID\"),\n        elevenlabsModel:\n            elevenlabsSettings?.model ||\n            runtime.getSetting(\"ELEVENLABS_MODEL_ID\") ||\n            \"eleven_monolingual_v1\",\n        elevenlabsStability:\n            elevenlabsSettings?.stability ||\n            runtime.getSetting(\"ELEVENLABS_VOICE_STABILITY\") ||\n            \"0.5\",\n        // ... other ElevenLabs settings ...\n        vitsVoice:\n            voiceSettings?.model ||\n            voiceSettings?.url ||\n            runtime.getSetting(\"VITS_VOICE\") ||\n            \"en_US-hfc_female-medium\",\n        useVits,\n    };\n}\n\nasync function textToSpeech(runtime: IAgentRuntime, text: string) {\n    await validateNodeConfig(runtime);\n    const { elevenlabsVoiceId } = await getVoiceSettings(runtime);\n\n    try {\n        const response = await fetch(\n            `https://api.elevenlabs.io/v1/text-to-speech/${elevenlabsVoiceId}/stream?optimize_streaming_latency=${runtime.getSetting(\"ELEVENLABS_OPTIMIZE_STREAMING_LATENCY\")}&output_format=${runtime.getSetting(\"ELEVENLABS_OUTPUT_FORMAT\")}`,\n            {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"xi-api-key\": runtime.getSetting(\"ELEVENLABS_XI_API_KEY\"),\n                },\n                body: JSON.stringify({\n                    model_id: runtime.getSetting(\"ELEVENLABS_MODEL_ID\"),\n                    text: text,\n                    voice_settings: {\n                        similarity_boost: runtime.getSetting(\n                            \"ELEVENLABS_VOICE_SIMILARITY_BOOST\"\n                        ),\n                        stability: runtime.getSetting(\n                            \"ELEVENLABS_VOICE_STABILITY\"\n                        ),\n                        style: runtime.getSetting(\"ELEVENLABS_VOICE_STYLE\"),\n                        use_speaker_boost: runtime.getSetting(\n                            \"ELEVENLABS_VOICE_USE_SPEAKER_BOOST\"\n                        ),\n                    },\n                }),\n            }\n        );\n\n        const status = response.status;\n        if (status != 200) {\n            const errorBodyString = await response.text();\n            const errorBody = JSON.parse(errorBodyString);\n\n            // Check for quota exceeded error\n            if (\n                status === 401 &&\n                errorBody.detail?.status === \"quota_exceeded\"\n            ) {\n                console.log(\"ElevenLabs quota exceeded, falling back to VITS\");\n                throw new Error(\"QUOTA_EXCEEDED\");\n            }\n\n            throw new Error(\n                `Received status ${status} from Eleven Labs API: ${errorBodyString}`\n            );\n        }\n\n        if (response) {\n            const reader = response.body?.getReader();\n            const readable = new Readable({\n                read() {\n                    reader && // eslint-disable-line\n                        reader.read().then(({ done, value }) => {\n                            if (done) {\n                                this.push(null);\n                            } else {\n                                this.push(value);\n                            }\n                        });\n                },\n            });\n\n            if (\n                runtime\n                    .getSetting(\"ELEVENLABS_OUTPUT_FORMAT\")\n                    .startsWith(\"pcm_\")\n            ) {\n                const sampleRate = parseInt(\n                    runtime.getSetting(\"ELEVENLABS_OUTPUT_FORMAT\").substring(4)\n                );\n                const withHeader = prependWavHeader(\n                    readable,\n                    1024 * 1024 * 100,\n                    sampleRate,\n                    1,\n                    16\n                );\n                return withHeader;\n            } else {\n                return readable;\n            }\n        } else {\n            return new Readable({\n                read() {},\n            });\n        }\n    } catch (error) {\n        if (error.message === \"QUOTA_EXCEEDED\") {\n            // Fall back to VITS\n            const { vitsVoice } = await getVoiceSettings(runtime);\n            const { audio } = await Echogarden.synthesize(text, {\n                engine: \"vits\",\n                voice: vitsVoice,\n            });\n\n            let wavStream: Readable;\n            if (audio instanceof Buffer) {\n                console.log(\"audio is a buffer\");\n                wavStream = Readable.from(audio);\n            } else if (\"audioChannels\" in audio && \"sampleRate\" in audio) {\n                console.log(\"audio is a RawAudio\");\n                const floatBuffer = Buffer.from(audio.audioChannels[0].buffer);\n                console.log(\"buffer length: \", floatBuffer.length);\n\n                // Get the sample rate from the RawAudio object\n                const sampleRate = audio.sampleRate;\n\n                // Create a Float32Array view of the floatBuffer\n                const floatArray = new Float32Array(floatBuffer.buffer);\n\n                // Convert 32-bit float audio to 16-bit PCM\n                const pcmBuffer = new Int16Array(floatArray.length);\n                for (let i = 0; i < floatArray.length; i++) {\n                    pcmBuffer[i] = Math.round(floatArray[i] * 32767);\n                }\n\n                // Prepend WAV header to the buffer\n                const wavHeaderBuffer = getWavHeader(\n                    pcmBuffer.length * 2,\n                    sampleRate,\n                    1,\n                    16\n                );\n                const wavBuffer = Buffer.concat([\n                    wavHeaderBuffer,\n                    Buffer.from(pcmBuffer.buffer),\n                ]);\n\n                wavStream = Readable.from(wavBuffer);\n            } else {\n                throw new Error(\"Unsupported audio format\");\n            }\n            return wavStream;\n        }\n        throw error; // Re-throw other errors\n    }\n}\n\nasync function processVitsAudio(audio: any): Promise<Readable> {\n    let wavStream: Readable;\n    if (audio instanceof Buffer) {\n        console.log(\"audio is a buffer\");\n        wavStream = Readable.from(audio);\n    } else if (\"audioChannels\" in audio && \"sampleRate\" in audio) {\n        console.log(\"audio is a RawAudio\");\n        const floatBuffer = Buffer.from(audio.audioChannels[0].buffer);\n        console.log(\"buffer length: \", floatBuffer.length);\n\n        const sampleRate = audio.sampleRate;\n        const floatArray = new Float32Array(floatBuffer.buffer);\n        const pcmBuffer = new Int16Array(floatArray.length);\n\n        for (let i = 0; i < floatArray.length; i++) {\n            pcmBuffer[i] = Math.round(floatArray[i] * 32767);\n        }\n\n        const wavHeaderBuffer = getWavHeader(\n            pcmBuffer.length * 2,\n            sampleRate,\n            1,\n            16\n        );\n        const wavBuffer = Buffer.concat([\n            wavHeaderBuffer,\n            Buffer.from(pcmBuffer.buffer),\n        ]);\n        wavStream = Readable.from(wavBuffer);\n    } else {\n        throw new Error(\"Unsupported audio format\");\n    }\n    return wavStream;\n}\n\nasync function generateVitsAudio(\n    runtime: IAgentRuntime,\n    text: string\n): Promise<Readable> {\n    const { vitsVoice } = await getVoiceSettings(runtime);\n    const { audio } = await Echogarden.synthesize(text, {\n        engine: \"vits\",\n        voice: vitsVoice,\n    });\n    return processVitsAudio(audio);\n}\n\nexport class SpeechService extends Service implements ISpeechService {\n    static serviceType: ServiceType = ServiceType.SPEECH_GENERATION;\n\n    async initialize(_runtime: IAgentRuntime): Promise<void> {}\n\n    getInstance(): ISpeechService {\n        return SpeechService.getInstance();\n    }\n\n    async generate(runtime: IAgentRuntime, text: string): Promise<Readable> {\n        try {\n            const { useVits } = await getVoiceSettings(runtime);\n\n            if (useVits || !runtime.getSetting(\"ELEVENLABS_XI_API_KEY\")) {\n                return await generateVitsAudio(runtime, text);\n            }\n\n            return await textToSpeech(runtime, text);\n        } catch (error) {\n            console.error(\"Speech generation error:\", error);\n            return await generateVitsAudio(runtime, text);\n        }\n    }\n}\n","export function getWavHeader(\n    audioLength: number,\n    sampleRate: number,\n    channelCount: number = 1,\n    bitsPerSample: number = 16\n): Buffer {\n    const wavHeader = Buffer.alloc(44);\n    wavHeader.write(\"RIFF\", 0);\n    wavHeader.writeUInt32LE(36 + audioLength, 4); // Length of entire file in bytes minus 8\n    wavHeader.write(\"WAVE\", 8);\n    wavHeader.write(\"fmt \", 12);\n    wavHeader.writeUInt32LE(16, 16); // Length of format data\n    wavHeader.writeUInt16LE(1, 20); // Type of format (1 is PCM)\n    wavHeader.writeUInt16LE(channelCount, 22); // Number of channels\n    wavHeader.writeUInt32LE(sampleRate, 24); // Sample rate\n    wavHeader.writeUInt32LE(\n        (sampleRate * bitsPerSample * channelCount) / 8,\n        28\n    ); // Byte rate\n    wavHeader.writeUInt16LE((bitsPerSample * channelCount) / 8, 32); // Block align ((BitsPerSample * Channels) / 8)\n    wavHeader.writeUInt16LE(bitsPerSample, 34); // Bits per sample\n    wavHeader.write(\"data\", 36); // Data chunk header\n    wavHeader.writeUInt32LE(audioLength, 40); // Data chunk size\n    return wavHeader;\n}\n","import { IAgentRuntime } from \"@ai16z/eliza\";\nimport { z } from \"zod\";\n\nexport const nodeEnvSchema = z.object({\n    OPENAI_API_KEY: z.string().min(1, \"OpenAI API key is required\"),\n\n    // Core settings\n    ELEVENLABS_XI_API_KEY: z.string().optional(),\n\n    // All other settings optional with defaults\n    ELEVENLABS_MODEL_ID: z.string().optional(),\n    ELEVENLABS_VOICE_ID: z.string().optional(),\n    ELEVENLABS_VOICE_STABILITY: z.string().optional(),\n    ELEVENLABS_VOICE_SIMILARITY_BOOST: z.string().optional(),\n    ELEVENLABS_VOICE_STYLE: z.string().optional(),\n    ELEVENLABS_VOICE_USE_SPEAKER_BOOST: z.string().optional(),\n    ELEVENLABS_OPTIMIZE_STREAMING_LATENCY: z.string().optional(),\n    ELEVENLABS_OUTPUT_FORMAT: z.string().optional(),\n    VITS_VOICE: z.string().optional(),\n    VITS_MODEL: z.string().optional(),\n});\n\nexport type NodeConfig = z.infer<typeof nodeEnvSchema>;\n\nexport async function validateNodeConfig(\n    runtime: IAgentRuntime\n): Promise<NodeConfig> {\n    try {\n        const voiceSettings = runtime.character.settings?.voice;\n        const elevenlabs = voiceSettings?.elevenlabs;\n\n        // Only include what's absolutely required\n        const config = {\n            OPENAI_API_KEY:\n                runtime.getSetting(\"OPENAI_API_KEY\") ||\n                process.env.OPENAI_API_KEY,\n            ELEVENLABS_XI_API_KEY:\n                runtime.getSetting(\"ELEVENLABS_XI_API_KEY\") ||\n                process.env.ELEVENLABS_XI_API_KEY,\n\n            // Use character card settings first, fall back to env vars, then defaults\n            ...(runtime.getSetting(\"ELEVENLABS_XI_API_KEY\") && {\n                ELEVENLABS_MODEL_ID:\n                    elevenlabs?.model ||\n                    process.env.ELEVENLABS_MODEL_ID ||\n                    \"eleven_monolingual_v1\",\n                ELEVENLABS_VOICE_ID:\n                    elevenlabs?.voiceId || process.env.ELEVENLABS_VOICE_ID,\n                ELEVENLABS_VOICE_STABILITY:\n                    elevenlabs?.stability ||\n                    process.env.ELEVENLABS_VOICE_STABILITY ||\n                    \"0.5\",\n                ELEVENLABS_VOICE_SIMILARITY_BOOST:\n                    elevenlabs?.similarityBoost ||\n                    process.env.ELEVENLABS_VOICE_SIMILARITY_BOOST ||\n                    \"0.75\",\n                ELEVENLABS_VOICE_STYLE:\n                    elevenlabs?.style ||\n                    process.env.ELEVENLABS_VOICE_STYLE ||\n                    \"0\",\n                ELEVENLABS_VOICE_USE_SPEAKER_BOOST:\n                    elevenlabs?.useSpeakerBoost ||\n                    process.env.ELEVENLABS_VOICE_USE_SPEAKER_BOOST ||\n                    \"true\",\n                ELEVENLABS_OPTIMIZE_STREAMING_LATENCY:\n                    process.env.ELEVENLABS_OPTIMIZE_STREAMING_LATENCY || \"0\",\n                ELEVENLABS_OUTPUT_FORMAT:\n                    process.env.ELEVENLABS_OUTPUT_FORMAT || \"pcm_16000\",\n            }),\n\n            // VITS settings\n            VITS_VOICE: voiceSettings?.model || process.env.VITS_VOICE,\n            VITS_MODEL: process.env.VITS_MODEL,\n\n            // AWS settings (only include if present)\n            ...(runtime.getSetting(\"AWS_ACCESS_KEY_ID\") && {\n                AWS_ACCESS_KEY_ID: runtime.getSetting(\"AWS_ACCESS_KEY_ID\"),\n                AWS_SECRET_ACCESS_KEY: runtime.getSetting(\"AWS_SECRET_ACCESS_KEY\"),\n                AWS_REGION: runtime.getSetting(\"AWS_REGION\"),\n                AWS_S3_BUCKET: runtime.getSetting(\"AWS_S3_BUCKET\"),\n                AWS_S3_UPLOAD_PATH: runtime.getSetting(\"AWS_S3_UPLOAD_PATH\"),\n            }),\n        };\n\n        return nodeEnvSchema.parse(config);\n    } catch (error) {\n        if (error instanceof z.ZodError) {\n            const errorMessages = error.errors\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\n                .join(\"\\n\");\n            throw new Error(\n                `Node configuration validation failed:\\n${errorMessages}`\n            );\n        }\n        throw error;\n    }\n}\n","import {\n    elizaLogger,\n    IAgentRuntime,\n    ITranscriptionService,\n    settings,\n} from \"@ai16z/eliza\";\nimport { Service, ServiceType } from \"@ai16z/eliza\";\nimport { exec } from \"child_process\";\nimport { File } from \"formdata-node\";\nimport fs from \"fs\";\nimport { nodewhisper } from \"nodejs-whisper\";\nimport OpenAI from \"openai\"; // todo, can probably move this to model provider or whateer\nimport os from \"os\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { promisify } from \"util\";\nimport { createClient, DeepgramClient } from \"@deepgram/sdk\";\n\n// const __dirname = path.dirname(new URL(import.meta.url).pathname); #compatibility issues with windows\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst execAsync = promisify(exec);\n\nexport class TranscriptionService\n    extends Service\n    implements ITranscriptionService\n{\n    private runtime: IAgentRuntime | null = null;\n    static serviceType: ServiceType = ServiceType.TRANSCRIPTION;\n    private CONTENT_CACHE_DIR: string;\n    private DEBUG_AUDIO_DIR: string;\n    private TARGET_SAMPLE_RATE = 16000; // Common sample rate for speech recognition\n    private isCudaAvailable: boolean = false;\n    private openai: OpenAI | null = null;\n    private deepgram?: DeepgramClient;\n\n    private queue: { audioBuffer: ArrayBuffer; resolve: Function }[] = [];\n    private processing: boolean = false;\n\n    async initialize(_runtime: IAgentRuntime): Promise<void> {\n        this.runtime = _runtime;\n        const deepgramKey = this.runtime.getSetting(\"DEEPGRAM_API_KEY\");\n        this.deepgram = deepgramKey ? createClient(deepgramKey) : null;\n    }\n\n    constructor() {\n        super();\n        const rootDir = path.resolve(__dirname, \"../../\");\n        this.CONTENT_CACHE_DIR = path.join(rootDir, \"content_cache\");\n        this.DEBUG_AUDIO_DIR = path.join(rootDir, \"debug_audio\");\n        this.ensureCacheDirectoryExists();\n        this.ensureDebugDirectoryExists();\n        // TODO: It'd be nice to handle this more gracefully, but we can do local transcription for now\n        // TODO: remove the runtime from here, use it when called\n        // if (runtime.getSetting(\"OPENAI_API_KEY\")) {\n        //     this.openai = new OpenAI({\n        //         apiKey: runtime.getSetting(\"OPENAI_API_KEY\"),\n        //     });\n        // } else {\n        //     this.detectCuda();\n        // }\n    }\n\n    private ensureCacheDirectoryExists() {\n        if (!fs.existsSync(this.CONTENT_CACHE_DIR)) {\n            fs.mkdirSync(this.CONTENT_CACHE_DIR, { recursive: true });\n        }\n    }\n\n    private ensureDebugDirectoryExists() {\n        if (!fs.existsSync(this.DEBUG_AUDIO_DIR)) {\n            fs.mkdirSync(this.DEBUG_AUDIO_DIR, { recursive: true });\n        }\n    }\n\n    private detectCuda() {\n        const platform = os.platform();\n        if (platform === \"linux\") {\n            try {\n                fs.accessSync(\"/usr/local/cuda/bin/nvcc\", fs.constants.X_OK);\n                this.isCudaAvailable = true;\n                console.log(\n                    \"CUDA detected. Transcription will use CUDA acceleration.\"\n                );\n                // eslint-disable-next-line\n            } catch (_error) {\n                console.log(\n                    \"CUDA not detected. Transcription will run on CPU.\"\n                );\n            }\n        } else if (platform === \"win32\") {\n            const cudaPath = path.join(\n                settings.CUDA_PATH ||\n                    \"C:\\\\Program Files\\\\NVIDIA GPU Computing Toolkit\\\\CUDA\\\\v11.0\",\n                \"bin\",\n                \"nvcc.exe\"\n            );\n            if (fs.existsSync(cudaPath)) {\n                this.isCudaAvailable = true;\n                console.log(\n                    \"CUDA detected. Transcription will use CUDA acceleration.\"\n                );\n            } else {\n                console.log(\n                    \"CUDA not detected. Transcription will run on CPU.\"\n                );\n            }\n        } else {\n            console.log(\n                \"CUDA not supported on this platform. Transcription will run on CPU.\"\n            );\n        }\n    }\n\n    private async convertAudio(inputBuffer: ArrayBuffer): Promise<Buffer> {\n        const inputPath = path.join(\n            this.CONTENT_CACHE_DIR,\n            `input_${Date.now()}.wav`\n        );\n        const outputPath = path.join(\n            this.CONTENT_CACHE_DIR,\n            `output_${Date.now()}.wav`\n        );\n\n        fs.writeFileSync(inputPath, Buffer.from(inputBuffer));\n\n        try {\n            const { stdout } = await execAsync(\n                `ffprobe -v error -show_entries stream=codec_name,sample_rate,channels -of json \"${inputPath}\"`\n            );\n            const probeResult = JSON.parse(stdout);\n            const stream = probeResult.streams[0];\n\n            elizaLogger.log(\"Input audio info:\", stream);\n\n            let ffmpegCommand = `ffmpeg -i \"${inputPath}\" -ar ${this.TARGET_SAMPLE_RATE} -ac 1`;\n\n            if (stream.codec_name === \"pcm_f32le\") {\n                ffmpegCommand += \" -acodec pcm_s16le\";\n            }\n\n            ffmpegCommand += ` \"${outputPath}\"`;\n\n            elizaLogger.log(\"FFmpeg command:\", ffmpegCommand);\n\n            await execAsync(ffmpegCommand);\n\n            const convertedBuffer = fs.readFileSync(outputPath);\n            fs.unlinkSync(inputPath);\n            fs.unlinkSync(outputPath);\n            return convertedBuffer;\n        } catch (error) {\n            elizaLogger.error(\"Error converting audio:\", error);\n            throw error;\n        }\n    }\n\n    private async saveDebugAudio(audioBuffer: ArrayBuffer, prefix: string) {\n        this.ensureDebugDirectoryExists();\n\n        const filename = `${prefix}_${Date.now()}.wav`;\n        const filePath = path.join(this.DEBUG_AUDIO_DIR, filename);\n\n        fs.writeFileSync(filePath, Buffer.from(audioBuffer));\n        elizaLogger.log(`Debug audio saved: ${filePath}`);\n    }\n\n    public async transcribeAttachment(\n        audioBuffer: ArrayBuffer\n    ): Promise<string | null> {\n        return await this.transcribe(audioBuffer);\n    }\n\n    public async transcribe(audioBuffer: ArrayBuffer): Promise<string | null> {\n        // if the audio buffer is less than .2 seconds, just return null\n        if (audioBuffer.byteLength < 0.2 * 16000) {\n            return null;\n        }\n        return new Promise((resolve) => {\n            this.queue.push({ audioBuffer, resolve });\n            if (!this.processing) {\n                this.processQueue();\n            }\n        });\n    }\n\n    public async transcribeAttachmentLocally(\n        audioBuffer: ArrayBuffer\n    ): Promise<string | null> {\n        return this.transcribeLocally(audioBuffer);\n    }\n\n    private async processQueue(): Promise<void> {\n        if (this.processing || this.queue.length === 0) {\n            return;\n        }\n\n        this.processing = true;\n\n        while (this.queue.length > 0) {\n            const { audioBuffer, resolve } = this.queue.shift()!;\n            let result: string | null = null;\n            if (this.deepgram) {\n                result = await this.transcribeWithDeepgram(audioBuffer);\n            } else if (this.openai) {\n                result = await this.transcribeWithOpenAI(audioBuffer);\n            } else {\n                result = await this.transcribeLocally(audioBuffer);\n            }\n\n            resolve(result);\n        }\n\n        this.processing = false;\n    }\n\n    private async transcribeWithDeepgram(\n        audioBuffer: ArrayBuffer\n    ): Promise<string | null> {\n        const buffer = Buffer.from(audioBuffer);\n        const response = await this.deepgram.listen.prerecorded.transcribeFile(\n            buffer,\n            {\n                model: \"nova-2\",\n                language: \"en-US\",\n                smart_format: true,\n            }\n        );\n        const result =\n            response.result.results.channels[0].alternatives[0].transcript;\n        return result;\n    }\n\n    private async transcribeWithOpenAI(\n        audioBuffer: ArrayBuffer\n    ): Promise<string | null> {\n        elizaLogger.log(\"Transcribing audio with OpenAI...\");\n\n        try {\n            await this.saveDebugAudio(audioBuffer, \"openai_input_original\");\n\n            const convertedBuffer = await this.convertAudio(audioBuffer);\n\n            await this.saveDebugAudio(\n                convertedBuffer,\n                \"openai_input_converted\"\n            );\n\n            const file = new File([convertedBuffer], \"audio.wav\", {\n                type: \"audio/wav\",\n            });\n\n            const result = await this.openai!.audio.transcriptions.create({\n                model: \"whisper-1\",\n                language: \"en\",\n                response_format: \"text\",\n                file: file,\n            });\n\n            const trimmedResult = (result as any).trim();\n            elizaLogger.log(`OpenAI speech to text result: \"${trimmedResult}\"`);\n\n            return trimmedResult;\n        } catch (error) {\n            elizaLogger.error(\n                \"Error in OpenAI speech-to-text conversion:\",\n                error\n            );\n            if (error.response) {\n                elizaLogger.error(\"Response data:\", error.response.data);\n                elizaLogger.error(\"Response status:\", error.response.status);\n                elizaLogger.error(\"Response headers:\", error.response.headers);\n            } else if (error.request) {\n                elizaLogger.error(\"No response received:\", error.request);\n            } else {\n                elizaLogger.error(\"Error setting up request:\", error.message);\n            }\n            return null;\n        }\n    }\n\n    public async transcribeLocally(\n        audioBuffer: ArrayBuffer\n    ): Promise<string | null> {\n        try {\n            elizaLogger.log(\"Transcribing audio locally...\");\n\n            await this.saveDebugAudio(audioBuffer, \"local_input_original\");\n\n            const convertedBuffer = await this.convertAudio(audioBuffer);\n\n            await this.saveDebugAudio(convertedBuffer, \"local_input_converted\");\n\n            const tempWavFile = path.join(\n                this.CONTENT_CACHE_DIR,\n                `temp_${Date.now()}.wav`\n            );\n            fs.writeFileSync(tempWavFile, convertedBuffer);\n\n            elizaLogger.debug(`Temporary WAV file created: ${tempWavFile}`);\n\n            let output = await nodewhisper(tempWavFile, {\n                modelName: \"base.en\",\n                autoDownloadModelName: \"base.en\",\n                verbose: false,\n                removeWavFileAfterTranscription: false,\n                withCuda: this.isCudaAvailable,\n                whisperOptions: {\n                    outputInText: true,\n                    outputInVtt: false,\n                    outputInSrt: false,\n                    outputInCsv: false,\n                    translateToEnglish: false,\n                    wordTimestamps: false,\n                    timestamps_length: 60,\n                    // splitOnWord: true,\n                },\n            });\n\n            output = output\n                .split(\"\\n\")\n                .map((line) => {\n                    if (line.trim().startsWith(\"[\")) {\n                        const endIndex = line.indexOf(\"]\");\n                        return line.substring(endIndex + 1);\n                    }\n                    return line;\n                })\n                .join(\"\\n\");\n\n            fs.unlinkSync(tempWavFile);\n\n            if (!output || output.length < 5) {\n                elizaLogger.log(\"Output is null or too short, returning null\");\n                return null;\n            }\n            return output;\n        } catch (error) {\n            elizaLogger.error(\n                \"Error in local speech-to-text conversion:\",\n                error\n            );\n            return null;\n        }\n    }\n}\n","export class DeepgramError extends Error {\n  protected __dgError = true;\n\n  constructor(message: string) {\n    super(message);\n    this.name = \"DeepgramError\";\n  }\n}\n\nexport function isDeepgramError(error: unknown): error is DeepgramError {\n  return typeof error === \"object\" && error !== null && \"__dgError\" in error;\n}\n\nexport class DeepgramApiError extends DeepgramError {\n  status: number;\n\n  constructor(message: string, status: number) {\n    super(message);\n    this.name = \"DeepgramApiError\";\n    this.status = status;\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      status: this.status,\n    };\n  }\n}\n\nexport class DeepgramUnknownError extends DeepgramError {\n  originalError: unknown;\n\n  constructor(message: string, originalError: unknown) {\n    super(message);\n    this.name = \"DeepgramUnknownError\";\n    this.originalError = originalError;\n  }\n}\n\nexport class DeepgramVersionError extends DeepgramError {\n  constructor() {\n    super(\n      `You are attempting to use an old format for a newer SDK version. Read more here: https://dpgr.am/js-v3`\n    );\n\n    this.name = \"DeepgramVersionError\";\n  }\n}\n","import { EventEmitter } from \"events\";\nimport { DEFAULT_OPTIONS, DEFAULT_URL } from \"../lib/constants\";\nimport { DeepgramError } from \"../lib/errors\";\nimport { appendSearchParams, applyDefaults, convertLegacyOptions } from \"../lib/helpers\";\nimport type {\n  DeepgramClientOptions,\n  DefaultClientOptions,\n  DefaultNamespaceOptions,\n  NamespaceOptions,\n} from \"../lib/types\";\n\nexport const noop = () => {};\n\n/**\n * Represents an abstract Deepgram client that provides a base implementation for interacting with the Deepgram API.\n *\n * The `AbstractClient` class is responsible for:\n * - Initializing the Deepgram API key\n * - Applying default options for the client and namespace\n * - Providing a namespace for organizing API requests\n *\n * Subclasses of `AbstractClient` should implement the specific functionality for interacting with the Deepgram API.\n */\nexport abstract class AbstractClient extends EventEmitter {\n  protected factory: Function | undefined = undefined;\n  protected key: string;\n  protected options: DefaultClientOptions;\n  public namespace: string = \"global\";\n  public version: string = \"v1\";\n  public baseUrl: string = DEFAULT_URL;\n  public logger: Function = noop;\n\n  /**\n   * Constructs a new instance of the DeepgramClient class with the provided options.\n   *\n   * @param options - The options to configure the DeepgramClient instance.\n   * @param options.key - The Deepgram API key to use for authentication. If not provided, the `DEEPGRAM_API_KEY` environment variable will be used.\n   * @param options.global - Global options that apply to all requests made by the DeepgramClient instance.\n   * @param options.global.fetch - Options to configure the fetch requests made by the DeepgramClient instance.\n   * @param options.global.fetch.options - Additional options to pass to the fetch function, such as `url` and `headers`.\n   * @param options.namespace - Options specific to a particular namespace within the DeepgramClient instance.\n   */\n  constructor(options: DeepgramClientOptions) {\n    super();\n\n    let key;\n\n    if (typeof options.key === \"function\") {\n      this.factory = options.key;\n      key = this.factory();\n    } else {\n      key = options.key;\n    }\n\n    if (!key) {\n      key = process.env.DEEPGRAM_API_KEY as string;\n    }\n\n    if (!key) {\n      throw new DeepgramError(\"A deepgram API key is required.\");\n    }\n\n    this.key = key;\n\n    options = convertLegacyOptions(options);\n\n    /**\n     * Apply default options.\n     */\n    this.options = applyDefaults<DeepgramClientOptions, DefaultClientOptions>(\n      options,\n      DEFAULT_OPTIONS\n    );\n  }\n\n  /**\n   * Sets the version for the current instance of the Deepgram API and returns the instance.\n   *\n   * @param version - The version to set for the Deepgram API instance. Defaults to \"v1\" if not provided.\n   * @returns The current instance of the AbstractClient with the updated version.\n   */\n  public v(version: string = \"v1\"): this {\n    this.version = version;\n\n    return this;\n  }\n\n  /**\n   * Gets the namespace options for the current instance of the AbstractClient.\n   * The namespace options include the default options merged with the global options,\n   * and the API key for the current instance.\n   *\n   * @returns The namespace options for the current instance.\n   */\n  get namespaceOptions(): DefaultNamespaceOptions {\n    const defaults = applyDefaults<NamespaceOptions, DefaultNamespaceOptions>(\n      (this.options as any)[this.namespace],\n      this.options.global\n    );\n\n    return {\n      ...defaults,\n      key: this.key,\n    };\n  }\n\n  /**\n   * Generates a URL for an API endpoint with optional query parameters and transcription options.\n   *\n   * @param endpoint - The API endpoint URL, which may contain placeholders for fields.\n   * @param fields - An optional object containing key-value pairs to replace placeholders in the endpoint URL.\n   * @param transcriptionOptions - Optional transcription options to include as query parameters in the URL.\n   * @returns A URL object representing the constructed API request URL.\n   */\n  public getRequestUrl(\n    endpoint: string,\n    fields: { [key: string]: string } = { version: this.version },\n    transcriptionOptions?: {\n      [key: string]: unknown;\n    }\n  ): URL {\n    /**\n     * If we pass in fields without a version, set a version.\n     */\n    fields.version = this.version;\n\n    /**\n     * Version and template the endpoint for input argument..\n     */\n    endpoint = endpoint.replace(/:(\\w+)/g, function (_, key) {\n      return fields![key];\n    });\n\n    /**\n     * Create a URL object.\n     */\n    const url = new URL(endpoint as string, this.baseUrl);\n\n    /**\n     * If there are transcription options, append them to the request as URL querystring parameters\n     */\n    if (transcriptionOptions) {\n      appendSearchParams(url.searchParams, transcriptionOptions);\n    }\n\n    return url;\n  }\n\n  /**\n   * Logs the message.\n   *\n   * For customized logging, `this.logger` can be overridden.\n   */\n  public log(kind: string, msg: string, data?: any) {\n    this.logger(kind, msg, data);\n  }\n}\n","import {\n  DeepgramClientOptions,\n  FileSource,\n  PrerecordedSource,\n  UrlSource,\n  TextSource,\n  AnalyzeSource,\n  LiveSchema,\n  TranscriptionSchema,\n} from \"./types\";\nimport { Headers as CrossFetchHeaders } from \"cross-fetch\";\nimport { Readable } from \"stream\";\nimport merge from \"deepmerge\";\nimport { BROWSER_AGENT, BUN_VERSION, NODE_VERSION } from \"./constants\";\n\nexport function stripTrailingSlash(url: string): string {\n  return url.replace(/\\/$/, \"\");\n}\n\nexport const isBrowser = () => BROWSER_AGENT !== \"unknown\";\n\nexport const isNode = () => NODE_VERSION !== \"unknown\";\n\nexport const isBun = () => BUN_VERSION !== \"unknown\";\n\nexport function applyDefaults<O, S>(options: Partial<O> = {}, subordinate: Partial<S> = {}): S {\n  return merge(subordinate, options);\n}\n\nexport function appendSearchParams(\n  searchParams: URLSearchParams,\n  options: Record<string, unknown>\n): void {\n  Object.keys(options).forEach((i) => {\n    if (Array.isArray(options[i])) {\n      const arrayParams = options[i] as Array<any>;\n      arrayParams.forEach((param) => {\n        searchParams.append(i, String(param));\n      });\n    } else {\n      searchParams.append(i, String(options[i]));\n    }\n  });\n}\n\nexport const resolveHeadersConstructor = () => {\n  if (typeof Headers === \"undefined\") {\n    return CrossFetchHeaders;\n  }\n\n  return Headers;\n};\n\nexport const isUrlSource = (\n  providedSource: PrerecordedSource | AnalyzeSource\n): providedSource is UrlSource => {\n  if ((providedSource as UrlSource).url) return true;\n\n  return false;\n};\n\nexport const isTextSource = (\n  providedSource: PrerecordedSource | AnalyzeSource\n): providedSource is TextSource => {\n  if ((providedSource as TextSource).text) return true;\n\n  return false;\n};\n\nexport const isFileSource = (providedSource: PrerecordedSource): providedSource is FileSource => {\n  if (isReadStreamSource(providedSource) || isBufferSource(providedSource)) return true;\n\n  return false;\n};\n\nconst isBufferSource = (providedSource: PrerecordedSource): providedSource is Buffer => {\n  if (providedSource as Buffer) return true;\n\n  return false;\n};\n\nconst isReadStreamSource = (providedSource: PrerecordedSource): providedSource is Readable => {\n  if (providedSource as Readable) return true;\n\n  return false;\n};\n\nexport class CallbackUrl extends URL {\n  public callbackUrl = true;\n}\n\nexport const convertProtocolToWs = (url: string) => {\n  const convert = (string: string) => string.toLowerCase().replace(/^http/, \"ws\");\n\n  return convert(url);\n};\n\nexport const buildRequestUrl = (\n  endpoint: string,\n  baseUrl: string | URL,\n  transcriptionOptions: LiveSchema | TranscriptionSchema\n): URL => {\n  const url = new URL(endpoint, baseUrl);\n  appendSearchParams(url.searchParams, transcriptionOptions);\n\n  return url;\n};\n\nexport function isLiveSchema(arg: any): arg is LiveSchema {\n  return arg && typeof arg.interim_results !== \"undefined\";\n}\n\nexport function isDeepgramClientOptions(arg: any): arg is DeepgramClientOptions {\n  return arg && typeof arg.global !== \"undefined\";\n}\n\nexport const convertLegacyOptions = (optionsArg: DeepgramClientOptions): DeepgramClientOptions => {\n  const newOptions: DeepgramClientOptions = {};\n\n  if (optionsArg._experimentalCustomFetch) {\n    newOptions.global = {\n      fetch: {\n        client: optionsArg._experimentalCustomFetch,\n      },\n    };\n  }\n\n  optionsArg = merge(optionsArg, newOptions);\n\n  if (optionsArg.restProxy?.url) {\n    newOptions.global = {\n      fetch: {\n        options: {\n          proxy: {\n            url: optionsArg.restProxy?.url,\n          },\n        },\n      },\n    };\n  }\n\n  optionsArg = merge(optionsArg, newOptions);\n\n  if (optionsArg.global?.url) {\n    newOptions.global = {\n      fetch: {\n        options: {\n          url: optionsArg.global.url,\n        },\n      },\n      websocket: {\n        options: {\n          url: optionsArg.global.url,\n        },\n      },\n    };\n  }\n\n  optionsArg = merge(optionsArg, newOptions);\n\n  if (optionsArg.global?.headers) {\n    newOptions.global = {\n      fetch: {\n        options: {\n          headers: optionsArg.global?.headers,\n        },\n      },\n      websocket: {\n        options: {\n          _nodeOnlyHeaders: optionsArg.global?.headers,\n        },\n      },\n    };\n  }\n\n  optionsArg = merge(optionsArg, newOptions);\n\n  return optionsArg;\n};\n","export const version = \"3.9.0\";\n","import { convertProtocolToWs, isBrowser, isBun, isNode } from \"./helpers\";\nimport { version } from \"./version\";\nimport type { DefaultNamespaceOptions, DefaultClientOptions } from \"./types\";\n\nexport const NODE_VERSION =\n  typeof process !== \"undefined\" && process.versions && process.versions.node\n    ? process.versions.node\n    : \"unknown\";\n\nexport const BUN_VERSION =\n  typeof process !== \"undefined\" && process.versions && process.versions.bun\n    ? process.versions.bun\n    : \"unknown\";\n\nexport const BROWSER_AGENT =\n  typeof window !== \"undefined\" && window.navigator && window.navigator.userAgent\n    ? window.navigator.userAgent\n    : \"unknown\";\n\nconst getAgent = () => {\n  if (isNode()) {\n    return `node/${NODE_VERSION}`;\n  } else if (isBun()) {\n    return `bun/${BUN_VERSION}`;\n  } else if (isBrowser()) {\n    return `javascript ${BROWSER_AGENT}`;\n  } else {\n    return `unknown`;\n  }\n};\n\nexport const DEFAULT_HEADERS = {\n  \"Content-Type\": `application/json`,\n  \"X-Client-Info\": `@deepgram/sdk; ${isBrowser() ? \"browser\" : \"server\"}; v${version}`,\n  \"User-Agent\": `@deepgram/sdk/${version} ${getAgent()}`,\n};\n\nexport const DEFAULT_URL = \"https://api.deepgram.com\";\n\nexport const DEFAULT_GLOBAL_OPTIONS: Partial<DefaultNamespaceOptions> = {\n  fetch: { options: { url: DEFAULT_URL, headers: DEFAULT_HEADERS } },\n  websocket: {\n    options: { url: convertProtocolToWs(DEFAULT_URL), _nodeOnlyHeaders: DEFAULT_HEADERS },\n  },\n};\n\nexport const DEFAULT_OPTIONS: DefaultClientOptions = {\n  global: DEFAULT_GLOBAL_OPTIONS,\n};\n\nexport enum SOCKET_STATES {\n  connecting = 0,\n  open = 1,\n  closing = 2,\n  closed = 3,\n}\n\nexport enum CONNECTION_STATE {\n  Connecting = \"connecting\",\n  Open = \"open\",\n  Closing = \"closing\",\n  Closed = \"closed\",\n}\n","import { AbstractClient, noop } from \"./AbstractClient\";\nimport { CONNECTION_STATE, SOCKET_STATES } from \"../lib/constants\";\nimport type { DeepgramClientOptions, LiveSchema } from \"../lib/types\";\nimport type { WebSocket as WSWebSocket } from \"ws\";\nimport { isBun } from \"../lib/helpers\";\n\n/**\n * Represents a constructor for a WebSocket-like object that can be used in the application.\n * The constructor takes the following parameters:\n * @param address - The URL or address of the WebSocket server.\n * @param _ignored - An optional parameter that is ignored.\n * @param options - An optional object containing headers to be included in the WebSocket connection.\n * @returns A WebSocket-like object that implements the WebSocketLike interface.\n */\ninterface WebSocketLikeConstructor {\n  new (\n    address: string | URL,\n    _ignored?: any,\n    options?: { headers: object | undefined }\n  ): WebSocketLike;\n}\n\n/**\n * Represents the types of WebSocket-like connections that can be used in the application.\n * This type is used to provide a common interface for different WebSocket implementations,\n * such as the native WebSocket API, a WebSocket wrapper library, or a dummy implementation\n * for testing purposes.\n */\ntype WebSocketLike = WebSocket | WSWebSocket | WSWebSocketDummy;\n\n/**\n * Represents the types of data that can be sent or received over a WebSocket-like connection.\n */\ntype SocketDataLike = string | ArrayBufferLike | Blob;\n\n/**\n * Represents an error that occurred in a WebSocket-like connection.\n * @property {any} error - The underlying error object.\n * @property {string} message - A human-readable error message.\n * @property {string} type - The type of the error.\n */\n// interface WebSocketLikeError {\n//   error: any;\n//   message: string;\n//   type: string;\n// }\n\n/**\n * Indicates whether a native WebSocket implementation is available in the current environment.\n */\nconst NATIVE_WEBSOCKET_AVAILABLE = typeof WebSocket !== \"undefined\";\n\n/**\n * Represents an abstract live client that extends the AbstractClient class.\n * The AbstractLiveClient class provides functionality for connecting, reconnecting, and disconnecting a WebSocket connection, as well as sending data over the connection.\n * Subclasses of this class are responsible for setting up the connection event handlers.\n *\n * @abstract\n */\nexport abstract class AbstractLiveClient extends AbstractClient {\n  public headers: { [key: string]: string };\n  public transport: WebSocketLikeConstructor | null;\n  public conn: WebSocketLike | null = null;\n  public sendBuffer: Function[] = [];\n\n  constructor(options: DeepgramClientOptions) {\n    super(options);\n\n    const {\n      key,\n      websocket: { options: websocketOptions, client },\n    } = this.namespaceOptions;\n\n    if (this.proxy) {\n      this.baseUrl = websocketOptions.proxy!.url;\n    } else {\n      this.baseUrl = websocketOptions.url;\n    }\n\n    if (client) {\n      this.transport = client;\n    } else {\n      this.transport = null;\n    }\n\n    if (websocketOptions._nodeOnlyHeaders) {\n      this.headers = websocketOptions._nodeOnlyHeaders;\n    } else {\n      this.headers = {};\n    }\n\n    if (!(\"Authorization\" in this.headers)) {\n      this.headers[\"Authorization\"] = `Token ${key}`; // Add default token\n    }\n  }\n\n  /**\n   * Connects the socket, unless already connected.\n   *\n   * @protected Can only be called from within the class.\n   */\n  protected connect(transcriptionOptions: LiveSchema, endpoint: string): void {\n    if (this.conn) {\n      return;\n    }\n\n    this.reconnect = (options = transcriptionOptions) => {\n      this.connect(options, endpoint);\n    };\n\n    const requestUrl = this.getRequestUrl(endpoint, {}, transcriptionOptions);\n\n    /**\n     * Custom websocket transport\n     */\n    if (this.transport) {\n      this.conn = new this.transport(requestUrl, undefined, {\n        headers: this.headers,\n      });\n      return;\n    }\n\n    /**\n     * @summary Bun websocket transport has a bug where it's native WebSocket implementation messes up the headers\n     * @summary This is a workaround to use the WS package for the websocket connection instead of the native Bun WebSocket\n     * @summary you can track the issue here\n     * @link https://github.com/oven-sh/bun/issues/4529\n     */\n    if (isBun()) {\n      import(\"ws\").then(({ default: WS }) => {\n        this.conn = new WS(requestUrl, {\n          headers: this.headers,\n        });\n        console.log(`Using WS package`);\n        this.setupConnection();\n      });\n      return;\n    }\n\n    /**\n     * Native websocket transport (browser)\n     */\n    if (NATIVE_WEBSOCKET_AVAILABLE) {\n      this.conn = new WebSocket(requestUrl, [\"token\", this.namespaceOptions.key]);\n      this.setupConnection();\n      return;\n    }\n\n    /**\n     * Dummy websocket\n     */\n    this.conn = new WSWebSocketDummy(requestUrl, undefined, {\n      close: () => {\n        this.conn = null;\n      },\n    });\n\n    /**\n     * WS package for node environment\n     */\n    import(\"ws\").then(({ default: WS }) => {\n      this.conn = new WS(requestUrl, undefined, {\n        headers: this.headers,\n      });\n      this.setupConnection();\n    });\n  }\n\n  /**\n   * Reconnects the socket using new or existing transcription options.\n   *\n   * @param options - The transcription options to use when reconnecting the socket.\n   */\n  public reconnect: (options: LiveSchema) => void = noop;\n\n  /**\n   * Disconnects the socket from the client.\n   *\n   * @param code A numeric status code to send on disconnect.\n   * @param reason A custom reason for the disconnect.\n   */\n  public disconnect(code?: number, reason?: string): void {\n    if (this.conn) {\n      this.conn.onclose = function () {}; // noop\n      if (code) {\n        this.conn.close(code, reason ?? \"\");\n      } else {\n        this.conn.close();\n      }\n      this.conn = null;\n    }\n  }\n\n  /**\n   * Returns the current connection state of the WebSocket connection.\n   *\n   * @returns The current connection state of the WebSocket connection.\n   */\n  public connectionState(): CONNECTION_STATE {\n    switch (this.conn && this.conn.readyState) {\n      case SOCKET_STATES.connecting:\n        return CONNECTION_STATE.Connecting;\n      case SOCKET_STATES.open:\n        return CONNECTION_STATE.Open;\n      case SOCKET_STATES.closing:\n        return CONNECTION_STATE.Closing;\n      default:\n        return CONNECTION_STATE.Closed;\n    }\n  }\n\n  /**\n   * Returns the current ready state of the WebSocket connection.\n   *\n   * @returns The current ready state of the WebSocket connection.\n   */\n  public getReadyState(): SOCKET_STATES {\n    return this.conn?.readyState ?? SOCKET_STATES.closed;\n  }\n\n  /**\n   * Returns `true` is the connection is open.\n   */\n  public isConnected(): boolean {\n    return this.connectionState() === CONNECTION_STATE.Open;\n  }\n\n  /**\n   * Sends data to the Deepgram API via websocket connection\n   * @param data Audio data to send to Deepgram\n   *\n   * Conforms to RFC #146 for Node.js - does not send an empty byte.\n   * @see https://github.com/deepgram/deepgram-python-sdk/issues/146\n   */\n  send(data: SocketDataLike): void {\n    const callback = async () => {\n      if (data instanceof Blob) {\n        if (data.size === 0) {\n          this.log(\"warn\", \"skipping `send` for zero-byte blob\", data);\n\n          return;\n        }\n\n        data = await data.arrayBuffer();\n      }\n\n      if (typeof data !== \"string\") {\n        if (data.byteLength === 0) {\n          this.log(\"warn\", \"skipping `send` for zero-byte blob\", data);\n\n          return;\n        }\n      }\n\n      this.conn?.send(data);\n    };\n\n    if (this.isConnected()) {\n      callback();\n    } else {\n      this.sendBuffer.push(callback);\n    }\n  }\n\n  /**\n   * Determines whether the current instance should proxy requests.\n   * @returns {boolean} true if the current instance should proxy requests; otherwise, false\n   */\n  get proxy(): boolean {\n    return this.key === \"proxy\" && !!this.namespaceOptions.websocket.options.proxy?.url;\n  }\n\n  /**\n   * Sets up the connection event handlers.\n   *\n   * @abstract Requires subclasses to set up context aware event handlers.\n   */\n  abstract setupConnection(): void;\n}\n\nclass WSWebSocketDummy {\n  binaryType: string = \"arraybuffer\";\n  close: Function;\n  onclose: Function = () => {};\n  onerror: Function = () => {};\n  onmessage: Function = () => {};\n  onopen: Function = () => {};\n  readyState: number = SOCKET_STATES.connecting;\n  send: Function = () => {};\n  url: string | URL | null = null;\n\n  constructor(address: URL, _protocols: undefined, options: { close: Function }) {\n    this.url = address.toString();\n    this.close = options.close;\n  }\n}\n\nexport { AbstractLiveClient as AbstractWsClient };\n","import { resolveHeadersConstructor } from \"./helpers\";\nimport crossFetch from \"cross-fetch\";\nimport type { Fetch } from \"./types\";\n\n/**\n * Resolves the appropriate fetch function to use, either a custom fetch function provided as an argument, or the global fetch function if available, or the cross-fetch library if the global fetch function is not available.\n *\n * @param customFetch - An optional custom fetch function to use instead of the global fetch function.\n * @returns A fetch function that can be used to make HTTP requests.\n */\nexport const resolveFetch = (customFetch?: Fetch): Fetch => {\n  let _fetch: Fetch;\n\n  if (customFetch) {\n    _fetch = customFetch;\n  } else if (typeof fetch === \"undefined\") {\n    _fetch = crossFetch as unknown as Fetch;\n  } else {\n    _fetch = fetch;\n  }\n\n  return (...args) => _fetch(...args);\n};\n\n/**\n * Resolves a fetch function that includes an \"Authorization\" header with the provided API key.\n *\n * @param apiKey - The API key to include in the \"Authorization\" header.\n * @param customFetch - An optional custom fetch function to use instead of the global fetch function.\n * @returns A fetch function that can be used to make HTTP requests with the provided API key in the \"Authorization\" header.\n */\nexport const fetchWithAuth = (apiKey: string, customFetch?: Fetch): Fetch => {\n  const fetch = resolveFetch(customFetch);\n  const HeadersConstructor = resolveHeadersConstructor();\n\n  return async (input, init) => {\n    const headers = new HeadersConstructor(init?.headers);\n\n    if (!headers.has(\"Authorization\")) {\n      headers.set(\"Authorization\", `Token ${apiKey}`);\n    }\n\n    return fetch(input, { ...init, headers });\n  };\n};\n\n/**\n * Resolves the appropriate Response object to use, either the global Response object if available, or the Response object from the cross-fetch library if the global Response object is not available.\n *\n * @returns The appropriate Response object to use for making HTTP requests.\n */\nexport const resolveResponse = async () => {\n  if (typeof Response === \"undefined\") {\n    return (await import(\"cross-fetch\")).Response;\n  }\n\n  return Response;\n};\n","import { DeepgramApiError, DeepgramError, DeepgramUnknownError } from \"../lib/errors\";\nimport { Readable } from \"stream\";\nimport { fetchWithAuth, resolveResponse } from \"../lib/fetch\";\nimport type { Fetch, FetchOptions, RequestMethodType } from \"../lib/types/Fetch\";\nimport { AbstractClient } from \"./AbstractClient\";\nimport { DeepgramClientOptions } from \"../lib/types\";\nimport { isBrowser } from \"../lib/helpers\";\nimport merge from \"deepmerge\";\n\n/**\n * An abstract class that extends `AbstractClient` and provides a base implementation for a REST-based API client.\n * This class handles authentication, error handling, and other common functionality for REST API clients.\n */\nexport abstract class AbstractRestClient extends AbstractClient {\n  protected fetch: Fetch;\n\n  /**\n   * Constructs a new instance of the `AbstractRestClient` class with the provided options.\n   *\n   * @param options - The client options to use for this instance.\n   * @throws {DeepgramError} If the client is being used in a browser and no proxy is provided.\n   */\n  constructor(options: DeepgramClientOptions) {\n    super(options);\n\n    if (isBrowser() && !this.proxy) {\n      throw new DeepgramError(\n        \"Due to CORS we are unable to support REST-based API calls to our API from the browser. Please consider using a proxy: https://dpgr.am/js-proxy for more information.\"\n      );\n    }\n\n    this.fetch = fetchWithAuth(this.key, this.namespaceOptions.fetch.client);\n\n    if (this.proxy) {\n      this.baseUrl = this.namespaceOptions.fetch.options.proxy!.url;\n    } else {\n      this.baseUrl = this.namespaceOptions.fetch.options.url;\n    }\n  }\n\n  /**\n   * Constructs an error message from the provided error object.\n   *\n   * @param err - The error object to extract the error message from.\n   * @returns The constructed error message.\n   */\n  protected _getErrorMessage(err: any): string {\n    return err.msg || err.message || err.error_description || err.error || JSON.stringify(err);\n  }\n\n  /**\n   * Handles an error that occurred during a request.\n   *\n   * @param error - The error that occurred during the request.\n   * @param reject - The rejection function to call with the error.\n   * @returns A Promise that resolves when the error has been handled.\n   */\n  protected async _handleError(error: unknown, reject: (reason?: any) => void) {\n    const Res = await resolveResponse();\n\n    if (error instanceof Res) {\n      error\n        .json()\n        .then((err) => {\n          reject(new DeepgramApiError(this._getErrorMessage(err), error.status || 500));\n        })\n        .catch((err) => {\n          reject(new DeepgramUnknownError(this._getErrorMessage(err), err));\n        });\n    } else {\n      reject(new DeepgramUnknownError(this._getErrorMessage(error), error));\n    }\n  }\n\n  /**\n   * Constructs the options object to be used for a fetch request.\n   *\n   * @param method - The HTTP method to use for the request, such as \"GET\", \"POST\", \"PUT\", \"PATCH\", or \"DELETE\".\n   * @param bodyOrOptions - For \"POST\", \"PUT\", and \"PATCH\" requests, the request body as a string, Buffer, or Readable stream. For \"GET\" and \"DELETE\" requests, the fetch options to use.\n   * @param options - Additional fetch options to use for the request.\n   * @returns The constructed fetch options object.\n   */\n  protected _getRequestOptions(\n    method: RequestMethodType,\n    bodyOrOptions?: string | Buffer | Readable | FetchOptions,\n    options?: FetchOptions\n  ): FetchOptions {\n    let reqOptions: FetchOptions = { method };\n\n    if (method === \"GET\" || method === \"DELETE\") {\n      reqOptions = { ...reqOptions, ...(bodyOrOptions as FetchOptions) };\n    } else {\n      reqOptions = {\n        duplex: \"half\",\n        body: bodyOrOptions as BodyInit,\n        ...reqOptions,\n        ...options,\n      };\n    }\n\n    return merge(this.namespaceOptions.fetch.options, reqOptions, { clone: false });\n  }\n\n  /**\n   * Handles an HTTP request using the provided method, URL, and optional request body and options.\n   *\n   * @param method - The HTTP method to use for the request, such as \"GET\", \"POST\", \"PUT\", \"PATCH\", or \"DELETE\".\n   * @param url - The URL to send the request to.\n   * @param bodyOrOptions - For \"POST\", \"PUT\", and \"PATCH\" requests, the request body as a string, Buffer, or Readable stream. For \"GET\" and \"DELETE\" requests, the fetch options to use.\n   * @param options - Additional fetch options to use for the request.\n   * @returns A Promise that resolves to the Response object for the request.\n   */\n  protected async _handleRequest(\n    method: \"GET\" | \"DELETE\",\n    url: URL,\n    options?: FetchOptions\n  ): Promise<Response>;\n  protected async _handleRequest(\n    method: \"POST\" | \"PUT\" | \"PATCH\",\n    url: URL,\n    body: string | Buffer | Readable,\n    options?: FetchOptions\n  ): Promise<Response>;\n  protected async _handleRequest(\n    method: RequestMethodType,\n    url: URL,\n    bodyOrOptions?: string | Buffer | Readable | FetchOptions,\n    options?: FetchOptions\n  ): Promise<Response> {\n    return new Promise((resolve, reject) => {\n      const fetcher = this.fetch;\n\n      fetcher(url, this._getRequestOptions(method, bodyOrOptions, options))\n        .then((result) => {\n          if (!result.ok) throw result;\n          resolve(result);\n        })\n        .catch((error) => this._handleError(error, reject));\n    });\n  }\n\n  /**\n   * Handles an HTTP GET request using the provided URL and optional request options.\n   *\n   * @param url - The URL to send the GET request to.\n   * @param options - Additional fetch options to use for the GET request.\n   * @returns A Promise that resolves to the Response object for the GET request.\n   */\n  protected async get(url: URL, options?: FetchOptions): Promise<any> {\n    return this._handleRequest(\"GET\", url, options);\n  }\n\n  /**\n   * Handles an HTTP POST request using the provided URL, request body, and optional request options.\n   *\n   * @param url - The URL to send the POST request to.\n   * @param body - The request body as a string, Buffer, or Readable stream.\n   * @param options - Additional fetch options to use for the POST request.\n   * @returns A Promise that resolves to the Response object for the POST request.\n   */\n  protected async post(\n    url: URL,\n    body: string | Buffer | Readable,\n    options?: FetchOptions\n  ): Promise<any> {\n    return this._handleRequest(\"POST\", url, body, options);\n  }\n\n  /**\n   * Handles an HTTP PUT request using the provided URL, request body, and optional request options.\n   *\n   * @param url - The URL to send the PUT request to.\n   * @param body - The request body as a string, Buffer, or Readable stream.\n   * @param options - Additional fetch options to use for the PUT request.\n   * @returns A Promise that resolves to the Response object for the PUT request.\n   */\n  protected async put(\n    url: URL,\n    body: string | Buffer | Readable,\n    options?: FetchOptions\n  ): Promise<any> {\n    return this._handleRequest(\"PUT\", url, body, options);\n  }\n\n  /**\n   * Handles an HTTP PATCH request using the provided URL, request body, and optional request options.\n   *\n   * @param url - The URL to send the PATCH request to.\n   * @param body - The request body as a string, Buffer, or Readable stream.\n   * @param options - Additional fetch options to use for the PATCH request.\n   * @returns A Promise that resolves to the Response object for the PATCH request.\n   */\n  protected async patch(\n    url: URL,\n    body: string | Buffer | Readable,\n    options?: FetchOptions\n  ): Promise<any> {\n    return this._handleRequest(\"PATCH\", url, body, options);\n  }\n\n  /**\n   * Handles an HTTP DELETE request using the provided URL and optional request options.\n   *\n   * @param url - The URL to send the DELETE request to.\n   * @param options - Additional fetch options to use for the DELETE request.\n   * @returns A Promise that resolves to the Response object for the DELETE request.\n   */\n  protected async delete(url: URL, options?: FetchOptions): Promise<any> {\n    return this._handleRequest(\"DELETE\", url, options);\n  }\n\n  /**\n   * Determines whether the current instance should proxy requests.\n   * @returns {boolean} true if the current instance should proxy requests; otherwise, false\n   */\n  get proxy(): boolean {\n    return this.key === \"proxy\" && !!this.namespaceOptions.fetch.options.proxy?.url;\n  }\n}\n\nexport { AbstractRestClient as AbstractRestfulClient };\n","/**\n * Enumeration of events related to live transcription.\n *\n * - `Open`: Built-in socket event for when the connection is opened.\n * - `Close`: Built-in socket event for when the connection is closed.\n * - `Error`: Built-in socket event for when an error occurs.\n * - `Transcript`: Event for when a transcript message is received.\n * - `Metadata`: Event for when metadata is received.\n * - `UtteranceEnd`: Event for when an utterance ends.\n * - `SpeechStarted`: Event for when speech is detected.\n * - `Unhandled`: Catch-all event for any other message event.\n */\nexport enum LiveTranscriptionEvents {\n  /**\n   * Built in socket events.\n   */\n  Open = \"open\",\n  Close = \"close\",\n  Error = \"error\",\n\n  /**\n   * Message { type: string }\n   */\n  Transcript = \"Results\",\n  Metadata = \"Metadata\",\n  UtteranceEnd = \"UtteranceEnd\",\n  SpeechStarted = \"SpeechStarted\",\n\n  /**\n   * Catch all for any other message event\n   */\n  Unhandled = \"Unhandled\",\n}\n","/**\n * Enumeration of events related to live text-to-speech synthesis.\n *\n * - `Open`: Built-in socket event for when the connection is opened.\n * - `Close`: Built-in socket event for when the connection is closed.\n * - `Error`: Built-in socket event for when an error occurs.\n * - `Metadata`: Event for when metadata is received.\n * - `Flushed`: Event for when the server has flushed the buffer.\n * - `Warning`: Event for when a warning is received.\n * - `Unhandled`: Catch-all event for any other message event.\n */\nexport enum LiveTTSEvents {\n  /**\n   * Built in socket events.\n   */\n  Open = \"Open\",\n  Close = \"Close\",\n  Error = \"Error\",\n\n  /**\n   * Message { type: string }\n   */\n  Metadata = \"Metadata\",\n  Flushed = \"Flushed\",\n  Warning = \"Warning\",\n\n  /**\n   * Audio data event.\n   */\n  Audio = \"Audio\",\n\n  /**\n   * Catch all for any other message event\n   */\n  Unhandled = \"Unhandled\",\n}\n","import { AbstractLiveClient } from \"./AbstractLiveClient\";\nimport { LiveTranscriptionEvents } from \"../lib/enums\";\nimport type { LiveSchema, LiveConfigOptions, DeepgramClientOptions } from \"../lib/types\";\n\n/**\n * The `ListenLiveClient` class extends the `AbstractLiveClient` class and provides functionality for setting up and managing a WebSocket connection for live transcription.\n *\n * The constructor takes in `DeepgramClientOptions` and an optional `LiveSchema` object, as well as an optional `endpoint` string. It then calls the `connect` method of the parent `AbstractLiveClient` class to establish the WebSocket connection.\n *\n * The `setupConnection` method is responsible for handling the various events that can occur on the WebSocket connection, such as opening, closing, and receiving messages. It sets up event handlers for these events and emits the appropriate events based on the message type.\n *\n * The `configure` method allows you to send additional configuration options to the connected session, such as enabling numerals.\n *\n * The `keepAlive` method sends a \"KeepAlive\" message to the server to maintain the connection.\n *\n * The `requestClose` method requests the server to close the connection.\n *\n * The `finish` method is deprecated as of version 3.4 and will be removed in version 4.0. Use `requestClose` instead.\n */\nexport class ListenLiveClient extends AbstractLiveClient {\n  public namespace: string = \"listen\";\n\n  /**\n   * Constructs a new `ListenLiveClient` instance with the provided options.\n   *\n   * @param options - The `DeepgramClientOptions` to use for the client connection.\n   * @param transcriptionOptions - An optional `LiveSchema` object containing additional configuration options for the live transcription.\n   * @param endpoint - An optional string representing the WebSocket endpoint to connect to. Defaults to `:version/listen`.\n   */\n  constructor(\n    options: DeepgramClientOptions,\n    transcriptionOptions: LiveSchema = {},\n    endpoint: string = \":version/listen\"\n  ) {\n    super(options);\n\n    this.connect(transcriptionOptions, endpoint);\n  }\n\n  /**\n   * Sets up the connection event handlers.\n   * This method is responsible for handling the various events that can occur on the WebSocket connection, such as opening, closing, and receiving messages.\n   * - When the connection is opened, it emits the `LiveTranscriptionEvents.Open` event.\n   * - When the connection is closed, it emits the `LiveTranscriptionEvents.Close` event.\n   * - When an error occurs on the connection, it emits the `LiveTranscriptionEvents.Error` event.\n   * - When a message is received, it parses the message and emits the appropriate event based on the message type, such as `LiveTranscriptionEvents.Metadata`, `LiveTranscriptionEvents.Transcript`, `LiveTranscriptionEvents.UtteranceEnd`, and `LiveTranscriptionEvents.SpeechStarted`.\n   */\n  public setupConnection(): void {\n    if (this.conn) {\n      this.conn.onopen = () => {\n        this.emit(LiveTranscriptionEvents.Open, this);\n      };\n\n      this.conn.onclose = (event: any) => {\n        this.emit(LiveTranscriptionEvents.Close, event);\n      };\n\n      this.conn.onerror = (event: ErrorEvent) => {\n        this.emit(LiveTranscriptionEvents.Error, event);\n      };\n\n      this.conn.onmessage = (event: MessageEvent) => {\n        try {\n          const data: any = JSON.parse(event.data.toString());\n\n          if (data.type === LiveTranscriptionEvents.Metadata) {\n            this.emit(LiveTranscriptionEvents.Metadata, data);\n          } else if (data.type === LiveTranscriptionEvents.Transcript) {\n            this.emit(LiveTranscriptionEvents.Transcript, data);\n          } else if (data.type === LiveTranscriptionEvents.UtteranceEnd) {\n            this.emit(LiveTranscriptionEvents.UtteranceEnd, data);\n          } else if (data.type === LiveTranscriptionEvents.SpeechStarted) {\n            this.emit(LiveTranscriptionEvents.SpeechStarted, data);\n          } else {\n            this.emit(LiveTranscriptionEvents.Unhandled, data);\n          }\n        } catch (error) {\n          this.emit(LiveTranscriptionEvents.Error, {\n            event,\n            message: \"Unable to parse `data` as JSON.\",\n            error,\n          });\n        }\n      };\n    }\n  }\n\n  /**\n   * Sends additional config to the connected session.\n   *\n   * @param config - The configuration options to apply to the LiveClient.\n   * @param config.numerals - We currently only support numerals.\n   */\n  public configure(config: LiveConfigOptions): void {\n    this.send(\n      JSON.stringify({\n        type: \"Configure\",\n        processors: config,\n      })\n    );\n  }\n\n  /**\n   * Sends a \"KeepAlive\" message to the server to maintain the connection.\n   */\n  public keepAlive(): void {\n    this.send(\n      JSON.stringify({\n        type: \"KeepAlive\",\n      })\n    );\n  }\n\n  /**\n   * Sends a \"Finalize\" message to flush any transcription sitting in the server's buffer.\n   */\n  public finalize(): void {\n    this.send(\n      JSON.stringify({\n        type: \"Finalize\",\n      })\n    );\n  }\n\n  /**\n   * @deprecated Since version 3.4. Will be removed in version 4.0. Use `requestClose` instead.\n   */\n  public finish(): void {\n    this.requestClose();\n  }\n\n  /**\n   * Requests the server close the connection.\n   */\n  public requestClose(): void {\n    this.send(\n      JSON.stringify({\n        type: \"CloseStream\",\n      })\n    );\n  }\n}\n\nexport { ListenLiveClient as LiveClient };\n","import { CallbackUrl, isFileSource, isUrlSource } from \"../lib/helpers\";\nimport { DeepgramError, isDeepgramError } from \"../lib/errors\";\nimport type {\n  AsyncPrerecordedResponse,\n  DeepgramResponse,\n  FileSource,\n  PrerecordedSchema,\n  SyncPrerecordedResponse,\n  UrlSource,\n} from \"../lib/types\";\nimport { AbstractRestClient } from \"./AbstractRestClient\";\n\n/**\n * The `ListenRestClient` class extends the `AbstractRestClient` class and provides methods for transcribing audio from URLs or files using the Deepgram API.\n *\n * The `transcribeUrl` method is used to transcribe audio from a URL synchronously. It takes a `UrlSource` object as the source, an optional `PrerecordedSchema` object as options, and an optional endpoint string. It returns a `DeepgramResponse` object containing the transcription result or an error.\n *\n * The `transcribeFile` method is used to transcribe audio from a file synchronously. It takes a `FileSource` object as the source, an optional `PrerecordedSchema` object as options, and an optional endpoint string. It returns a `DeepgramResponse` object containing the transcription result or an error.\n *\n * The `transcribeUrlCallback` method is used to transcribe audio from a URL asynchronously. It takes a `UrlSource` object as the source, a `CallbackUrl` object as the callback, an optional `PrerecordedSchema` object as options, and an optional endpoint string. It returns a `DeepgramResponse` object containing the transcription result or an error.\n *\n * The `transcribeFileCallback` method is used to transcribe audio from a file asynchronously. It takes a `FileSource` object as the source, a `CallbackUrl` object as the callback, an optional `PrerecordedSchema` object as options, and an optional endpoint string. It returns a `DeepgramResponse` object containing the transcription result or an error.\n */\nexport class ListenRestClient extends AbstractRestClient {\n  public namespace: string = \"listen\";\n\n  /**\n   * Transcribes audio from a URL synchronously.\n   *\n   * @param source - The URL source object containing the audio URL to transcribe.\n   * @param options - An optional `PrerecordedSchema` object containing additional options for the transcription.\n   * @param endpoint - An optional endpoint string to use for the transcription request.\n   * @returns A `DeepgramResponse` object containing the transcription result or an error.\n   */\n  async transcribeUrl(\n    source: UrlSource,\n    options?: PrerecordedSchema,\n    endpoint = \":version/listen\"\n  ): Promise<DeepgramResponse<SyncPrerecordedResponse>> {\n    try {\n      let body;\n\n      if (isUrlSource(source)) {\n        body = JSON.stringify(source);\n      } else {\n        throw new DeepgramError(\"Unknown transcription source type\");\n      }\n\n      if (options !== undefined && \"callback\" in options) {\n        throw new DeepgramError(\n          \"Callback cannot be provided as an option to a synchronous transcription. Use `transcribeUrlCallback` or `transcribeFileCallback` instead.\"\n        );\n      }\n\n      const requestUrl = this.getRequestUrl(endpoint, {}, { ...{}, ...options });\n      const result: SyncPrerecordedResponse = await this.post(requestUrl, body).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Transcribes audio from a file asynchronously.\n   *\n   * @param source - The file source object containing the audio file to transcribe.\n   * @param options - An optional `PrerecordedSchema` object containing additional options for the transcription.\n   * @param endpoint - An optional endpoint string to use for the transcription request.\n   * @returns A `DeepgramResponse` object containing the transcription result or an error.\n   */\n  async transcribeFile(\n    source: FileSource,\n    options?: PrerecordedSchema,\n    endpoint = \":version/listen\"\n  ): Promise<DeepgramResponse<SyncPrerecordedResponse>> {\n    try {\n      let body;\n\n      if (isFileSource(source)) {\n        body = source;\n      } else {\n        throw new DeepgramError(\"Unknown transcription source type\");\n      }\n\n      if (options !== undefined && \"callback\" in options) {\n        throw new DeepgramError(\n          \"Callback cannot be provided as an option to a synchronous transcription. Use `transcribeUrlCallback` or `transcribeFileCallback` instead.\"\n        );\n      }\n\n      const requestUrl = this.getRequestUrl(endpoint, {}, { ...{}, ...options });\n      const result: SyncPrerecordedResponse = await this.post(requestUrl, body, {\n        headers: { \"Content-Type\": \"deepgram/audio+video\" },\n      }).then((result) => result.json());\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Transcribes audio from a URL asynchronously.\n   *\n   * @param source - The URL source object containing the audio file to transcribe.\n   * @param callback - The callback URL to receive the transcription result.\n   * @param options - An optional `PrerecordedSchema` object containing additional options for the transcription.\n   * @param endpoint - An optional endpoint string to use for the transcription request.\n   * @returns A `DeepgramResponse` object containing the transcription result or an error.\n   */\n  async transcribeUrlCallback(\n    source: UrlSource,\n    callback: CallbackUrl,\n    options?: PrerecordedSchema,\n    endpoint = \":version/listen\"\n  ): Promise<DeepgramResponse<AsyncPrerecordedResponse>> {\n    try {\n      let body;\n\n      if (isUrlSource(source)) {\n        body = JSON.stringify(source);\n      } else {\n        throw new DeepgramError(\"Unknown transcription source type\");\n      }\n\n      const requestUrl = this.getRequestUrl(\n        endpoint,\n        {},\n        { ...options, callback: callback.toString() }\n      );\n      const result: AsyncPrerecordedResponse = await this.post(requestUrl, body).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Transcribes audio from a file asynchronously.\n   *\n   * @param source - The file source object containing the audio file to transcribe.\n   * @param callback - The callback URL to receive the transcription result.\n   * @param options - An optional `PrerecordedSchema` object containing additional options for the transcription.\n   * @param endpoint - An optional endpoint string to use for the transcription request.\n   * @returns A `DeepgramResponse` object containing the transcription result or an error.\n   */\n  async transcribeFileCallback(\n    source: FileSource,\n    callback: CallbackUrl,\n    options?: PrerecordedSchema,\n    endpoint = \":version/listen\"\n  ): Promise<DeepgramResponse<AsyncPrerecordedResponse>> {\n    try {\n      let body;\n\n      if (isFileSource(source)) {\n        body = source;\n      } else {\n        throw new DeepgramError(\"Unknown transcription source type\");\n      }\n\n      const requestUrl = this.getRequestUrl(\n        endpoint,\n        {},\n        { ...options, callback: callback.toString() }\n      );\n      const result: AsyncPrerecordedResponse = await this.post(requestUrl, body, {\n        headers: { \"Content-Type\": \"deepgram/audio+video\" },\n      }).then((result) => result.json());\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n}\n\nexport { ListenRestClient as PrerecordedClient };\n","import { AbstractClient } from \"./AbstractClient\";\nimport { ListenLiveClient } from \"./ListenLiveClient\";\nimport { ListenRestClient } from \"./ListenRestClient\";\nimport { LiveSchema } from \"../lib/types\";\n\n/**\n * The `ListenClient` class extends the `AbstractClient` class and provides access to the \"listen\" namespace.\n * It exposes two methods:\n *\n * 1. `prerecorded()`: Returns a `ListenRestClient` instance for interacting with the prerecorded listen API.\n * 2. `live(transcriptionOptions: LiveSchema = {}, endpoint = \":version/listen\")`: Returns a `ListenLiveClient` instance for interacting with the live listen API, with the provided transcription options and endpoint.\n */\nexport class ListenClient extends AbstractClient {\n  public namespace: string = \"listen\";\n\n  /**\n   * Returns a `ListenRestClient` instance for interacting with the prerecorded listen API.\n   */\n  get prerecorded() {\n    return new ListenRestClient(this.options);\n  }\n\n  /**\n   * Returns a `ListenLiveClient` instance for interacting with the live listen API, with the provided transcription options and endpoint.\n   * @param {LiveSchema} [transcriptionOptions={}] - The transcription options to use for the live listen API.\n   * @param {string} [endpoint=\":version/listen\"] - The endpoint to use for the live listen API.\n   * @returns {ListenLiveClient} - A `ListenLiveClient` instance for interacting with the live listen API.\n   */\n  public live(\n    transcriptionOptions: LiveSchema = {},\n    endpoint: string = \":version/listen\"\n  ): ListenLiveClient {\n    return new ListenLiveClient(this.options, transcriptionOptions, endpoint);\n  }\n}\n","import { isDeepgramError } from \"../lib/errors\";\nimport type {\n  CreateProjectKeySchema,\n  CreateProjectKeyResponse,\n  DeepgramResponse,\n  GetProjectBalanceResponse,\n  GetProjectBalancesResponse,\n  GetProjectInvitesResponse,\n  GetProjectKeyResponse,\n  GetProjectKeysResponse,\n  GetProjectMemberScopesResponse,\n  GetProjectMembersResponse,\n  GetProjectResponse,\n  GetProjectsResponse,\n  GetProjectUsageFieldsSchema,\n  GetProjectUsageFieldsResponse,\n  GetProjectUsageRequestResponse,\n  GetProjectUsageRequestsSchema,\n  GetProjectUsageRequestsResponse,\n  GetProjectUsageSummarySchema,\n  GetProjectUsageSummaryResponse,\n  MessageResponse,\n  SendProjectInviteSchema,\n  UpdateProjectMemberScopeSchema,\n  UpdateProjectSchema,\n  VoidResponse,\n  GetTokenDetailsResponse,\n  GetModelsResponse,\n  GetModelResponse,\n  GetModelsSchema,\n} from \"../lib/types\";\nimport { AbstractRestClient } from \"./AbstractRestClient\";\n\n/**\n * The `ManageRestClient` class provides a set of methods for interacting with the Deepgram Manage API. It extends the `AbstractRestClient` class and provides functionality for managing projects, keys, members, invites, usage, and balances.\n *\n * The class has a `namespace` property that is set to `\"manage\"`, which is used in the construction of the request URLs.\n *\n * The methods in this class include:\n * - `getTokenDetails`: Retrieves the details of the current authentication token.\n * - `getProjects`: Retrieves a list of all projects associated with the authenticated account.\n * - `getProject`: Retrieves the details of a specific project.\n * - `updateProject`: Updates the details of a specific project.\n * - `deleteProject`: Deletes a specific project.\n * - `getProjectKeys`: Retrieves a list of all API keys associated with a specific project.\n * - `getProjectKey`: Retrieves the details of a specific API key.\n * - `createProjectKey`: Creates a new API key for a specific project.\n * - `deleteProjectKey`: Deletes a specific API key.\n * - `getProjectMembers`: Retrieves a list of all members associated with a specific project.\n * - `removeProjectMember`: Removes a specific member from a project.\n * - `getProjectMemberScopes`: Retrieves the scopes associated with a specific project member.\n * - `updateProjectMemberScope`: Updates the scopes associated with a specific project member.\n * - `getProjectInvites`: Retrieves a list of all pending invitations for a specific project.\n * - `sendProjectInvite`: Sends a new invitation to a specific email address for a project.\n * - `deleteProjectInvite`: Deletes a specific invitation for a project.\n * - `leaveProject`: Removes the authenticated user from a specific project.\n * - `getProjectUsageRequests`: Retrieves a list of all usage requests for a specific project.\n * - `getProjectUsageRequest`: Retrieves the details of a specific usage request.\n * - `getProjectUsageSummary`: Retrieves a summary of the usage for a specific project.\n * - `getProjectUsageFields`: Retrieves a list of the available usage fields for a specific project.\n * - `getProjectBalances`: Retrieves a list of all balances associated with a specific project.\n * - `getProjectBalance`: Retrieves the details of a specific balance for a project.\n */\n/**\n * The `ManageRestClient` class provides a set of methods for interacting with the Deepgram Manage API. It extends the `AbstractRestClient` class and provides functionality for managing projects, keys, members, invites, usage, and balances.\n *\n * The class has a `namespace` property that is set to `\"manage\"`, which is used in the construction of the request URLs.\n *\n * The methods in this class include:\n * - `getTokenDetails`: Retrieves the details of the current authentication token.\n * - `getProjects`: Retrieves a list of all projects associated with the authenticated account.\n * - `getProject`: Retrieves the details of a specific project.\n * - `updateProject`: Updates the details of a specific project.\n * - `deleteProject`: Deletes a specific project.\n * - `getProjectKeys`: Retrieves a list of all API keys associated with a specific project.\n * - `getProjectKey`: Retrieves the details of a specific API key.\n * - `createProjectKey`: Creates a new API key for a specific project.\n * - `deleteProjectKey`: Deletes a specific API key.\n * - `getProjectMembers`: Retrieves a list of all members associated with a specific project.\n * - `removeProjectMember`: Removes a specific member from a project.\n * - `getProjectMemberScopes`: Retrieves the scopes associated with a specific project member.\n * - `updateProjectMemberScope`: Updates the scopes associated with a specific project member.\n * - `getProjectInvites`: Retrieves a list of all pending invitations for a specific project.\n * - `sendProjectInvite`: Sends a new invitation to a specific email address for a project.\n * - `deleteProjectInvite`: Deletes a specific invitation for a project.\n * - `leaveProject`: Removes the authenticated user from a specific project.\n * - `getProjectUsageRequests`: Retrieves a list of all usage requests for a specific project.\n * - `getProjectUsageRequest`: Retrieves the details of a specific usage request.\n * - `getProjectUsageSummary`: Retrieves a summary of the usage for a specific project.\n * - `getProjectUsageFields`: Retrieves a list of the available usage fields for a specific project.\n * - `getProjectBalances`: Retrieves a list of all balances associated with a specific project.\n * - `getProjectBalance`: Retrieves the details of a specific balance for a project.\n */\nexport class ManageRestClient extends AbstractRestClient {\n  public namespace: string = \"manage\";\n\n  /**\n   * Retrieves the details of the current authentication token.\n   *\n   * @returns A promise that resolves to an object containing the token details, or an error object if an error occurs.\n   * @see https://developers.deepgram.com/docs/authenticating#test-request\n   */\n  async getTokenDetails(\n    endpoint = \":version/auth/token\"\n  ): Promise<DeepgramResponse<GetTokenDetailsResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint);\n      const result: GetTokenDetailsResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves a list of all projects associated with the authenticated user.\n   *\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects\".\n   * @returns A promise that resolves to an object containing the list of projects, or an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/get-projects\n   */\n  async getProjects(\n    endpoint = \":version/projects\"\n  ): Promise<DeepgramResponse<GetProjectsResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint);\n      const result: GetProjectsResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves the details of a specific project associated with the authenticated user.\n   *\n   * @param projectId - The ID of the project to retrieve.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId\".\n   * @returns A promise that resolves to an object containing the project details, or an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/get-project\n   */\n  async getProject(\n    projectId: string,\n    endpoint = \":version/projects/:projectId\"\n  ): Promise<DeepgramResponse<GetProjectResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId });\n      const result: GetProjectResponse = await this.get(requestUrl).then((result) => result.json());\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Updates an existing project associated with the authenticated user.\n   *\n   * @param projectId - The ID of the project to update.\n   * @param options - An object containing the updated project details.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId\".\n   * @returns A promise that resolves to an object containing the response message, or an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/update-project\n   */\n  async updateProject(\n    projectId: string,\n    options: UpdateProjectSchema,\n    endpoint = \":version/projects/:projectId\"\n  ): Promise<DeepgramResponse<MessageResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId }, options);\n      const body = JSON.stringify(options);\n\n      const result: MessageResponse = await this.patch(requestUrl, body).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Deletes an existing project associated with the authenticated user.\n   *\n   * @param projectId - The ID of the project to delete.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId\".\n   * @returns A promise that resolves to an object containing the response message, or an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/delete-project\n   */\n  async deleteProject(\n    projectId: string,\n    endpoint = \":version/projects/:projectId\"\n  ): Promise<VoidResponse> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId });\n      await this.delete(requestUrl);\n\n      return { error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves a list of project keys associated with the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve the keys for.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/keys\".\n   * @returns A promise that resolves to an object containing the list of project keys, or an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/list-keys\n   */\n  async getProjectKeys(\n    projectId: string,\n    endpoint = \":version/projects/:projectId/keys\"\n  ): Promise<DeepgramResponse<GetProjectKeysResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId });\n      const result: GetProjectKeysResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves a specific project key associated with the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve the key for.\n   * @param keyId - The ID of the project key to retrieve.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/keys/:keyId\".\n   * @returns A promise that resolves to an object containing the project key, or an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/get-key\n   */\n  async getProjectKey(\n    projectId: string,\n    keyId: string,\n    endpoint = \":version/projects/:projectId/keys/:keyId\"\n  ): Promise<DeepgramResponse<GetProjectKeyResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId, keyId });\n      const result: GetProjectKeyResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Creates a new project key for the specified project.\n   *\n   * @param projectId - The ID of the project to create the key for.\n   * @param options - An object containing the options for creating the project key.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/keys\".\n   * @returns A promise that resolves to an object containing the created project key, or an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/create-key\n   */\n  async createProjectKey(\n    projectId: string,\n    options: CreateProjectKeySchema,\n    endpoint = \":version/projects/:projectId/keys\"\n  ): Promise<DeepgramResponse<CreateProjectKeyResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId }, options);\n      const body = JSON.stringify(options);\n\n      const result: CreateProjectKeyResponse = await this.post(requestUrl, body).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Deletes the specified project key.\n   *\n   * @param projectId - The ID of the project the key belongs to.\n   * @param keyId - The ID of the key to delete.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/keys/:keyId\".\n   * @returns A promise that resolves to an object containing a null result and an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/delete-key\n   */\n  async deleteProjectKey(\n    projectId: string,\n    keyId: string,\n    endpoint = \":version/projects/:projectId/keys/:keyId\"\n  ): Promise<VoidResponse> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId, keyId });\n      await this.delete(requestUrl);\n\n      return { error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves the members of the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve members for.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/members\".\n   * @returns A promise that resolves to an object containing the project members and an error object if an error occurs.\n   * @see https://developers.deepgram.com/reference/get-members\n   */\n  async getProjectMembers(\n    projectId: string,\n    endpoint = \":version/projects/:projectId/members\"\n  ): Promise<DeepgramResponse<GetProjectMembersResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId });\n      const result: GetProjectMembersResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Removes a member from the specified project.\n   *\n   * @param projectId - The ID of the project to remove the member from.\n   * @param memberId - The ID of the member to remove.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/members/:memberId\".\n   * @returns A promise that resolves to an object containing a null error if the operation was successful, or an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/remove-member\n   */\n  async removeProjectMember(\n    projectId: string,\n    memberId: string,\n    endpoint = \":version/projects/:projectId/members/:memberId\"\n  ): Promise<VoidResponse> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId, memberId });\n      await this.delete(requestUrl);\n\n      return { error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves the scopes for the specified project member.\n   *\n   * @param projectId - The ID of the project to retrieve the member scopes for.\n   * @param memberId - The ID of the member to retrieve the scopes for.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/members/:memberId/scopes\".\n   * @returns A promise that resolves to an object containing the retrieved scopes or an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/get-member-scopes\n   */\n  async getProjectMemberScopes(\n    projectId: string,\n    memberId: string,\n    endpoint = \":version/projects/:projectId/members/:memberId/scopes\"\n  ): Promise<DeepgramResponse<GetProjectMemberScopesResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId, memberId });\n      const result: GetProjectMemberScopesResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Updates the scopes for the specified project member.\n   *\n   * @param projectId - The ID of the project to update the member scopes for.\n   * @param memberId - The ID of the member to update the scopes for.\n   * @param options - An object containing the new scopes to apply to the member.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/members/:memberId/scopes\".\n   * @returns A promise that resolves to an object containing the result of the update operation or an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/update-scope\n   */\n  async updateProjectMemberScope(\n    projectId: string,\n    memberId: string,\n    options: UpdateProjectMemberScopeSchema,\n    endpoint = \":version/projects/:projectId/members/:memberId/scopes\"\n  ): Promise<DeepgramResponse<MessageResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId, memberId }, options);\n      const body = JSON.stringify(options);\n\n      const result: MessageResponse = await this.put(requestUrl, body).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves the project invites for the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve the invites for.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/invites\".\n   * @returns A promise that resolves to an object containing the result of the get operation or an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/list-invites\n   */\n  async getProjectInvites(\n    projectId: string,\n    endpoint = \":version/projects/:projectId/invites\"\n  ): Promise<DeepgramResponse<GetProjectInvitesResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId });\n      const result: GetProjectInvitesResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Sends a project invite to the specified email addresses.\n   *\n   * @param projectId - The ID of the project to send the invite for.\n   * @param options - An object containing the email addresses to invite and any additional options.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/invites\".\n   * @returns A promise that resolves to an object containing the result of the post operation or an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/send-invites\n   */\n  async sendProjectInvite(\n    projectId: string,\n    options: SendProjectInviteSchema,\n    endpoint = \":version/projects/:projectId/invites\"\n  ): Promise<DeepgramResponse<MessageResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId }, options);\n      const body = JSON.stringify(options);\n\n      const result: MessageResponse = await this.post(requestUrl, body).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Deletes a project invite for the specified email address.\n   *\n   * @param projectId - The ID of the project to delete the invite for.\n   * @param email - The email address of the invite to delete.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/invites/:email\".\n   * @returns A promise that resolves to an object containing a null result and an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/delete-invite\n   */\n  async deleteProjectInvite(\n    projectId: string,\n    email: string,\n    endpoint = \":version/projects/:projectId/invites/:email\"\n  ): Promise<VoidResponse> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId, email });\n      await this.delete(requestUrl).then((result) => result.json());\n\n      return { error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Leaves the specified project.\n   *\n   * @param projectId - The ID of the project to leave.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/leave\".\n   * @returns A promise that resolves to an object containing a null result and an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/leave-project\n   */\n  async leaveProject(\n    projectId: string,\n    endpoint = \":version/projects/:projectId/leave\"\n  ): Promise<DeepgramResponse<MessageResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId });\n      const result: MessageResponse = await this.delete(requestUrl).then((result) => result.json());\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves a list of usage requests for the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve usage requests for.\n   * @param options - An object containing options to filter the usage requests, such as pagination parameters.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/requests\".\n   * @returns A promise that resolves to an object containing the list of usage requests and an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/get-all-requests\n   */\n  async getProjectUsageRequests(\n    projectId: string,\n    options: GetProjectUsageRequestsSchema,\n    endpoint = \":version/projects/:projectId/requests\"\n  ): Promise<DeepgramResponse<GetProjectUsageRequestsResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId }, options);\n      const result: GetProjectUsageRequestsResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves the details of a specific usage request for the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve the usage request for.\n   * @param requestId - The ID of the usage request to retrieve.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/requests/:requestId\".\n   * @returns A promise that resolves to an object containing the usage request details and an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/get-request\n   */\n  async getProjectUsageRequest(\n    projectId: string,\n    requestId: string,\n    endpoint = \":version/projects/:projectId/requests/:requestId\"\n  ): Promise<DeepgramResponse<GetProjectUsageRequestResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId, requestId });\n      const result: GetProjectUsageRequestResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves the usage summary for the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve the usage summary for.\n   * @param options - An object containing optional parameters for the request, such as filters and pagination options.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/usage\".\n   * @returns A promise that resolves to an object containing the usage summary and an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/get-usage\n   */\n  async getProjectUsageSummary(\n    projectId: string,\n    options: GetProjectUsageSummarySchema,\n    endpoint = \":version/projects/:projectId/usage\"\n  ): Promise<DeepgramResponse<GetProjectUsageSummaryResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId }, options);\n      const result: GetProjectUsageSummaryResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves the usage fields for the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve the usage fields for.\n   * @param options - An object containing optional parameters for the request, such as filters and pagination options.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/usage/fields\".\n   * @returns A promise that resolves to an object containing the usage fields and an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/get-fields\n   */\n  async getProjectUsageFields(\n    projectId: string,\n    options: GetProjectUsageFieldsSchema,\n    endpoint = \":version/projects/:projectId/usage/fields\"\n  ): Promise<DeepgramResponse<GetProjectUsageFieldsResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId }, options);\n      const result: GetProjectUsageFieldsResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves the balances for the specified project.\n   *\n   * @param projectId - The ID of the project to retrieve the balances for.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/balances\".\n   * @returns A promise that resolves to an object containing the project balances and an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/get-all-balances\n   */\n  async getProjectBalances(\n    projectId: string,\n    endpoint = \":version/projects/:projectId/balances\"\n  ): Promise<DeepgramResponse<GetProjectBalancesResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId });\n      const result: GetProjectBalancesResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves the balance for the specified project and balance ID.\n   *\n   * @param projectId - The ID of the project to retrieve the balance for.\n   * @param balanceId - The ID of the balance to retrieve.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/projects/:projectId/balances/:balanceId\".\n   * @returns A promise that resolves to an object containing the project balance and an error object if an error occurred.\n   * @see https://developers.deepgram.com/reference/get-balance\n   */\n  async getProjectBalance(\n    projectId: string,\n    balanceId: string,\n    endpoint = \":version/projects/:projectId/balances/:balanceId\"\n  ): Promise<DeepgramResponse<GetProjectBalanceResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId, balanceId });\n      const result: GetProjectBalanceResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves all models for a given project.\n   *\n   * @param projectId - The ID of the project.\n   * @param endpoint - (optional) The endpoint URL for retrieving models. Defaults to \":version/projects/:projectId/models\".\n   * @returns A promise that resolves to a DeepgramResponse containing the GetModelsResponse.\n   * @example\n   * ```typescript\n   * import { createClient } from \"@deepgram/sdk\";\n   *\n   * const deepgram = createClient(DEEPGRAM_API_KEY);\n   * const { result: models, error } = deepgram.manage.getAllModels(\"projectId\");\n   *\n   * if (error) {\n   *   console.error(error);\n   * } else {\n   *   console.log(models);\n   * }\n   * ```\n   */\n  async getAllModels(\n    projectId: string,\n    options: GetModelsSchema = {},\n    endpoint = \":version/projects/:projectId/models\"\n  ): Promise<DeepgramResponse<GetModelsResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId }, options);\n      const result: GetModelsResponse = await this.get(requestUrl).then((result) => result.json());\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves a model from the specified project.\n   *\n   * @param projectId - The ID of the project.\n   * @param modelId - The ID of the model.\n   * @param endpoint - (optional) The endpoint URL for the request. Default value is \":version/projects/:projectId/models/:modelId\".\n   * @returns A promise that resolves to a DeepgramResponse containing the GetModelResponse.\n   * @example\n   * ```typescript\n   * import { createClient } from \"@deepgram/sdk\";\n   *\n   * const deepgram = createClient(DEEPGRAM_API_KEY);\n   * const { result: model, error } = deepgram.models.getModel(\"projectId\", \"modelId\");\n   *\n   * if (error) {\n   *   console.error(error);\n   * } else {\n   *   console.log(model);\n   * }\n   * ```\n   */\n  async getModel(\n    projectId: string,\n    modelId: string,\n    endpoint = \":version/projects/:projectId/models/:modelId\"\n  ): Promise<DeepgramResponse<GetModelResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId, modelId });\n      const result: GetModelResponse = await this.get(requestUrl).then((result) => result.json());\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n}\n\nexport { ManageRestClient as ManageClient };\n","import { isDeepgramError } from \"../lib/errors\";\nimport {\n  DeepgramResponse,\n  GetModelResponse,\n  GetModelsResponse,\n  GetModelsSchema,\n} from \"../lib/types\";\nimport { AbstractRestClient } from \"./AbstractRestClient\";\n\n/**\n * Represents a REST client for interacting with the Deepgram API.\n *\n * The `ModelsRestClient` class provides methods for interacting with the Deepgram API to retrieve information about available models.\n * @extends AbstractRestClient\n */\nexport class ModelsRestClient extends AbstractRestClient {\n  public namespace: string = \"models\";\n\n  /**\n   * Retrieves a list of all available models.\n   *\n   * @param endpoint - (optional) The endpoint to request.\n   * @returns A promise that resolves with the response from the Deepgram API.\n   * @example\n   * ```typescript\n   * import { createClient } from \"@deepgram/sdk\";\n   *\n   * const deepgram = createClient(DEEPGRAM_API_KEY);\n   * const { result: models, error } = deepgram.models.getAll();\n   *\n   * if (error) {\n   *   console.error(error);\n   * } else {\n   *   console.log(models);\n   * }\n   * ```\n   */\n  async getAll(\n    endpoint = \":version/models\",\n    options: GetModelsSchema = {}\n  ): Promise<DeepgramResponse<GetModelsResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, {}, options);\n      const result: GetModelsResponse = await this.get(requestUrl).then((result) => result.json());\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves information about a specific model.\n   *\n   * @param modelId - The UUID of the model to retrieve.\n   * @param endpoint - (optional) The endpoint to request.\n   * @returns A promise that resolves with the response from the Deepgram API.\n   * @example\n   * ```typescript\n   * import { createClient } from \"@deepgram/sdk\";\n   *\n   * const deepgram = createClient(DEEPGRAM_API_KEY);\n   * const { result: model, error } = deepgram.models.getModel(\"modelId\");\n   *\n   * if (error) {\n   *   console.error(error);\n   * } else {\n   *   console.log(model);\n   * }\n   * ```\n   */\n  async getModel(\n    modelId: string,\n    endpoint = \":version/models/:modelId\"\n  ): Promise<DeepgramResponse<GetModelResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { modelId });\n      const result: GetModelResponse = await this.get(requestUrl).then((result) => result.json());\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n}\n","import { CallbackUrl, isTextSource, isUrlSource } from \"../lib/helpers\";\nimport { DeepgramError, isDeepgramError } from \"../lib/errors\";\nimport type {\n  AnalyzeSchema,\n  AsyncAnalyzeResponse,\n  DeepgramResponse,\n  SyncAnalyzeResponse,\n  TextSource,\n  UrlSource,\n} from \"../lib/types\";\nimport { AbstractRestClient } from \"./AbstractRestClient\";\n\n/**\n * The `ReadRestClient` class extends the `AbstractRestClient` class and provides methods for analyzing audio sources synchronously and asynchronously.\n *\n * The `analyzeUrl` method analyzes a URL-based audio source synchronously, returning a promise that resolves to the analysis response or an error.\n *\n * The `analyzeText` method analyzes a text-based audio source synchronously, returning a promise that resolves to the analysis response or an error.\n *\n * The `analyzeUrlCallback` method analyzes a URL-based audio source asynchronously, returning a promise that resolves to the analysis response or an error.\n *\n * The `analyzeTextCallback` method analyzes a text-based audio source asynchronously, returning a promise that resolves to the analysis response or an error.\n */\nexport class ReadRestClient extends AbstractRestClient {\n  public namespace: string = \"read\";\n\n  /**\n   * Analyzes a URL-based audio source synchronously.\n   *\n   * @param source - The URL-based audio source to analyze.\n   * @param options - Optional analysis options.\n   * @param endpoint - The API endpoint to use for the analysis. Defaults to \":version/read\".\n   * @returns A promise that resolves to the analysis response, or an error if the analysis fails.\n   */\n  async analyzeUrl(\n    source: UrlSource,\n    options?: AnalyzeSchema,\n    endpoint = \":version/read\"\n  ): Promise<DeepgramResponse<SyncAnalyzeResponse>> {\n    try {\n      let body;\n\n      if (isUrlSource(source)) {\n        body = JSON.stringify(source);\n      } else {\n        throw new DeepgramError(\"Unknown source type\");\n      }\n\n      if (options !== undefined && \"callback\" in options) {\n        throw new DeepgramError(\n          \"Callback cannot be provided as an option to a synchronous transcription. Use `analyzeUrlCallback` or `analyzeTextCallback` instead.\"\n        );\n      }\n\n      const requestUrl = this.getRequestUrl(endpoint, {}, { ...{}, ...options });\n      const result: SyncAnalyzeResponse = await this.post(requestUrl, body).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Analyzes a text-based audio source synchronously.\n   *\n   * @param source - The text-based audio source to analyze.\n   * @param options - Optional analysis options.\n   * @param endpoint - The API endpoint to use for the analysis. Defaults to \":version/read\".\n   * @returns A promise that resolves to the analysis response, or an error if the analysis fails.\n   */\n  async analyzeText(\n    source: TextSource,\n    options?: AnalyzeSchema,\n    endpoint = \":version/read\"\n  ): Promise<DeepgramResponse<SyncAnalyzeResponse>> {\n    try {\n      let body;\n\n      if (isTextSource(source)) {\n        body = JSON.stringify(source);\n      } else {\n        throw new DeepgramError(\"Unknown source type\");\n      }\n\n      if (options !== undefined && \"callback\" in options) {\n        throw new DeepgramError(\n          \"Callback cannot be provided as an option to a synchronous requests. Use `analyzeUrlCallback` or `analyzeTextCallback` instead.\"\n        );\n      }\n\n      const requestUrl = this.getRequestUrl(endpoint, {}, { ...{}, ...options });\n      const result: SyncAnalyzeResponse = await this.post(requestUrl, body).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Analyzes a URL-based audio source asynchronously.\n   *\n   * @param source - The URL-based audio source to analyze.\n   * @param callback - The URL to call back with the analysis results.\n   * @param options - Optional analysis options.\n   * @param endpoint - The API endpoint to use for the analysis. Defaults to \":version/read\".\n   * @returns A promise that resolves to the analysis response, or an error if the analysis fails.\n   */\n  async analyzeUrlCallback(\n    source: UrlSource,\n    callback: CallbackUrl,\n    options?: AnalyzeSchema,\n    endpoint = \":version/read\"\n  ): Promise<DeepgramResponse<AsyncAnalyzeResponse>> {\n    try {\n      let body;\n\n      if (isUrlSource(source)) {\n        body = JSON.stringify(source);\n      } else {\n        throw new DeepgramError(\"Unknown source type\");\n      }\n\n      const requestUrl = this.getRequestUrl(\n        endpoint,\n        {},\n        { ...options, callback: callback.toString() }\n      );\n      const result: AsyncAnalyzeResponse = await this.post(requestUrl, body).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Analyzes a text-based audio source asynchronously.\n   *\n   * @param source - The text-based audio source to analyze.\n   * @param callback - The URL to call back with the analysis results.\n   * @param options - Optional analysis options.\n   * @param endpoint - The API endpoint to use for the analysis. Defaults to \":version/read\".\n   * @returns A promise that resolves to the analysis response, or an error if the analysis fails.\n   */\n  async analyzeTextCallback(\n    source: TextSource,\n    callback: CallbackUrl,\n    options?: AnalyzeSchema,\n    endpoint = \":version/read\"\n  ): Promise<DeepgramResponse<AsyncAnalyzeResponse>> {\n    try {\n      let body;\n\n      if (isTextSource(source)) {\n        body = JSON.stringify(source);\n      } else {\n        throw new DeepgramError(\"Unknown source type\");\n      }\n\n      const requestUrl = this.getRequestUrl(\n        endpoint,\n        {},\n        { ...options, callback: callback.toString() }\n      );\n      const result: AsyncAnalyzeResponse = await this.post(requestUrl, body, {\n        headers: { \"Content-Type\": \"deepgram/audio+video\" },\n      }).then((result) => result.json());\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n}\n\nexport { ReadRestClient as ReadClient };\n","import { isDeepgramError } from \"../lib/errors\";\nimport type {\n  CreateOnPremCredentialsSchema,\n  DeepgramResponse,\n  ListOnPremCredentialsResponse,\n  MessageResponse,\n  OnPremCredentialResponse,\n} from \"../lib/types\";\nimport { AbstractRestClient } from \"./AbstractRestClient\";\n\n/**\n * The `SelfHostedRestClient` class extends the `AbstractRestClient` class and provides methods for interacting with the Deepgram self-hosted API.\n *\n * This class is used to list, retrieve, create, and delete self-hosted credentials for a Deepgram project.\n */\nexport class SelfHostedRestClient extends AbstractRestClient {\n  public namespace: string = \"selfhosted\";\n\n  /**\n   * Lists the self-hosted credentials for a Deepgram project.\n   *\n   * @param projectId - The ID of the Deepgram project.\n   * @returns A promise that resolves to an object containing the list of self-hosted credentials and any error that occurred.\n   * @see https://developers.deepgram.com/reference/list-credentials\n   */\n  async listCredentials(\n    projectId: string,\n    endpoint = \":version/projects/:projectId/onprem/distribution/credentials\"\n  ): Promise<DeepgramResponse<ListOnPremCredentialsResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId });\n      const result: ListOnPremCredentialsResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Retrieves the self-hosted credentials for a specific Deepgram project and credentials ID.\n   *\n   * @param projectId - The ID of the Deepgram project.\n   * @param credentialsId - The ID of the self-hosted credentials to retrieve.\n   * @returns A promise that resolves to an object containing the self-hosted credentials and any error that occurred.\n   * @see https://developers.deepgram.com/reference/get-credentials\n   */\n  async getCredentials(\n    projectId: string,\n    credentialsId: string,\n    endpoint = \":version/projects/:projectId/onprem/distribution/credentials/:credentialsId\"\n  ): Promise<DeepgramResponse<OnPremCredentialResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId, credentialsId });\n      const result: OnPremCredentialResponse = await this.get(requestUrl).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Creates self-hosted credentials for a specific Deepgram project.\n   *\n   * @param projectId - The ID of the Deepgram project.\n   * @param options - The options for creating the self-hosted credentials.\n   * @returns A promise that resolves to an object containing the created self-hosted credentials and any error that occurred.\n   * @see https://developers.deepgram.com/reference/create-credentials\n   */\n  async createCredentials(\n    projectId: string,\n    options: CreateOnPremCredentialsSchema,\n    endpoint = \":version/projects/:projectId/onprem/distribution/credentials\"\n  ): Promise<DeepgramResponse<OnPremCredentialResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId });\n      const body = JSON.stringify(options);\n\n      const result: OnPremCredentialResponse = await this.post(requestUrl, body).then((result) =>\n        result.json()\n      );\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Deletes self-hosted credentials for a specific Deepgram project.\n   *\n   * @param projectId - The ID of the Deepgram project.\n   * @param credentialsId - The ID of the self-hosted credentials to delete.\n   * @returns A promise that resolves to an object containing a message response and any error that occurred.\n   * @see https://developers.deepgram.com/reference/delete-credentials\n   */\n  async deleteCredentials(\n    projectId: string,\n    credentialsId: string,\n    endpoint = \":version/projects/:projectId/onprem/distribution/credentials/:credentialsId\"\n  ): Promise<DeepgramResponse<MessageResponse>> {\n    try {\n      const requestUrl = this.getRequestUrl(endpoint, { projectId, credentialsId });\n      const result: MessageResponse = await this.delete(requestUrl).then((result) => result.json());\n\n      return { result, error: null };\n    } catch (error) {\n      if (isDeepgramError(error)) {\n        return { result: null, error };\n      }\n\n      throw error;\n    }\n  }\n}\n\nexport { SelfHostedRestClient as OnPremClient };\n","import { AbstractLiveClient } from \"./AbstractLiveClient\";\nimport { LiveTTSEvents } from \"../lib/enums\";\nimport type { SpeakSchema, DeepgramClientOptions } from \"../lib/types\";\n\n/**\n * The `SpeakLiveClient` class extends the `AbstractLiveClient` class and provides functionality for setting up and managing a WebSocket connection for live text-to-speech synthesis.\n *\n * The constructor takes in `DeepgramClientOptions` and an optional `SpeakSchema` object, as well as an optional `endpoint` string. It then calls the `connect` method of the parent `AbstractLiveClient` class to establish the WebSocket connection.\n *\n * The `setupConnection` method is responsible for handling the various events that can occur on the WebSocket connection, such as opening, closing, and receiving messages. It sets up event handlers for these events and emits the appropriate events based on the message type.\n *\n * The `configure` method allows you to send additional configuration options to the connected session.\n *\n * The `requestClose` method requests the server to close the connection.\n */\nexport class SpeakLiveClient extends AbstractLiveClient {\n  public namespace: string = \"speak\";\n\n  /**\n   * Constructs a new `SpeakLiveClient` instance with the provided options.\n   *\n   * @param options - The `DeepgramClientOptions` to use for the client connection.\n   * @param speakOptions - An optional `SpeakSchema` object containing additional configuration options for the text-to-speech.\n   * @param endpoint - An optional string representing the WebSocket endpoint to connect to. Defaults to `:version/speak`.\n   */\n  constructor(\n    options: DeepgramClientOptions,\n    speakOptions: Omit<SpeakSchema, \"container\"> = {},\n    endpoint: string = \":version/speak\"\n  ) {\n    super(options);\n\n    this.connect(speakOptions, endpoint);\n  }\n\n  /**\n   * Sets up the connection event handlers.\n   * This method is responsible for handling the various events that can occur on the WebSocket connection, such as opening, closing, and receiving data.\n   * - When the connection is opened, it emits the `LiveTTSEvents.Open` event.\n   * - When the connection is closed, it emits the `LiveTTSEvents.Close` event.\n   * - When an error occurs on the connection, it emits the `LiveTTSEvents.Error` event.\n   * - When a message is received, it parses the message and emits the appropriate event based on the message type, such as `LiveTTSEvents.Metadata`, `LiveTTSEvents.Flushed`, and `LiveTTSEvents.Warning`.\n   */\n  public setupConnection(): void {\n    if (this.conn) {\n      this.conn.onopen = () => {\n        this.emit(LiveTTSEvents.Open, this);\n      };\n\n      this.conn.onclose = (event: any) => {\n        this.emit(LiveTTSEvents.Close, event);\n      };\n\n      this.conn.onerror = (event: ErrorEvent) => {\n        this.emit(LiveTTSEvents.Error, event);\n      };\n\n      this.conn.onmessage = (event: MessageEvent) => {\n        this.handleMessage(event);\n      };\n    }\n  }\n\n  /**\n   * Handles text messages received from the WebSocket connection.\n   * @param data - The parsed JSON data.\n   */\n  protected handleTextMessage(data: any): void {\n    if (data.type === LiveTTSEvents.Metadata) {\n      this.emit(LiveTTSEvents.Metadata, data);\n    } else if (data.type === LiveTTSEvents.Flushed) {\n      this.emit(LiveTTSEvents.Flushed, data);\n    } else if (data.type === LiveTTSEvents.Warning) {\n      this.emit(LiveTTSEvents.Warning, data);\n    } else {\n      this.emit(LiveTTSEvents.Unhandled, data);\n    }\n  }\n\n  /**\n   * Handles binary messages received from the WebSocket connection.\n   * @param data - The binary data.\n   */\n  protected handleBinaryMessage(data: Buffer): void {\n    this.emit(LiveTTSEvents.Audio, data);\n  }\n\n  /**\n   * Sends a text input message to the server.\n   *\n   * @param {string} text - The text to convert to speech.\n   */\n  public sendText(text: string): void {\n    this.send(\n      JSON.stringify({\n        type: \"Speak\",\n        text,\n      })\n    );\n  }\n\n  /**\n   * Requests the server flush the current buffer and return generated audio.\n   */\n  public flush(): void {\n    this.send(\n      JSON.stringify({\n        type: \"Flush\",\n      })\n    );\n  }\n\n  /**\n   * Requests the server clear the current buffer.\n   */\n  public clear(): void {\n    this.send(\n      JSON.stringify({\n        type: \"Clear\",\n      })\n    );\n  }\n\n  /**\n   * Requests the server close the connection.\n   */\n  public requestClose(): void {\n    this.send(\n      JSON.stringify({\n        type: \"Close\",\n      })\n    );\n  }\n\n  /**\n   * Handles incoming messages from the WebSocket connection.\n   * @param event - The MessageEvent object representing the received message.\n   */\n  protected handleMessage(event: MessageEvent): void {\n    if (typeof event.data === \"string\") {\n      try {\n        const data = JSON.parse(event.data);\n        this.handleTextMessage(data);\n      } catch (error) {\n        this.emit(LiveTTSEvents.Error, {\n          event,\n          message: \"Unable to parse `data` as JSON.\",\n          error,\n        });\n      }\n    } else if (event.data instanceof Blob) {\n      event.data.arrayBuffer().then((buffer) => {\n        this.handleBinaryMessage(Buffer.from(buffer));\n      });\n    } else if (event.data instanceof ArrayBuffer) {\n      this.handleBinaryMessage(Buffer.from(event.data));\n    } else if (Buffer.isBuffer(event.data)) {\n      this.handleBinaryMessage(event.data);\n    } else {\n      console.log(\"Received unknown data type\", event.data);\n      this.emit(LiveTTSEvents.Error, {\n        event,\n        message: \"Received unknown data type.\",\n      });\n    }\n  }\n}\n","import { DeepgramError, DeepgramUnknownError } from \"../lib/errors\";\nimport { isTextSource } from \"../lib/helpers\";\nimport { SpeakSchema, TextSource } from \"../lib/types\";\nimport { AbstractRestClient } from \"./AbstractRestClient\";\n\n/**\n * Provides a client for interacting with the Deepgram Text-to-Speech API.\n */\nexport class SpeakRestClient extends AbstractRestClient {\n  public namespace: string = \"speak\";\n  public result: undefined | Response;\n\n  /**\n   * Sends a request to the Deepgram Text-to-Speech API to generate audio from the provided text source.\n   *\n   * @param source - The text source to be converted to audio.\n   * @param options - Optional configuration options for the text-to-speech request.\n   * @param endpoint - The API endpoint to use for the request. Defaults to \":version/speak\".\n   * @returns A promise that resolves to the SpeakRestClient instance, which can be used to retrieve the response headers and body.\n   * @throws {DeepgramError} If the text source type is unknown.\n   * @throws {DeepgramUnknownError} If the request was made before a previous request completed.\n   * @see https://developers.deepgram.com/reference/text-to-speech-api\n   */\n  async request(\n    source: TextSource,\n    options?: SpeakSchema,\n    endpoint = \":version/speak\"\n  ): Promise<SpeakRestClient> {\n    let body;\n\n    if (isTextSource(source)) {\n      body = JSON.stringify(source);\n    } else {\n      throw new DeepgramError(\"Unknown transcription source type\");\n    }\n\n    const requestUrl = this.getRequestUrl(\n      endpoint,\n      {},\n      { ...{ model: \"aura-asteria-en\" }, ...options }\n    );\n    this.result = await this.post(requestUrl, body, {\n      headers: { Accept: \"audio/*\", \"Content-Type\": \"application/json\" },\n    });\n\n    return this;\n  }\n\n  /**\n   * Retrieves the response body as a readable stream.\n   *\n   * @returns A promise that resolves to the response body as a readable stream, or `null` if no request has been made yet.\n   * @throws {DeepgramUnknownError} If a request has not been made yet.\n   */\n  async getStream(): Promise<ReadableStream<Uint8Array> | null> {\n    if (!this.result)\n      throw new DeepgramUnknownError(\"Tried to get stream before making request\", \"\");\n\n    return this.result.body;\n  }\n\n  /**\n   * Retrieves the response headers from the previous request.\n   *\n   * @returns A promise that resolves to the response headers, or throws a `DeepgramUnknownError` if no request has been made yet.\n   */\n  async getHeaders(): Promise<Headers> {\n    if (!this.result)\n      throw new DeepgramUnknownError(\"Tried to get headers before making request\", \"\");\n\n    return this.result.headers;\n  }\n}\n","import { AbstractClient } from \"./AbstractClient\";\nimport { SpeakLiveClient } from \"./SpeakLiveClient\";\nimport { SpeakRestClient } from \"./SpeakRestClient\";\nimport { SpeakSchema } from \"../lib/types\";\nimport { TextSource } from \"../lib/types\";\n\n/**\n * The `SpeakClient` class extends the `AbstractClient` class and provides access to the \"speak\" namespace.\n * It exposes two methods:\n *\n * 1. `request()`: Returns a `SpeakRestClient` instance for interacting with the rest speak API.\n * 2. `live(ttsOptions: SpeakSchema = {}, endpoint = \":version/speak\")`: Returns a `SpeakLiveClient` instance for interacting with the live speak API, with the provided TTS options and endpoint.\n */\nexport class SpeakClient extends AbstractClient {\n  public namespace: string = \"speak\";\n\n  /**\n   * Returns a `SpeakRestClient` instance for interacting with the rest speak API.\n   */\n  public request(source: TextSource, options?: SpeakSchema, endpoint = \":version/speak\") {\n    const client = new SpeakRestClient(this.options);\n\n    return client.request(source, options, endpoint);\n  }\n\n  /**\n   * Returns a `SpeakLiveClient` instance for interacting with the live speak API, with the provided TTS options and endpoint.\n   * @param {SpeakSchema} [ttsOptions={}] - The TTS options to use for the live speak API.\n   * @param {string} [endpoint=\":version/speak\"] - The endpoint to use for the live speak API.\n   * @returns {SpeakLiveClient} - A `SpeakLiveClient` instance for interacting with the live speak API.\n   */\n  public live(ttsOptions: SpeakSchema = {}, endpoint: string = \":version/speak\"): SpeakLiveClient {\n    return new SpeakLiveClient(this.options, ttsOptions, endpoint);\n  }\n}\n","import { DeepgramVersionError } from \"./lib/errors\";\nimport {\n  AbstractClient,\n  ListenClient,\n  ManageClient,\n  ReadClient,\n  OnPremClient,\n  SelfHostedRestClient,\n  SpeakClient,\n  ModelsRestClient,\n} from \"./packages\";\n\n/**\n * The DeepgramClient class provides access to various Deepgram API clients, including ListenClient, ManageClient, SelfHostedRestClient, ReadClient, and SpeakClient.\n *\n * @see https://github.com/deepgram/deepgram-js-sdk\n */\nexport default class DeepgramClient extends AbstractClient {\n  /**\n   * Returns a new instance of the ListenClient, which provides access to the Deepgram API's listening functionality.\n   *\n   * @returns {ListenClient} A new instance of the ListenClient.\n   */\n  get listen(): ListenClient {\n    return new ListenClient(this.options);\n  }\n\n  /**\n   * Returns a new instance of the ManageClient, which provides access to the Deepgram API's management functionality.\n   *\n   * @returns {ManageClient} A new instance of the ManageClient.\n   */\n  get manage(): ManageClient {\n    return new ManageClient(this.options);\n  }\n\n  /**\n   * Returns a new instance of the ModelsRestClient, which provides access to the Deepgram API's model functionality.\n   *\n   * @returns {ModelsRestClient} A new instance of the ModelsRestClient.\n   */\n  get models(): ModelsRestClient {\n    return new ModelsRestClient(this.options);\n  }\n\n  /**\n   * Returns a new instance of the SelfHostedRestClient, which provides access to the Deepgram API's self-hosted functionality.\n   *\n   * @returns {OnPremClient} A new instance of the SelfHostedRestClient named as OnPremClient.\n   * @deprecated use selfhosted() instead\n   */\n  get onprem(): OnPremClient {\n    return this.selfhosted;\n  }\n\n  /**\n   * Returns a new instance of the SelfHostedRestClient, which provides access to the Deepgram API's self-hosted functionality.\n   *\n   * @returns {SelfHostedRestClient} A new instance of the SelfHostedRestClient.\n   */\n  get selfhosted(): SelfHostedRestClient {\n    return new SelfHostedRestClient(this.options);\n  }\n\n  /**\n   * Returns a new instance of the ReadClient, which provides access to the Deepgram API's reading functionality.\n   *\n   * @returns {ReadClient} A new instance of the ReadClient.\n   */\n  get read(): ReadClient {\n    return new ReadClient(this.options);\n  }\n\n  /**\n   * Returns a new instance of the SpeakClient, which provides access to the Deepgram API's speaking functionality.\n   *\n   * @returns {SpeakClient} A new instance of the SpeakClient.\n   */\n  get speak(): SpeakClient {\n    return new SpeakClient(this.options);\n  }\n\n  /**\n   * @deprecated\n   * @see https://dpgr.am/js-v3\n   */\n  get transcription(): any {\n    throw new DeepgramVersionError();\n  }\n\n  /**\n   * @deprecated\n   * @see https://dpgr.am/js-v3\n   */\n  get projects(): any {\n    throw new DeepgramVersionError();\n  }\n\n  /**\n   * @deprecated\n   * @see https://dpgr.am/js-v3\n   */\n  get keys(): any {\n    throw new DeepgramVersionError();\n  }\n\n  /**\n   * @deprecated\n   * @see https://dpgr.am/js-v3\n   */\n  get members(): any {\n    throw new DeepgramVersionError();\n  }\n\n  /**\n   * @deprecated\n   * @see https://dpgr.am/js-v3\n   */\n  get scopes(): any {\n    throw new DeepgramVersionError();\n  }\n\n  /**\n   * @deprecated\n   * @see https://dpgr.am/js-v3\n   */\n  get invitation(): any {\n    throw new DeepgramVersionError();\n  }\n\n  /**\n   * @deprecated\n   * @see https://dpgr.am/js-v3\n   */\n  get usage(): any {\n    throw new DeepgramVersionError();\n  }\n\n  /**\n   * @deprecated\n   * @see https://dpgr.am/js-v3\n   */\n  get billing(): any {\n    throw new DeepgramVersionError();\n  }\n}\n","import { DeepgramClientOptions, IKeyFactory } from \"./lib/types/DeepgramClientOptions\";\nimport { DeepgramVersionError } from \"./lib/errors\";\nimport DeepgramClient from \"./DeepgramClient\";\n\n/**\n * This class is deprecated and should not be used. It throws a `DeepgramVersionError` when instantiated.\n *\n * @deprecated\n * @see https://dpgr.am/js-v3\n */\nclass Deepgram {\n  constructor(protected apiKey: string, protected apiUrl?: string, protected requireSSL?: boolean) {\n    throw new DeepgramVersionError();\n  }\n}\n\n/**\n * Creates a new Deepgram client instance.\n *\n * @param {DeepgramClientArgs} args - Arguments to pass to the Deepgram client constructor.\n * @returns A new Deepgram client instance.\n */\nfunction createClient(): DeepgramClient;\nfunction createClient(key?: string | IKeyFactory): DeepgramClient;\nfunction createClient(options?: DeepgramClientOptions): DeepgramClient;\nfunction createClient(key?: string | IKeyFactory, options?: DeepgramClientOptions): DeepgramClient;\nfunction createClient(\n  keyOrOptions?: string | IKeyFactory | DeepgramClientOptions,\n  options?: DeepgramClientOptions\n): DeepgramClient {\n  let resolvedOptions: DeepgramClientOptions = {};\n\n  if (typeof keyOrOptions === \"string\" || typeof keyOrOptions === \"function\") {\n    if (typeof options === \"object\") {\n      resolvedOptions = options;\n    }\n\n    resolvedOptions.key = keyOrOptions;\n  } else if (typeof keyOrOptions === \"object\") {\n    resolvedOptions = keyOrOptions;\n  }\n\n  return new DeepgramClient(resolvedOptions);\n}\n\nexport { createClient, DeepgramClient, Deepgram };\n\n/**\n * Helpful exports.\n */\nexport * from \"./packages\";\nexport * from \"./lib/types\";\nexport * from \"./lib/enums\";\nexport * from \"./lib/constants\";\nexport * from \"./lib/errors\";\nexport * from \"./lib/helpers\";\n\n/**\n * Captions. These will be tree-shaken if unused.\n *\n * @see https://github.com/deepgram/deepgram-node-captions\n *\n * import/export declarations don't do anything but set up an alias to the\n * exported variable, they do not count as a \"use\". Given their semantics,\n * they are tracked specially by any bundler and will not adversely affect\n * tree-shaking.\n */\nexport { webvtt, srt } from \"@deepgram/captions\";\n","import { Service } from \"@ai16z/eliza\";\nimport {\n    IAgentRuntime,\n    ITranscriptionService,\n    Media,\n    ServiceType,\n    IVideoService,\n} from \"@ai16z/eliza\";\nimport { stringToUuid } from \"@ai16z/eliza\";\nimport ffmpeg from \"fluent-ffmpeg\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { tmpdir } from \"os\";\nimport youtubeDl from \"youtube-dl-exec\";\n\nexport class VideoService extends Service implements IVideoService {\n    static serviceType: ServiceType = ServiceType.VIDEO;\n    private cacheKey = \"content/video\";\n    private dataDir = \"./content_cache\";\n\n    private queue: string[] = [];\n    private processing: boolean = false;\n\n    constructor() {\n        super();\n        this.ensureDataDirectoryExists();\n    }\n\n    getInstance(): IVideoService {\n        return VideoService.getInstance();\n    }\n\n    async initialize(_runtime: IAgentRuntime): Promise<void> {}\n\n    private ensureDataDirectoryExists() {\n        if (!fs.existsSync(this.dataDir)) {\n            fs.mkdirSync(this.dataDir);\n        }\n    }\n\n    public isVideoUrl(url: string): boolean {\n        return (\n            url.includes(\"youtube.com\") ||\n            url.includes(\"youtu.be\") ||\n            url.includes(\"vimeo.com\")\n        );\n    }\n\n    public async downloadMedia(url: string): Promise<string> {\n        const videoId = this.getVideoId(url);\n        const outputFile = path.join(this.dataDir, `${videoId}.mp4`);\n\n        // if it already exists, return it\n        if (fs.existsSync(outputFile)) {\n            return outputFile;\n        }\n\n        try {\n            await youtubeDl(url, {\n                verbose: true,\n                output: outputFile,\n                writeInfoJson: true,\n            });\n            return outputFile;\n        } catch (error) {\n            console.error(\"Error downloading media:\", error);\n            throw new Error(\"Failed to download media\");\n        }\n    }\n\n    public async downloadVideo(videoInfo: any): Promise<string> {\n        const videoId = this.getVideoId(videoInfo.webpage_url);\n        const outputFile = path.join(this.dataDir, `${videoId}.mp4`);\n\n        // if it already exists, return it\n        if (fs.existsSync(outputFile)) {\n            return outputFile;\n        }\n\n        try {\n            await youtubeDl(videoInfo.webpage_url, {\n                verbose: true,\n                output: outputFile,\n                format: \"bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best\",\n                writeInfoJson: true,\n            });\n            return outputFile;\n        } catch (error) {\n            console.error(\"Error downloading video:\", error);\n            throw new Error(\"Failed to download video\");\n        }\n    }\n\n    public async processVideo(\n        url: string,\n        runtime: IAgentRuntime\n    ): Promise<Media> {\n        this.queue.push(url);\n        this.processQueue(runtime);\n\n        return new Promise((resolve, reject) => {\n            const checkQueue = async () => {\n                const index = this.queue.indexOf(url);\n                if (index !== -1) {\n                    setTimeout(checkQueue, 100);\n                } else {\n                    try {\n                        const result = await this.processVideoFromUrl(\n                            url,\n                            runtime\n                        );\n                        resolve(result);\n                    } catch (error) {\n                        reject(error);\n                    }\n                }\n            };\n            checkQueue();\n        });\n    }\n\n    private async processQueue(runtime): Promise<void> {\n        if (this.processing || this.queue.length === 0) {\n            return;\n        }\n\n        this.processing = true;\n\n        while (this.queue.length > 0) {\n            const url = this.queue.shift()!;\n            await this.processVideoFromUrl(url, runtime);\n        }\n\n        this.processing = false;\n    }\n\n    private async processVideoFromUrl(\n        url: string,\n        runtime: IAgentRuntime\n    ): Promise<Media> {\n        const videoId =\n            url.match(\n                /(?:youtu\\.be\\/|youtube\\.com(?:\\/embed\\/|\\/v\\/|\\/watch\\?v=|\\/watch\\?.+&v=))([^\\/&?]+)/ // eslint-disable-line\n            )?.[1] || \"\";\n        const videoUuid = this.getVideoId(videoId);\n        const cacheKey = `${this.cacheKey}/${videoUuid}`;\n\n        const cached = await runtime.cacheManager.get<Media>(cacheKey);\n\n        if (cached) {\n            console.log(\"Returning cached video file\");\n            return cached;\n        }\n\n        console.log(\"Cache miss, processing video\");\n        console.log(\"Fetching video info\");\n        const videoInfo = await this.fetchVideoInfo(url);\n        console.log(\"Getting transcript\");\n        const transcript = await this.getTranscript(url, videoInfo, runtime);\n\n        const result: Media = {\n            id: videoUuid,\n            url: url,\n            title: videoInfo.title,\n            source: videoInfo.channel,\n            description: videoInfo.description,\n            text: transcript,\n        };\n\n        await runtime.cacheManager.set(cacheKey, result);\n\n        return result;\n    }\n\n    private getVideoId(url: string): string {\n        return stringToUuid(url);\n    }\n\n    async fetchVideoInfo(url: string): Promise<any> {\n        if (url.endsWith(\".mp4\") || url.includes(\".mp4?\")) {\n            try {\n                const response = await fetch(url);\n                if (response.ok) {\n                    // If the URL is a direct link to an MP4 file, return a simplified video info object\n                    return {\n                        title: path.basename(url),\n                        description: \"\",\n                        channel: \"\",\n                    };\n                }\n            } catch (error) {\n                console.error(\"Error downloading MP4 file:\", error);\n                // Fall back to using youtube-dl if direct download fails\n            }\n        }\n\n        try {\n            const result = await youtubeDl(url, {\n                dumpJson: true,\n                verbose: true,\n                callHome: false,\n                noCheckCertificates: true,\n                preferFreeFormats: true,\n                youtubeSkipDashManifest: true,\n                writeSub: true,\n                writeAutoSub: true,\n                subLang: \"en\",\n                skipDownload: true,\n            });\n            return result;\n        } catch (error) {\n            console.error(\"Error fetching video info:\", error);\n            throw new Error(\"Failed to fetch video information\");\n        }\n    }\n\n    private async getTranscript(\n        url: string,\n        videoInfo: any,\n        runtime: IAgentRuntime\n    ): Promise<string> {\n        console.log(\"Getting transcript\");\n        try {\n            // Check for manual subtitles\n            if (videoInfo.subtitles && videoInfo.subtitles.en) {\n                console.log(\"Manual subtitles found\");\n                const srtContent = await this.downloadSRT(\n                    videoInfo.subtitles.en[0].url\n                );\n                return this.parseSRT(srtContent);\n            }\n\n            // Check for automatic captions\n            if (\n                videoInfo.automatic_captions &&\n                videoInfo.automatic_captions.en\n            ) {\n                console.log(\"Automatic captions found\");\n                const captionUrl = videoInfo.automatic_captions.en[0].url;\n                const captionContent = await this.downloadCaption(captionUrl);\n                return this.parseCaption(captionContent);\n            }\n\n            // Check if it's a music video\n            if (\n                videoInfo.categories &&\n                videoInfo.categories.includes(\"Music\")\n            ) {\n                console.log(\"Music video detected, no lyrics available\");\n                return \"No lyrics available.\";\n            }\n\n            // Fall back to audio transcription\n            console.log(\n                \"No captions found, falling back to audio transcription\"\n            );\n            return this.transcribeAudio(url, runtime);\n        } catch (error) {\n            console.error(\"Error in getTranscript:\", error);\n            throw error;\n        }\n    }\n\n    private async downloadCaption(url: string): Promise<string> {\n        console.log(\"Downloading caption from:\", url);\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\n                `Failed to download caption: ${response.statusText}`\n            );\n        }\n        return await response.text();\n    }\n\n    private parseCaption(captionContent: string): string {\n        console.log(\"Parsing caption\");\n        try {\n            const jsonContent = JSON.parse(captionContent);\n            if (jsonContent.events) {\n                return jsonContent.events\n                    .filter((event) => event.segs)\n                    .map((event) => event.segs.map((seg) => seg.utf8).join(\"\"))\n                    .join(\"\")\n                    .replace(\"\\n\", \" \");\n            } else {\n                console.error(\"Unexpected caption format:\", jsonContent);\n                return \"Error: Unable to parse captions\";\n            }\n        } catch (error) {\n            console.error(\"Error parsing caption:\", error);\n            return \"Error: Unable to parse captions\";\n        }\n    }\n\n    private parseSRT(srtContent: string): string {\n        // Simple SRT parser (replace with a more robust solution if needed)\n        return srtContent\n            .split(\"\\n\\n\")\n            .map((block) => block.split(\"\\n\").slice(2).join(\" \"))\n            .join(\" \");\n    }\n\n    private async downloadSRT(url: string): Promise<string> {\n        console.log(\"downloadSRT\");\n        const response = await fetch(url);\n        return await response.text();\n    }\n\n    async transcribeAudio(\n        url: string,\n        runtime: IAgentRuntime\n    ): Promise<string> {\n        console.log(\"Preparing audio for transcription...\");\n        const mp4FilePath = path.join(\n            this.dataDir,\n            `${this.getVideoId(url)}.mp4`\n        );\n\n        const mp3FilePath = path.join(\n            this.dataDir,\n            `${this.getVideoId(url)}.mp3`\n        );\n\n        if (!fs.existsSync(mp3FilePath)) {\n            if (fs.existsSync(mp4FilePath)) {\n                console.log(\"MP4 file found. Converting to MP3...\");\n                await this.convertMp4ToMp3(mp4FilePath, mp3FilePath);\n            } else {\n                console.log(\"Downloading audio...\");\n                await this.downloadAudio(url, mp3FilePath);\n            }\n        }\n\n        console.log(`Audio prepared at ${mp3FilePath}`);\n\n        const audioBuffer = fs.readFileSync(mp3FilePath);\n        console.log(`Audio file size: ${audioBuffer.length} bytes`);\n\n        console.log(\"Starting transcription...\");\n        const startTime = Date.now();\n        const transcriptionService = runtime.getService<ITranscriptionService>(\n            ServiceType.TRANSCRIPTION\n        );\n\n        if (!transcriptionService) {\n            throw new Error(\"Transcription service not found\");\n        }\n\n        const transcript = await transcriptionService.transcribe(audioBuffer);\n\n        const endTime = Date.now();\n        console.log(\n            `Transcription completed in ${(endTime - startTime) / 1000} seconds`\n        );\n\n        // Don't delete the MP3 file as it might be needed for future use\n        return transcript || \"Transcription failed\";\n    }\n\n    private async convertMp4ToMp3(\n        inputPath: string,\n        outputPath: string\n    ): Promise<void> {\n        return new Promise((resolve, reject) => {\n            ffmpeg(inputPath)\n                .output(outputPath)\n                .noVideo()\n                .audioCodec(\"libmp3lame\")\n                .on(\"end\", () => {\n                    console.log(\"Conversion to MP3 complete\");\n                    resolve();\n                })\n                .on(\"error\", (err) => {\n                    console.error(\"Error converting to MP3:\", err);\n                    reject(err);\n                })\n                .run();\n        });\n    }\n\n    private async downloadAudio(\n        url: string,\n        outputFile: string\n    ): Promise<string> {\n        console.log(\"Downloading audio\");\n        outputFile =\n            outputFile ??\n            path.join(this.dataDir, `${this.getVideoId(url)}.mp3`);\n\n        try {\n            if (url.endsWith(\".mp4\") || url.includes(\".mp4?\")) {\n                console.log(\n                    \"Direct MP4 file detected, downloading and converting to MP3\"\n                );\n                const tempMp4File = path.join(\n                    tmpdir(),\n                    `${this.getVideoId(url)}.mp4`\n                );\n                const response = await fetch(url);\n                const arrayBuffer = await response.arrayBuffer();\n                const buffer = Buffer.from(arrayBuffer);\n                fs.writeFileSync(tempMp4File, buffer);\n\n                await new Promise<void>((resolve, reject) => {\n                    ffmpeg(tempMp4File)\n                        .output(outputFile)\n                        .noVideo()\n                        .audioCodec(\"libmp3lame\")\n                        .on(\"end\", () => {\n                            fs.unlinkSync(tempMp4File);\n                            resolve();\n                        })\n                        .on(\"error\", (err) => {\n                            reject(err);\n                        })\n                        .run();\n                });\n            } else {\n                console.log(\n                    \"YouTube video detected, downloading audio with youtube-dl\"\n                );\n                await youtubeDl(url, {\n                    verbose: true,\n                    extractAudio: true,\n                    audioFormat: \"mp3\",\n                    output: outputFile,\n                    writeInfoJson: true,\n                });\n            }\n            return outputFile;\n        } catch (error) {\n            console.error(\"Error downloading audio:\", error);\n            throw new Error(\"Failed to download audio\");\n        }\n    }\n}\n","import {\n    IAgentRuntime,\n    IAwsS3Service,\n    Service,\n    ServiceType,\n} from \"@ai16z/eliza\";\nimport {\n    GetObjectCommand,\n    PutObjectCommand,\n    S3Client,\n} from \"@aws-sdk/client-s3\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\ninterface UploadResult {\n    success: boolean;\n    url?: string;\n    error?: string;\n}\n\ninterface JsonUploadResult extends UploadResult {\n    key?: string;  // Add storage key\n}\n\nexport class AwsS3Service extends Service implements IAwsS3Service {\n    static serviceType: ServiceType = ServiceType.AWS_S3;\n\n    private s3Client: S3Client | null = null;\n    private bucket: string = '';\n    private fileUploadPath: string = '';\n    private runtime: IAgentRuntime | null = null;\n\n    async initialize(runtime: IAgentRuntime): Promise<void> {\n        console.log(\"Initializing AwsS3Service\");\n        this.runtime = runtime;\n        this.fileUploadPath = runtime.getSetting(\"AWS_S3_UPLOAD_PATH\") ?? \"\";\n    }\n\n    private async initializeS3Client(): Promise<boolean> {\n        if (this.s3Client) return true;\n        if (!this.runtime) return false;\n\n        const AWS_ACCESS_KEY_ID = this.runtime.getSetting(\"AWS_ACCESS_KEY_ID\");\n        const AWS_SECRET_ACCESS_KEY = this.runtime.getSetting(\"AWS_SECRET_ACCESS_KEY\");\n        const AWS_REGION = this.runtime.getSetting(\"AWS_REGION\");\n        const AWS_S3_BUCKET = this.runtime.getSetting(\"AWS_S3_BUCKET\");\n\n        if (!AWS_ACCESS_KEY_ID || !AWS_SECRET_ACCESS_KEY || !AWS_REGION || !AWS_S3_BUCKET) {\n            return false;\n        }\n\n        this.s3Client = new S3Client({\n            region: AWS_REGION,\n            credentials: {\n                accessKeyId: AWS_ACCESS_KEY_ID,\n                secretAccessKey: AWS_SECRET_ACCESS_KEY,\n            },\n        });\n        this.bucket = AWS_S3_BUCKET;\n        return true;\n    }\n\n    async uploadFile(\n        filePath: string,\n        subDirectory: string = '',\n        useSignedUrl: boolean = false,\n        expiresIn: number = 900\n    ): Promise<UploadResult> {\n        try {\n            if (!await this.initializeS3Client()) {\n                return {\n                    success: false,\n                    error: \"AWS S3 credentials not configured\",\n                };\n            }\n\n            if (!fs.existsSync(filePath)) {\n                return {\n                    success: false,\n                    error: \"File does not exist\",\n                };\n            }\n\n            const fileContent = fs.readFileSync(filePath);\n\n            const baseFileName = `${Date.now()}-${path.basename(filePath)}`;\n            // Determine storage path based on public access\n            const fileName =`${this.fileUploadPath}${subDirectory}/${baseFileName}`.replaceAll('//', '/');\n            // Set upload parameters\n            const uploadParams = {\n                Bucket: this.bucket,\n                Key: fileName,\n                Body: fileContent,\n                ContentType: this.getContentType(filePath),\n            };\n\n            // Upload file\n            await this.s3Client.send(new PutObjectCommand(uploadParams));\n\n            // Build result object\n            const result: UploadResult = {\n                success: true,\n            };\n\n            // If not using signed URL, return public access URL\n            if (!useSignedUrl) {\n                result.url = `https://${this.bucket}.s3.${process.env.AWS_REGION}.amazonaws.com/${fileName}`;\n            } else {\n                const getObjectCommand = new GetObjectCommand({\n                    Bucket: this.bucket,\n                    Key: fileName,\n                });\n                result.url = await getSignedUrl(\n                    this.s3Client,\n                    getObjectCommand,\n                    {\n                        expiresIn, // 15 minutes in seconds\n                    }\n                );\n            }\n\n            return result;\n        } catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : \"Unknown error occurred\",\n            };\n        }\n    }\n\n    /**\n     * Generate signed URL for existing file\n     */\n    async generateSignedUrl(\n        fileName: string,\n        expiresIn: number = 900\n    ): Promise<string> {\n        if (!await this.initializeS3Client()) {\n            throw new Error(\"AWS S3 credentials not configured\");\n        }\n\n        const command = new GetObjectCommand({\n            Bucket: this.bucket,\n            Key: fileName,\n        });\n\n        return await getSignedUrl(this.s3Client, command, { expiresIn });\n    }\n\n    private getContentType(filePath: string): string {\n        const ext = path.extname(filePath).toLowerCase();\n        const contentTypes: { [key: string]: string } = {\n            \".png\": \"image/png\",\n            \".jpg\": \"image/jpeg\",\n            \".jpeg\": \"image/jpeg\",\n            \".gif\": \"image/gif\",\n            \".webp\": \"image/webp\",\n        };\n        return contentTypes[ext] || \"application/octet-stream\";\n    }\n\n    /**\n     * Upload JSON object to S3\n     * @param jsonData JSON data to upload\n     * @param fileName File name (optional, without path)\n     * @param subDirectory Subdirectory (optional)\n     * @param useSignedUrl Whether to use signed URL\n     * @param expiresIn Signed URL expiration time (seconds)\n     */\n    async uploadJson(\n        jsonData: any,\n        fileName?: string,\n        subDirectory?: string,\n        useSignedUrl: boolean = false,\n        expiresIn: number = 900\n    ): Promise<JsonUploadResult> {\n        try {\n            if (!await this.initializeS3Client()) {\n                return {\n                    success: false,\n                    error: \"AWS S3 credentials not configured\",\n                };\n            }\n\n            // Validate input\n            if (!jsonData) {\n                return {\n                    success: false,\n                    error: \"JSON data is required\",\n                };\n            }\n\n            // Generate filename (if not provided)\n            const timestamp = Date.now();\n            const actualFileName = fileName || `${timestamp}.json`;\n\n            // Build complete file path\n            let fullPath = this.fileUploadPath || '';\n            if (subDirectory) {\n                fullPath = `${fullPath}/${subDirectory}`.replace(/\\/+/g, '/');\n            }\n            const key = `${fullPath}/${actualFileName}`.replace(/\\/+/g, '/');\n\n            // Convert JSON to string\n            const jsonString = JSON.stringify(jsonData, null, 2);\n\n            // Set upload parameters\n            const uploadParams = {\n                Bucket: this.bucket,\n                Key: key,\n                Body: jsonString,\n                ContentType: 'application/json',\n            };\n\n            // Upload file\n            await this.s3Client.send(new PutObjectCommand(uploadParams));\n\n            // Build result\n            const result: JsonUploadResult = {\n                success: true,\n                key: key,\n            };\n\n            // Return corresponding URL based on requirements\n            if (!useSignedUrl) {\n                result.url = `https://${this.bucket}.s3.${process.env.AWS_REGION}.amazonaws.com/${key}`;\n            } else {\n                const getObjectCommand = new GetObjectCommand({\n                    Bucket: this.bucket,\n                    Key: key,\n                });\n                result.url = await getSignedUrl(\n                    this.s3Client,\n                    getObjectCommand,\n                    { expiresIn }\n                );\n            }\n\n            return result;\n\n        } catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : \"Unknown error occurred\",\n            };\n        }\n    }\n}\n\nexport default AwsS3Service;\n","export * from \"./services/index.ts\";\n\nimport { Plugin } from \"@ai16z/eliza\";\n\nimport {\n    BrowserService,\n    ImageDescriptionService,\n    LlamaService,\n    PdfService,\n    SpeechService,\n    TranscriptionService,\n    VideoService,\n    AwsS3Service\n} from \"./services/index.ts\";\n\nexport type NodePlugin = ReturnType<typeof createNodePlugin>;\n\nexport function createNodePlugin() {\n    return {\n        name: \"default\",\n        description: \"Default plugin, with basic actions and evaluators\",\n        services: [\n            new BrowserService(),\n            new ImageDescriptionService(),\n            new LlamaService(),\n            new PdfService(),\n            new SpeechService(),\n            new TranscriptionService(),\n            new VideoService(),\n            new AwsS3Service()\n        ],\n    } as const satisfies Plugin;\n}\n"],"mappings":"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","names":["isMergeableObject","Service","ServiceType","elizaLogger","ServiceType","ModelProviderName","Service","fs","path","response","ollamaUrl","embeddingModel","Service","ServiceType","ServiceType","Service","elizaLogger","Service","ServiceType","elizaLogger","settings","Service","ServiceType","fs","os","path","fileURLToPath","merge","CrossFetchHeaders","merge","SOCKET_STATES","CONNECTION_STATE","version","import_cross_fetch","crossFetch","fetch","__awaiter","import_deepmerge","merge","LiveTranscriptionEvents","LiveTTSEvents","result","result","result","result","result","fileURLToPath","__dirname","path","Service","ServiceType","fs","os","settings","elizaLogger","Service","ServiceType","stringToUuid","fs","path","Service","ServiceType","fs","path"]}